/* Copyright 2018-2021 Universidad Politécnica de Madrid (UPM).
 *
 * Authors:
 *    Néstor Lucas Martínez
 *    José-Fernán Martínez Ortega
 *    Vicente Hernández Díaz
 * 
 * This software is distributed under a dual-license scheme:
 *
 * - For academic uses: Licensed under GNU Affero General Public License as
 *                      published by the Free Software Foundation, either
 *                      version 3 of the License, or (at your option) any
 *                      later version.
 * 
 * - For any other use: Licensed under the Apache License, Version 2.0.
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * You can get a copy of the license terms in licenses/LICENSE.
 * 
 */

package afc.mw.MissionManager.services.rest;

import java.io.File;
import java.io.FilenameFilter;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.json.bind.Jsonb;
import javax.json.bind.JsonbBuilder;
import javax.json.bind.JsonbConfig;
import javax.json.bind.JsonbException;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;
import javax.ws.rs.core.Response.Status;

import com.afarcloud.thrift.Mission;

import afc.mw.MissionManager.MissionManager;
import afc.mw.MissionManager.MissionManagerContext;
import afc.mw.MissionManager.types.MissionReport;

/**
 * REST service for the Mission Manager
 * 
 * @author Néstor Lucas Martínez <nestor.lucas@upm.es>
 *
 */
@Path("MissionManager")
public class MissionManagerRESTService {
	private final static Jsonb jsonb = JsonbBuilder.create(new JsonbConfig());

	private MissionManagerContext context = MissionManagerContext.getInstance();
    private Logger mmLog = context.mmLog;
    	
    public MissionManagerRESTService() { }
    
    /**
     * Gets the version of the Mission Manager.
     *
     * @return The version of the Mission Manager.
     */
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response getMissionManager() {
    	mmLog.log(Level.INFO, "Requested MissionManager version");
    	return Response.ok("MissionManager version " + context.getVersion()).build();
    }
    
    /**
     * Gets the current/last mission.
     * 
     * @return The current/last mission in JSON format.
     */
    @Path("currentMission")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response getCurrentMission() {
    	mmLog.log(Level.INFO, "Requested Current/Last Mission");

    	Mission mission = MissionManager.getInstance().getCurrentMission();
    	
    	if (mission == null) {
    		return Response
    				.status(Status.NO_CONTENT.getStatusCode(), "There is no current nor last mission known to the Mission Manager")
    				.build();
    	}
    	else {    	
    		try {
        		return Response
        				.ok(jsonb.toJson(mission))
        				.build();
    		}
    		catch (Exception e) {
    			mmLog.log(Level.WARNING, "There was an error trying to parse the mission into JSON format");
    			if (context.debug) {
    				mmLog.log(Level.WARNING, e.getMessage(), e);
    			}
    			
    			return Response
    					.status(Status.SEE_OTHER.getStatusCode(), "Error while processing the mission to be parsed into JSON format. Please contact support.")
    					.build();
    		}    		
    	}
    }
    
    /**
     * Gets the list of logs generated by the Mission Manager.
     * 
     * @return The list of logs generated by the Mission Manager.
     */
    @Path("logs")
	@GET
    @Produces(MediaType.TEXT_HTML)
    public Response getLogList() {
    	mmLog.log(Level.INFO, "Requested list of logs");
    	
    	StringBuilder responseBody = new StringBuilder();
    	responseBody.append("<html>");
    	responseBody.append("<head>");
    	responseBody.append("<title>List of Mission Manager logs</title>");
    	responseBody.append("</head>");
    	responseBody.append("<body>");  	

    	File logdir = new File(context.logdir);
    	File[] filelist = logdir.listFiles(new FilenameFilter() {
    	    public boolean accept(File dir, String name) {
    	        return !name.endsWith(".lck");
    	    }
    	});
    	responseBody.append("Log files available:<br>");
    	responseBody.append("<ul>");
    	for (File file : filelist) {
    		responseBody.append("<li><a href=\"logs/")
    		.append(file.getName()).append("\">")
    		.append(file.getName()).append("</a>")
    		.append("</li>");
    	}
    	responseBody.append("</ul>");	
    	responseBody.append("</body>");
    	responseBody.append("</html>");
    	
    	return Response.ok(responseBody.toString()).build();
    }

    /**
     * The corresponding log file, if it exists.
     * 
     * @param logfile	The requested log file.
     * @return			The contents of the requested log file.
     */
    @Path("logs/{logfile}")
	@GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response getLogs(@PathParam("logfile") String logfile) {
    	mmLog.log(Level.INFO, "Requested log file " + logfile);
    	
    	StringBuilder responseBody = new StringBuilder();
    	responseBody.append("<html>");
    	responseBody.append("<head>");
    	responseBody.append("<title>Mission Manager logs</title>");
    	responseBody.append("</head>");
    	responseBody.append("<body>");
    	
    	File file = new File(context.logdir + File.separator + logfile);
    	if (file.exists()) {
    		ResponseBuilder response = Response.ok((Object) file);
    		
// Uncomment the code below if you want the file returned as an attachment
//    		response.header("Content-Disposition",
//    				"attachment; filename=\"" + file.getName() + "\"");
    		
    		return response.build();
    	}
    	else {
    		responseBody.append("Log file " + logfile + " does not exist");
    	}
    	
    	responseBody.append("</body>");
    	responseBody.append("</html>");
    	return Response.ok(responseBody.toString()).build();
    }
    
    /**
     * Gets the list of stored missions.
     * 
     * @return The list of stored missions.
     */
    @Path("missions")
	@GET
    @Produces(MediaType.TEXT_HTML)
    public Response getMissionsTopList() {
    	mmLog.log(Level.INFO, "Requested list of stored missions");
    	
    	StringBuilder responseBody = new StringBuilder();
    	responseBody.append("<html>");
    	responseBody.append("<head>");
    	responseBody.append("<title>List of stored missions</title>");
    	responseBody.append("</head>");
    	responseBody.append("<body>");  	

    	File logdir = new File(context.mission_base_dir);
    	File[] filelist = logdir.listFiles(new FilenameFilter() {
    	    public boolean accept(File dir, String name) {
    	        return !name.endsWith(".lck");
    	    }
    	});
    	if (filelist != null) {
    		responseBody.append("Stored missions folders available:<br>");
    		responseBody.append("<ul>");
    		for (File file : filelist) {
    			responseBody.append("<li><a href=\"missions/")
    			.append(file.getName()).append("\">")
    			.append(file.getName()).append("</a>")
    			.append("</li>");
    		}
        	responseBody.append("</ul>");	
    	}
    	else {
    		responseBody.append("There are no stored missions yet.");
    	}
    	responseBody.append("</body>");
    	responseBody.append("</html>");
    	
    	return Response.ok(responseBody.toString()).build();
    }
    
    /**
     * Gets the list of  files for the requested stored mission.
     * 
     * @param missionFolder	The stored mission.
     * @return				The list of files for the stored mission.
     */
    @Path("missions/{missionfolder}")
	@GET
    @Produces(MediaType.TEXT_HTML)
    public Response getMissionsList(@PathParam("missionfolder") String missionFolder) {
    	mmLog.log(Level.INFO, "Requested list of stored missions in " + missionFolder);
    	
    	StringBuilder responseBody = new StringBuilder();
    	responseBody.append("<html>");
    	responseBody.append("<head>");
    	responseBody.append("<title>List of stored missions in " + missionFolder + "</title>");
    	responseBody.append("</head>");
    	responseBody.append("<body>");  	

    	File logdir = new File(context.mission_base_dir + File.separator + missionFolder);
    	File[] filelist = logdir.listFiles();
    	Arrays.sort(filelist);
    	responseBody.append("Stored missions files available for " + missionFolder + ":<br>");
    	responseBody.append("<ul>");
    	for (File file : filelist) {
    		responseBody.append("<li><a href=\"" + missionFolder + "/")
    		.append(file.getName()).append("\">")
    		.append(file.getName()).append("</a>")
    		.append("</li>");
    	}
    	responseBody.append("</ul>");	
    	responseBody.append("</body>");
    	responseBody.append("</html>");
    	
    	return Response.ok(responseBody.toString()).build();
    }
    
    /**
     * Gets the requested stored mission file for the requested stored mission.
     * 
     * @param missionFolder		The stored mission
     * @param missionFile		The stored mission file
     * @return					The stored mission file
     */
    @Path("missions/{missionfolder}/{missionfile}")
	@GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response getMissionFile(@PathParam("missionfolder") String missionFolder,
    							   @PathParam("missionfile") String missionFile) {
    	mmLog.log(Level.INFO, "Requested mission file " + missionFile);
    	
    	StringBuilder responseBody = new StringBuilder();
    	responseBody.append("<html>");
    	responseBody.append("<head>");
    	responseBody.append("<title>Mission Manager stored missiosn</title>");
    	responseBody.append("</head>");
    	responseBody.append("<body>");
    	
    	File file = new File(context.mission_base_dir + File.separator + missionFolder
    			+ File.separator + missionFile);
    	if (file.exists()) {
    		ResponseBuilder response = Response.ok((Object) file);

// Uncomment this if you want the file returned as an attachment
//    		response.header("Content-Disposition",
//    				"attachment; filename=\"" + file.getName() + "\"");
    		return response.build();
    	}
    	else {
    		responseBody.append("Mission file " + missionFile + " does not exist");
    	}
    	
    	responseBody.append("</body>");
    	responseBody.append("</html>");
    	return Response.ok(responseBody.toString()).build();
    }
    
    /**
     * Receives a new mission report from the Mission Reporter.
     * 
     * @param report	The report
     * @return			200 if the mission report is valid.
     * 					404 if the mission report is invalid.
     * 					500 if there is any error processing the report.
     */
    @Path("reports")
    @PUT
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.TEXT_PLAIN)
    public Response putMissionReport(String report) {
    	mmLog.log(Level.INFO, "PUT request for mission report: \n" + report);

    	try {
        	MissionReport missionReport = jsonb.fromJson(report, MissionReport.class);
        	mmLog.log(Level.INFO, "Received report for mission ID: " + missionReport.mission_id);
        	
        	switch(MissionManager.getInstance().validateReport(missionReport)) {
        	case MissionReport.MISSION_REPORT_VALID:
        		return Response.ok().build();
        	case MissionReport.MISSION_REPORT_INVALID_MISSION_ID:
        		return Response.status(Status.NOT_FOUND).entity("Invalid mission ID.").build();
        	case MissionReport.MISSION_REPORT_INVALID_MISSION_NOT_ACTIVE:
        		return Response.status(Status.NOT_FOUND).entity("Mission is not active.").build();
        	case MissionReport.MISSION_REPORT_INVALID_MISSION_NO_MISSION:
        		return Response.status(Status.NOT_FOUND).entity("There is no mission active.").build();
        	case MissionReport.MISSION_REPORT_INVALID_VEHICLE_ID:
        		return Response.status(Status.NOT_FOUND).entity("Invalid vehicle ID.").build();
        	default:
        		return Response.status(Status.INTERNAL_SERVER_ERROR).build();
        	}
    	}
    	catch (JsonbException e) {
    		mmLog.log(Level.WARNING, "Mission report error: INVALID FORMAT");
			if (context.debug) {
				mmLog.log(Level.WARNING, e.getMessage(), e);
			}
    	}
    	catch (NullPointerException e) {
    		mmLog.log(Level.WARNING, "Mission report error: EMPTY FIELD IN REPORT (NULL)");
			if (context.debug) {
				mmLog.log(Level.WARNING, e.getMessage(), e);
			}
    	}
    	
    	return Response.status(Status.INTERNAL_SERVER_ERROR).build();
    }
    
}
