/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.afarcloud.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2020-9-11")
public class Task implements org.apache.thrift.TBase<Task, Task._Fields>, java.io.Serializable, Cloneable, Comparable<Task> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Task");

  private static final org.apache.thrift.protocol.TField TASK_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskTemplate", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("speed", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ALTITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("altitude", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField TIME_LAPSE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeLapse", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BEARING_FIELD_DESC = new org.apache.thrift.protocol.TField("bearing", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField TASK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskStatus", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField ASSIGNED_VEHICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("assignedVehicleId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PARENT_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentTaskId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PARTFIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("partfields", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField TREATMENT_GRIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("treatmentGrids", org.apache.thrift.protocol.TType.LIST, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskTupleSchemeFactory());
  }

  public TaskTemplate taskTemplate; // required
  public int id; // required
  public int missionId; // required
  public Region area; // required
  public double speed; // required
  public double altitude; // required
  public double range; // required
  public int timeLapse; // required
  public Orientation bearing; // required
  public long startTime; // required
  public long endTime; // required
  /**
   * 
   * @see TaskCommandStatus
   */
  public TaskCommandStatus taskStatus; // required
  public int assignedVehicleId; // required
  public int parentTaskId; // required
  public List<PartField> partfields; // optional
  public List<TreatmentGrid> treatmentGrids; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_TEMPLATE((short)1, "taskTemplate"),
    ID((short)2, "id"),
    MISSION_ID((short)3, "missionId"),
    AREA((short)4, "area"),
    SPEED((short)5, "speed"),
    ALTITUDE((short)6, "altitude"),
    RANGE((short)7, "range"),
    TIME_LAPSE((short)8, "timeLapse"),
    BEARING((short)9, "bearing"),
    START_TIME((short)10, "startTime"),
    END_TIME((short)11, "endTime"),
    /**
     * 
     * @see TaskCommandStatus
     */
    TASK_STATUS((short)12, "taskStatus"),
    ASSIGNED_VEHICLE_ID((short)13, "assignedVehicleId"),
    PARENT_TASK_ID((short)14, "parentTaskId"),
    PARTFIELDS((short)15, "partfields"),
    TREATMENT_GRIDS((short)16, "treatmentGrids");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_TEMPLATE
          return TASK_TEMPLATE;
        case 2: // ID
          return ID;
        case 3: // MISSION_ID
          return MISSION_ID;
        case 4: // AREA
          return AREA;
        case 5: // SPEED
          return SPEED;
        case 6: // ALTITUDE
          return ALTITUDE;
        case 7: // RANGE
          return RANGE;
        case 8: // TIME_LAPSE
          return TIME_LAPSE;
        case 9: // BEARING
          return BEARING;
        case 10: // START_TIME
          return START_TIME;
        case 11: // END_TIME
          return END_TIME;
        case 12: // TASK_STATUS
          return TASK_STATUS;
        case 13: // ASSIGNED_VEHICLE_ID
          return ASSIGNED_VEHICLE_ID;
        case 14: // PARENT_TASK_ID
          return PARENT_TASK_ID;
        case 15: // PARTFIELDS
          return PARTFIELDS;
        case 16: // TREATMENT_GRIDS
          return TREATMENT_GRIDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MISSIONID_ISSET_ID = 1;
  private static final int __SPEED_ISSET_ID = 2;
  private static final int __ALTITUDE_ISSET_ID = 3;
  private static final int __RANGE_ISSET_ID = 4;
  private static final int __TIMELAPSE_ISSET_ID = 5;
  private static final int __STARTTIME_ISSET_ID = 6;
  private static final int __ENDTIME_ISSET_ID = 7;
  private static final int __ASSIGNEDVEHICLEID_ISSET_ID = 8;
  private static final int __PARENTTASKID_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARTFIELDS,_Fields.TREATMENT_GRIDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("taskTemplate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaskTemplate.class)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Region.class)));
    tmpMap.put(_Fields.SPEED, new org.apache.thrift.meta_data.FieldMetaData("speed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ALTITUDE, new org.apache.thrift.meta_data.FieldMetaData("altitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TIME_LAPSE, new org.apache.thrift.meta_data.FieldMetaData("timeLapse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BEARING, new org.apache.thrift.meta_data.FieldMetaData("bearing", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Orientation.class)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("taskStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TaskCommandStatus.class)));
    tmpMap.put(_Fields.ASSIGNED_VEHICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("assignedVehicleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("parentTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTFIELDS, new org.apache.thrift.meta_data.FieldMetaData("partfields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "PartField"))));
    tmpMap.put(_Fields.TREATMENT_GRIDS, new org.apache.thrift.meta_data.FieldMetaData("treatmentGrids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TreatmentGrid"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Task.class, metaDataMap);
  }

  public Task() {
  }

  public Task(
    TaskTemplate taskTemplate,
    int id,
    int missionId,
    Region area,
    double speed,
    double altitude,
    double range,
    int timeLapse,
    Orientation bearing,
    long startTime,
    long endTime,
    TaskCommandStatus taskStatus,
    int assignedVehicleId,
    int parentTaskId)
  {
    this();
    this.taskTemplate = taskTemplate;
    this.id = id;
    setIdIsSet(true);
    this.missionId = missionId;
    setMissionIdIsSet(true);
    this.area = area;
    this.speed = speed;
    setSpeedIsSet(true);
    this.altitude = altitude;
    setAltitudeIsSet(true);
    this.range = range;
    setRangeIsSet(true);
    this.timeLapse = timeLapse;
    setTimeLapseIsSet(true);
    this.bearing = bearing;
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.taskStatus = taskStatus;
    this.assignedVehicleId = assignedVehicleId;
    setAssignedVehicleIdIsSet(true);
    this.parentTaskId = parentTaskId;
    setParentTaskIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Task(Task other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTaskTemplate()) {
      this.taskTemplate = new TaskTemplate(other.taskTemplate);
    }
    this.id = other.id;
    this.missionId = other.missionId;
    if (other.isSetArea()) {
      this.area = new Region(other.area);
    }
    this.speed = other.speed;
    this.altitude = other.altitude;
    this.range = other.range;
    this.timeLapse = other.timeLapse;
    if (other.isSetBearing()) {
      this.bearing = new Orientation(other.bearing);
    }
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    if (other.isSetTaskStatus()) {
      this.taskStatus = other.taskStatus;
    }
    this.assignedVehicleId = other.assignedVehicleId;
    this.parentTaskId = other.parentTaskId;
    if (other.isSetPartfields()) {
      List<PartField> __this__partfields = new ArrayList<PartField>(other.partfields.size());
      for (PartField other_element : other.partfields) {
        __this__partfields.add(other_element);
      }
      this.partfields = __this__partfields;
    }
    if (other.isSetTreatmentGrids()) {
      List<TreatmentGrid> __this__treatmentGrids = new ArrayList<TreatmentGrid>(other.treatmentGrids.size());
      for (TreatmentGrid other_element : other.treatmentGrids) {
        __this__treatmentGrids.add(other_element);
      }
      this.treatmentGrids = __this__treatmentGrids;
    }
  }

  public Task deepCopy() {
    return new Task(this);
  }

  @Override
  public void clear() {
    this.taskTemplate = null;
    setIdIsSet(false);
    this.id = 0;
    setMissionIdIsSet(false);
    this.missionId = 0;
    this.area = null;
    setSpeedIsSet(false);
    this.speed = 0.0;
    setAltitudeIsSet(false);
    this.altitude = 0.0;
    setRangeIsSet(false);
    this.range = 0.0;
    setTimeLapseIsSet(false);
    this.timeLapse = 0;
    this.bearing = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    this.taskStatus = null;
    setAssignedVehicleIdIsSet(false);
    this.assignedVehicleId = 0;
    setParentTaskIdIsSet(false);
    this.parentTaskId = 0;
    this.partfields = null;
    this.treatmentGrids = null;
  }

  public TaskTemplate getTaskTemplate() {
    return this.taskTemplate;
  }

  public Task setTaskTemplate(TaskTemplate taskTemplate) {
    this.taskTemplate = taskTemplate;
    return this;
  }

  public void unsetTaskTemplate() {
    this.taskTemplate = null;
  }

  /** Returns true if field taskTemplate is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskTemplate() {
    return this.taskTemplate != null;
  }

  public void setTaskTemplateIsSet(boolean value) {
    if (!value) {
      this.taskTemplate = null;
    }
  }

  public int getId() {
    return this.id;
  }

  public Task setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getMissionId() {
    return this.missionId;
  }

  public Task setMissionId(int missionId) {
    this.missionId = missionId;
    setMissionIdIsSet(true);
    return this;
  }

  public void unsetMissionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSIONID_ISSET_ID);
  }

  /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
  public boolean isSetMissionId() {
    return EncodingUtils.testBit(__isset_bitfield, __MISSIONID_ISSET_ID);
  }

  public void setMissionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSIONID_ISSET_ID, value);
  }

  public Region getArea() {
    return this.area;
  }

  public Task setArea(Region area) {
    this.area = area;
    return this;
  }

  public void unsetArea() {
    this.area = null;
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean isSetArea() {
    return this.area != null;
  }

  public void setAreaIsSet(boolean value) {
    if (!value) {
      this.area = null;
    }
  }

  public double getSpeed() {
    return this.speed;
  }

  public Task setSpeed(double speed) {
    this.speed = speed;
    setSpeedIsSet(true);
    return this;
  }

  public void unsetSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPEED_ISSET_ID);
  }

  /** Returns true if field speed is set (has been assigned a value) and false otherwise */
  public boolean isSetSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __SPEED_ISSET_ID);
  }

  public void setSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPEED_ISSET_ID, value);
  }

  public double getAltitude() {
    return this.altitude;
  }

  public Task setAltitude(double altitude) {
    this.altitude = altitude;
    setAltitudeIsSet(true);
    return this;
  }

  public void unsetAltitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALTITUDE_ISSET_ID);
  }

  /** Returns true if field altitude is set (has been assigned a value) and false otherwise */
  public boolean isSetAltitude() {
    return EncodingUtils.testBit(__isset_bitfield, __ALTITUDE_ISSET_ID);
  }

  public void setAltitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALTITUDE_ISSET_ID, value);
  }

  public double getRange() {
    return this.range;
  }

  public Task setRange(double range) {
    this.range = range;
    setRangeIsSet(true);
    return this;
  }

  public void unsetRange() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGE_ISSET_ID);
  }

  /** Returns true if field range is set (has been assigned a value) and false otherwise */
  public boolean isSetRange() {
    return EncodingUtils.testBit(__isset_bitfield, __RANGE_ISSET_ID);
  }

  public void setRangeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGE_ISSET_ID, value);
  }

  public int getTimeLapse() {
    return this.timeLapse;
  }

  public Task setTimeLapse(int timeLapse) {
    this.timeLapse = timeLapse;
    setTimeLapseIsSet(true);
    return this;
  }

  public void unsetTimeLapse() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMELAPSE_ISSET_ID);
  }

  /** Returns true if field timeLapse is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeLapse() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMELAPSE_ISSET_ID);
  }

  public void setTimeLapseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMELAPSE_ISSET_ID, value);
  }

  public Orientation getBearing() {
    return this.bearing;
  }

  public Task setBearing(Orientation bearing) {
    this.bearing = bearing;
    return this;
  }

  public void unsetBearing() {
    this.bearing = null;
  }

  /** Returns true if field bearing is set (has been assigned a value) and false otherwise */
  public boolean isSetBearing() {
    return this.bearing != null;
  }

  public void setBearingIsSet(boolean value) {
    if (!value) {
      this.bearing = null;
    }
  }

  public long getStartTime() {
    return this.startTime;
  }

  public Task setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public Task setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  /**
   * 
   * @see TaskCommandStatus
   */
  public TaskCommandStatus getTaskStatus() {
    return this.taskStatus;
  }

  /**
   * 
   * @see TaskCommandStatus
   */
  public Task setTaskStatus(TaskCommandStatus taskStatus) {
    this.taskStatus = taskStatus;
    return this;
  }

  public void unsetTaskStatus() {
    this.taskStatus = null;
  }

  /** Returns true if field taskStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskStatus() {
    return this.taskStatus != null;
  }

  public void setTaskStatusIsSet(boolean value) {
    if (!value) {
      this.taskStatus = null;
    }
  }

  public int getAssignedVehicleId() {
    return this.assignedVehicleId;
  }

  public Task setAssignedVehicleId(int assignedVehicleId) {
    this.assignedVehicleId = assignedVehicleId;
    setAssignedVehicleIdIsSet(true);
    return this;
  }

  public void unsetAssignedVehicleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSIGNEDVEHICLEID_ISSET_ID);
  }

  /** Returns true if field assignedVehicleId is set (has been assigned a value) and false otherwise */
  public boolean isSetAssignedVehicleId() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSIGNEDVEHICLEID_ISSET_ID);
  }

  public void setAssignedVehicleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSIGNEDVEHICLEID_ISSET_ID, value);
  }

  public int getParentTaskId() {
    return this.parentTaskId;
  }

  public Task setParentTaskId(int parentTaskId) {
    this.parentTaskId = parentTaskId;
    setParentTaskIdIsSet(true);
    return this;
  }

  public void unsetParentTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTTASKID_ISSET_ID);
  }

  /** Returns true if field parentTaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTTASKID_ISSET_ID);
  }

  public void setParentTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTTASKID_ISSET_ID, value);
  }

  public int getPartfieldsSize() {
    return (this.partfields == null) ? 0 : this.partfields.size();
  }

  public java.util.Iterator<PartField> getPartfieldsIterator() {
    return (this.partfields == null) ? null : this.partfields.iterator();
  }

  public void addToPartfields(PartField elem) {
    if (this.partfields == null) {
      this.partfields = new ArrayList<PartField>();
    }
    this.partfields.add(elem);
  }

  public List<PartField> getPartfields() {
    return this.partfields;
  }

  public Task setPartfields(List<PartField> partfields) {
    this.partfields = partfields;
    return this;
  }

  public void unsetPartfields() {
    this.partfields = null;
  }

  /** Returns true if field partfields is set (has been assigned a value) and false otherwise */
  public boolean isSetPartfields() {
    return this.partfields != null;
  }

  public void setPartfieldsIsSet(boolean value) {
    if (!value) {
      this.partfields = null;
    }
  }

  public int getTreatmentGridsSize() {
    return (this.treatmentGrids == null) ? 0 : this.treatmentGrids.size();
  }

  public java.util.Iterator<TreatmentGrid> getTreatmentGridsIterator() {
    return (this.treatmentGrids == null) ? null : this.treatmentGrids.iterator();
  }

  public void addToTreatmentGrids(TreatmentGrid elem) {
    if (this.treatmentGrids == null) {
      this.treatmentGrids = new ArrayList<TreatmentGrid>();
    }
    this.treatmentGrids.add(elem);
  }

  public List<TreatmentGrid> getTreatmentGrids() {
    return this.treatmentGrids;
  }

  public Task setTreatmentGrids(List<TreatmentGrid> treatmentGrids) {
    this.treatmentGrids = treatmentGrids;
    return this;
  }

  public void unsetTreatmentGrids() {
    this.treatmentGrids = null;
  }

  /** Returns true if field treatmentGrids is set (has been assigned a value) and false otherwise */
  public boolean isSetTreatmentGrids() {
    return this.treatmentGrids != null;
  }

  public void setTreatmentGridsIsSet(boolean value) {
    if (!value) {
      this.treatmentGrids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_TEMPLATE:
      if (value == null) {
        unsetTaskTemplate();
      } else {
        setTaskTemplate((TaskTemplate)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case MISSION_ID:
      if (value == null) {
        unsetMissionId();
      } else {
        setMissionId((Integer)value);
      }
      break;

    case AREA:
      if (value == null) {
        unsetArea();
      } else {
        setArea((Region)value);
      }
      break;

    case SPEED:
      if (value == null) {
        unsetSpeed();
      } else {
        setSpeed((Double)value);
      }
      break;

    case ALTITUDE:
      if (value == null) {
        unsetAltitude();
      } else {
        setAltitude((Double)value);
      }
      break;

    case RANGE:
      if (value == null) {
        unsetRange();
      } else {
        setRange((Double)value);
      }
      break;

    case TIME_LAPSE:
      if (value == null) {
        unsetTimeLapse();
      } else {
        setTimeLapse((Integer)value);
      }
      break;

    case BEARING:
      if (value == null) {
        unsetBearing();
      } else {
        setBearing((Orientation)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case TASK_STATUS:
      if (value == null) {
        unsetTaskStatus();
      } else {
        setTaskStatus((TaskCommandStatus)value);
      }
      break;

    case ASSIGNED_VEHICLE_ID:
      if (value == null) {
        unsetAssignedVehicleId();
      } else {
        setAssignedVehicleId((Integer)value);
      }
      break;

    case PARENT_TASK_ID:
      if (value == null) {
        unsetParentTaskId();
      } else {
        setParentTaskId((Integer)value);
      }
      break;

    case PARTFIELDS:
      if (value == null) {
        unsetPartfields();
      } else {
        setPartfields((List<PartField>)value);
      }
      break;

    case TREATMENT_GRIDS:
      if (value == null) {
        unsetTreatmentGrids();
      } else {
        setTreatmentGrids((List<TreatmentGrid>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_TEMPLATE:
      return getTaskTemplate();

    case ID:
      return Integer.valueOf(getId());

    case MISSION_ID:
      return Integer.valueOf(getMissionId());

    case AREA:
      return getArea();

    case SPEED:
      return Double.valueOf(getSpeed());

    case ALTITUDE:
      return Double.valueOf(getAltitude());

    case RANGE:
      return Double.valueOf(getRange());

    case TIME_LAPSE:
      return Integer.valueOf(getTimeLapse());

    case BEARING:
      return getBearing();

    case START_TIME:
      return Long.valueOf(getStartTime());

    case END_TIME:
      return Long.valueOf(getEndTime());

    case TASK_STATUS:
      return getTaskStatus();

    case ASSIGNED_VEHICLE_ID:
      return Integer.valueOf(getAssignedVehicleId());

    case PARENT_TASK_ID:
      return Integer.valueOf(getParentTaskId());

    case PARTFIELDS:
      return getPartfields();

    case TREATMENT_GRIDS:
      return getTreatmentGrids();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_TEMPLATE:
      return isSetTaskTemplate();
    case ID:
      return isSetId();
    case MISSION_ID:
      return isSetMissionId();
    case AREA:
      return isSetArea();
    case SPEED:
      return isSetSpeed();
    case ALTITUDE:
      return isSetAltitude();
    case RANGE:
      return isSetRange();
    case TIME_LAPSE:
      return isSetTimeLapse();
    case BEARING:
      return isSetBearing();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case TASK_STATUS:
      return isSetTaskStatus();
    case ASSIGNED_VEHICLE_ID:
      return isSetAssignedVehicleId();
    case PARENT_TASK_ID:
      return isSetParentTaskId();
    case PARTFIELDS:
      return isSetPartfields();
    case TREATMENT_GRIDS:
      return isSetTreatmentGrids();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Task)
      return this.equals((Task)that);
    return false;
  }

  public boolean equals(Task that) {
    if (that == null)
      return false;

    boolean this_present_taskTemplate = true && this.isSetTaskTemplate();
    boolean that_present_taskTemplate = true && that.isSetTaskTemplate();
    if (this_present_taskTemplate || that_present_taskTemplate) {
      if (!(this_present_taskTemplate && that_present_taskTemplate))
        return false;
      if (!this.taskTemplate.equals(that.taskTemplate))
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_missionId = true;
    boolean that_present_missionId = true;
    if (this_present_missionId || that_present_missionId) {
      if (!(this_present_missionId && that_present_missionId))
        return false;
      if (this.missionId != that.missionId)
        return false;
    }

    boolean this_present_area = true && this.isSetArea();
    boolean that_present_area = true && that.isSetArea();
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (!this.area.equals(that.area))
        return false;
    }

    boolean this_present_speed = true;
    boolean that_present_speed = true;
    if (this_present_speed || that_present_speed) {
      if (!(this_present_speed && that_present_speed))
        return false;
      if (this.speed != that.speed)
        return false;
    }

    boolean this_present_altitude = true;
    boolean that_present_altitude = true;
    if (this_present_altitude || that_present_altitude) {
      if (!(this_present_altitude && that_present_altitude))
        return false;
      if (this.altitude != that.altitude)
        return false;
    }

    boolean this_present_range = true;
    boolean that_present_range = true;
    if (this_present_range || that_present_range) {
      if (!(this_present_range && that_present_range))
        return false;
      if (this.range != that.range)
        return false;
    }

    boolean this_present_timeLapse = true;
    boolean that_present_timeLapse = true;
    if (this_present_timeLapse || that_present_timeLapse) {
      if (!(this_present_timeLapse && that_present_timeLapse))
        return false;
      if (this.timeLapse != that.timeLapse)
        return false;
    }

    boolean this_present_bearing = true && this.isSetBearing();
    boolean that_present_bearing = true && that.isSetBearing();
    if (this_present_bearing || that_present_bearing) {
      if (!(this_present_bearing && that_present_bearing))
        return false;
      if (!this.bearing.equals(that.bearing))
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_taskStatus = true && this.isSetTaskStatus();
    boolean that_present_taskStatus = true && that.isSetTaskStatus();
    if (this_present_taskStatus || that_present_taskStatus) {
      if (!(this_present_taskStatus && that_present_taskStatus))
        return false;
      if (!this.taskStatus.equals(that.taskStatus))
        return false;
    }

    boolean this_present_assignedVehicleId = true;
    boolean that_present_assignedVehicleId = true;
    if (this_present_assignedVehicleId || that_present_assignedVehicleId) {
      if (!(this_present_assignedVehicleId && that_present_assignedVehicleId))
        return false;
      if (this.assignedVehicleId != that.assignedVehicleId)
        return false;
    }

    boolean this_present_parentTaskId = true;
    boolean that_present_parentTaskId = true;
    if (this_present_parentTaskId || that_present_parentTaskId) {
      if (!(this_present_parentTaskId && that_present_parentTaskId))
        return false;
      if (this.parentTaskId != that.parentTaskId)
        return false;
    }

    boolean this_present_partfields = true && this.isSetPartfields();
    boolean that_present_partfields = true && that.isSetPartfields();
    if (this_present_partfields || that_present_partfields) {
      if (!(this_present_partfields && that_present_partfields))
        return false;
      if (!this.partfields.equals(that.partfields))
        return false;
    }

    boolean this_present_treatmentGrids = true && this.isSetTreatmentGrids();
    boolean that_present_treatmentGrids = true && that.isSetTreatmentGrids();
    if (this_present_treatmentGrids || that_present_treatmentGrids) {
      if (!(this_present_treatmentGrids && that_present_treatmentGrids))
        return false;
      if (!this.treatmentGrids.equals(that.treatmentGrids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_taskTemplate = true && (isSetTaskTemplate());
    list.add(present_taskTemplate);
    if (present_taskTemplate)
      list.add(taskTemplate);

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_missionId = true;
    list.add(present_missionId);
    if (present_missionId)
      list.add(missionId);

    boolean present_area = true && (isSetArea());
    list.add(present_area);
    if (present_area)
      list.add(area);

    boolean present_speed = true;
    list.add(present_speed);
    if (present_speed)
      list.add(speed);

    boolean present_altitude = true;
    list.add(present_altitude);
    if (present_altitude)
      list.add(altitude);

    boolean present_range = true;
    list.add(present_range);
    if (present_range)
      list.add(range);

    boolean present_timeLapse = true;
    list.add(present_timeLapse);
    if (present_timeLapse)
      list.add(timeLapse);

    boolean present_bearing = true && (isSetBearing());
    list.add(present_bearing);
    if (present_bearing)
      list.add(bearing);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true;
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_taskStatus = true && (isSetTaskStatus());
    list.add(present_taskStatus);
    if (present_taskStatus)
      list.add(taskStatus.getValue());

    boolean present_assignedVehicleId = true;
    list.add(present_assignedVehicleId);
    if (present_assignedVehicleId)
      list.add(assignedVehicleId);

    boolean present_parentTaskId = true;
    list.add(present_parentTaskId);
    if (present_parentTaskId)
      list.add(parentTaskId);

    boolean present_partfields = true && (isSetPartfields());
    list.add(present_partfields);
    if (present_partfields)
      list.add(partfields);

    boolean present_treatmentGrids = true && (isSetTreatmentGrids());
    list.add(present_treatmentGrids);
    if (present_treatmentGrids)
      list.add(treatmentGrids);

    return list.hashCode();
  }

  @Override
  public int compareTo(Task other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskTemplate()).compareTo(other.isSetTaskTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskTemplate, other.taskTemplate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArea()).compareTo(other.isSetArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, other.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpeed()).compareTo(other.isSetSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speed, other.speed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAltitude()).compareTo(other.isSetAltitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAltitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.altitude, other.altitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRange()).compareTo(other.isSetRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, other.range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeLapse()).compareTo(other.isSetTimeLapse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeLapse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeLapse, other.timeLapse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBearing()).compareTo(other.isSetBearing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBearing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bearing, other.bearing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskStatus()).compareTo(other.isSetTaskStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskStatus, other.taskStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssignedVehicleId()).compareTo(other.isSetAssignedVehicleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssignedVehicleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignedVehicleId, other.assignedVehicleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentTaskId()).compareTo(other.isSetParentTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentTaskId, other.parentTaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartfields()).compareTo(other.isSetPartfields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartfields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partfields, other.partfields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreatmentGrids()).compareTo(other.isSetTreatmentGrids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreatmentGrids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treatmentGrids, other.treatmentGrids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Task(");
    boolean first = true;

    sb.append("taskTemplate:");
    if (this.taskTemplate == null) {
      sb.append("null");
    } else {
      sb.append(this.taskTemplate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("missionId:");
    sb.append(this.missionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("area:");
    if (this.area == null) {
      sb.append("null");
    } else {
      sb.append(this.area);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("speed:");
    sb.append(this.speed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("altitude:");
    sb.append(this.altitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("range:");
    sb.append(this.range);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeLapse:");
    sb.append(this.timeLapse);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bearing:");
    if (this.bearing == null) {
      sb.append("null");
    } else {
      sb.append(this.bearing);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskStatus:");
    if (this.taskStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.taskStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assignedVehicleId:");
    sb.append(this.assignedVehicleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentTaskId:");
    sb.append(this.parentTaskId);
    first = false;
    if (isSetPartfields()) {
      if (!first) sb.append(", ");
      sb.append("partfields:");
      if (this.partfields == null) {
        sb.append("null");
      } else {
        sb.append(this.partfields);
      }
      first = false;
    }
    if (isSetTreatmentGrids()) {
      if (!first) sb.append(", ");
      sb.append("treatmentGrids:");
      if (this.treatmentGrids == null) {
        sb.append("null");
      } else {
        sb.append(this.treatmentGrids);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (taskTemplate != null) {
      taskTemplate.validate();
    }
    if (area != null) {
      area.validate();
    }
    if (bearing != null) {
      bearing.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskStandardSchemeFactory implements SchemeFactory {
    public TaskStandardScheme getScheme() {
      return new TaskStandardScheme();
    }
  }

  private static class TaskStandardScheme extends StandardScheme<Task> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Task struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.taskTemplate = new TaskTemplate();
              struct.taskTemplate.read(iprot);
              struct.setTaskTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MISSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.missionId = iprot.readI32();
              struct.setMissionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.area = new Region();
              struct.area.read(iprot);
              struct.setAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.speed = iprot.readDouble();
              struct.setSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALTITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.altitude = iprot.readDouble();
              struct.setAltitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.range = iprot.readDouble();
              struct.setRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TIME_LAPSE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeLapse = iprot.readI32();
              struct.setTimeLapseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BEARING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bearing = new Orientation();
              struct.bearing.read(iprot);
              struct.setBearingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TASK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskStatus = com.afarcloud.thrift.TaskCommandStatus.findByValue(iprot.readI32());
              struct.setTaskStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ASSIGNED_VEHICLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.assignedVehicleId = iprot.readI32();
              struct.setAssignedVehicleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PARENT_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentTaskId = iprot.readI32();
              struct.setParentTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PARTFIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.partfields = new ArrayList<PartField>(_list32.size);
                PartField _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new PartField();
                  _elem33.read(iprot);
                  struct.partfields.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setPartfieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TREATMENT_GRIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.treatmentGrids = new ArrayList<TreatmentGrid>(_list35.size);
                TreatmentGrid _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new TreatmentGrid();
                  _elem36.read(iprot);
                  struct.treatmentGrids.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setTreatmentGridsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Task struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskTemplate != null) {
        oprot.writeFieldBegin(TASK_TEMPLATE_FIELD_DESC);
        struct.taskTemplate.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
      oprot.writeI32(struct.missionId);
      oprot.writeFieldEnd();
      if (struct.area != null) {
        oprot.writeFieldBegin(AREA_FIELD_DESC);
        struct.area.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPEED_FIELD_DESC);
      oprot.writeDouble(struct.speed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALTITUDE_FIELD_DESC);
      oprot.writeDouble(struct.altitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RANGE_FIELD_DESC);
      oprot.writeDouble(struct.range);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_LAPSE_FIELD_DESC);
      oprot.writeI32(struct.timeLapse);
      oprot.writeFieldEnd();
      if (struct.bearing != null) {
        oprot.writeFieldBegin(BEARING_FIELD_DESC);
        struct.bearing.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      if (struct.taskStatus != null) {
        oprot.writeFieldBegin(TASK_STATUS_FIELD_DESC);
        oprot.writeI32(struct.taskStatus.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ASSIGNED_VEHICLE_ID_FIELD_DESC);
      oprot.writeI32(struct.assignedVehicleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_TASK_ID_FIELD_DESC);
      oprot.writeI32(struct.parentTaskId);
      oprot.writeFieldEnd();
      if (struct.partfields != null) {
        if (struct.isSetPartfields()) {
          oprot.writeFieldBegin(PARTFIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partfields.size()));
            for (PartField _iter38 : struct.partfields)
            {
              _iter38.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.treatmentGrids != null) {
        if (struct.isSetTreatmentGrids()) {
          oprot.writeFieldBegin(TREATMENT_GRIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.treatmentGrids.size()));
            for (TreatmentGrid _iter39 : struct.treatmentGrids)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskTupleSchemeFactory implements SchemeFactory {
    public TaskTupleScheme getScheme() {
      return new TaskTupleScheme();
    }
  }

  private static class TaskTupleScheme extends TupleScheme<Task> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Task struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskTemplate()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetMissionId()) {
        optionals.set(2);
      }
      if (struct.isSetArea()) {
        optionals.set(3);
      }
      if (struct.isSetSpeed()) {
        optionals.set(4);
      }
      if (struct.isSetAltitude()) {
        optionals.set(5);
      }
      if (struct.isSetRange()) {
        optionals.set(6);
      }
      if (struct.isSetTimeLapse()) {
        optionals.set(7);
      }
      if (struct.isSetBearing()) {
        optionals.set(8);
      }
      if (struct.isSetStartTime()) {
        optionals.set(9);
      }
      if (struct.isSetEndTime()) {
        optionals.set(10);
      }
      if (struct.isSetTaskStatus()) {
        optionals.set(11);
      }
      if (struct.isSetAssignedVehicleId()) {
        optionals.set(12);
      }
      if (struct.isSetParentTaskId()) {
        optionals.set(13);
      }
      if (struct.isSetPartfields()) {
        optionals.set(14);
      }
      if (struct.isSetTreatmentGrids()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetTaskTemplate()) {
        struct.taskTemplate.write(oprot);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetMissionId()) {
        oprot.writeI32(struct.missionId);
      }
      if (struct.isSetArea()) {
        struct.area.write(oprot);
      }
      if (struct.isSetSpeed()) {
        oprot.writeDouble(struct.speed);
      }
      if (struct.isSetAltitude()) {
        oprot.writeDouble(struct.altitude);
      }
      if (struct.isSetRange()) {
        oprot.writeDouble(struct.range);
      }
      if (struct.isSetTimeLapse()) {
        oprot.writeI32(struct.timeLapse);
      }
      if (struct.isSetBearing()) {
        struct.bearing.write(oprot);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetTaskStatus()) {
        oprot.writeI32(struct.taskStatus.getValue());
      }
      if (struct.isSetAssignedVehicleId()) {
        oprot.writeI32(struct.assignedVehicleId);
      }
      if (struct.isSetParentTaskId()) {
        oprot.writeI32(struct.parentTaskId);
      }
      if (struct.isSetPartfields()) {
        {
          oprot.writeI32(struct.partfields.size());
          for (PartField _iter40 : struct.partfields)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetTreatmentGrids()) {
        {
          oprot.writeI32(struct.treatmentGrids.size());
          for (TreatmentGrid _iter41 : struct.treatmentGrids)
          {
            _iter41.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Task struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.taskTemplate = new TaskTemplate();
        struct.taskTemplate.read(iprot);
        struct.setTaskTemplateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.missionId = iprot.readI32();
        struct.setMissionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.area = new Region();
        struct.area.read(iprot);
        struct.setAreaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.speed = iprot.readDouble();
        struct.setSpeedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.altitude = iprot.readDouble();
        struct.setAltitudeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.range = iprot.readDouble();
        struct.setRangeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.timeLapse = iprot.readI32();
        struct.setTimeLapseIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bearing = new Orientation();
        struct.bearing.read(iprot);
        struct.setBearingIsSet(true);
      }
      if (incoming.get(9)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.taskStatus = com.afarcloud.thrift.TaskCommandStatus.findByValue(iprot.readI32());
        struct.setTaskStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.assignedVehicleId = iprot.readI32();
        struct.setAssignedVehicleIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.parentTaskId = iprot.readI32();
        struct.setParentTaskIdIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partfields = new ArrayList<PartField>(_list42.size);
          PartField _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = new PartField();
            _elem43.read(iprot);
            struct.partfields.add(_elem43);
          }
        }
        struct.setPartfieldsIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.treatmentGrids = new ArrayList<TreatmentGrid>(_list45.size);
          TreatmentGrid _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new TreatmentGrid();
            _elem46.read(iprot);
            struct.treatmentGrids.add(_elem46);
          }
        }
        struct.setTreatmentGridsIsSet(true);
      }
    }
  }

}

