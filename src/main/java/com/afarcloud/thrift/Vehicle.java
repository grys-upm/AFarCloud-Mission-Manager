/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.afarcloud.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2020-9-11")
public class Vehicle implements org.apache.thrift.TBase<Vehicle, Vehicle._Fields>, java.io.Serializable, Cloneable, Comparable<Vehicle> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Vehicle");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("maxSpeed", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_RUNNING_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxRunningTime", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField EQUIPMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("equipments", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CAPABILITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("capabilities", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField STATE_VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("stateVector", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField SAFETY_DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("safetyDistance", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VehicleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VehicleTupleSchemeFactory());
  }

  public int id; // required
  public String name; // required
  /**
   * 
   * @see VehicleType
   */
  public VehicleType type; // required
  public double maxSpeed; // required
  public int maxRunningTime; // required
  public List<Equipment> equipments; // required
  public List<TaskType> capabilities; // required
  public StateVector stateVector; // required
  public double safetyDistance; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    /**
     * 
     * @see VehicleType
     */
    TYPE((short)3, "type"),
    MAX_SPEED((short)4, "maxSpeed"),
    MAX_RUNNING_TIME((short)5, "maxRunningTime"),
    EQUIPMENTS((short)6, "equipments"),
    CAPABILITIES((short)7, "capabilities"),
    STATE_VECTOR((short)8, "stateVector"),
    SAFETY_DISTANCE((short)9, "safetyDistance");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // TYPE
          return TYPE;
        case 4: // MAX_SPEED
          return MAX_SPEED;
        case 5: // MAX_RUNNING_TIME
          return MAX_RUNNING_TIME;
        case 6: // EQUIPMENTS
          return EQUIPMENTS;
        case 7: // CAPABILITIES
          return CAPABILITIES;
        case 8: // STATE_VECTOR
          return STATE_VECTOR;
        case 9: // SAFETY_DISTANCE
          return SAFETY_DISTANCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MAXSPEED_ISSET_ID = 1;
  private static final int __MAXRUNNINGTIME_ISSET_ID = 2;
  private static final int __SAFETYDISTANCE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, VehicleType.class)));
    tmpMap.put(_Fields.MAX_SPEED, new org.apache.thrift.meta_data.FieldMetaData("maxSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_RUNNING_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxRunningTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EQUIPMENTS, new org.apache.thrift.meta_data.FieldMetaData("equipments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Equipment.class))));
    tmpMap.put(_Fields.CAPABILITIES, new org.apache.thrift.meta_data.FieldMetaData("capabilities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TaskType.class))));
    tmpMap.put(_Fields.STATE_VECTOR, new org.apache.thrift.meta_data.FieldMetaData("stateVector", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StateVector.class)));
    tmpMap.put(_Fields.SAFETY_DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("safetyDistance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Vehicle.class, metaDataMap);
  }

  public Vehicle() {
  }

  public Vehicle(
    int id,
    String name,
    VehicleType type,
    double maxSpeed,
    int maxRunningTime,
    List<Equipment> equipments,
    List<TaskType> capabilities,
    StateVector stateVector,
    double safetyDistance)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.type = type;
    this.maxSpeed = maxSpeed;
    setMaxSpeedIsSet(true);
    this.maxRunningTime = maxRunningTime;
    setMaxRunningTimeIsSet(true);
    this.equipments = equipments;
    this.capabilities = capabilities;
    this.stateVector = stateVector;
    this.safetyDistance = safetyDistance;
    setSafetyDistanceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Vehicle(Vehicle other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.maxSpeed = other.maxSpeed;
    this.maxRunningTime = other.maxRunningTime;
    if (other.isSetEquipments()) {
      List<Equipment> __this__equipments = new ArrayList<Equipment>(other.equipments.size());
      for (Equipment other_element : other.equipments) {
        __this__equipments.add(new Equipment(other_element));
      }
      this.equipments = __this__equipments;
    }
    if (other.isSetCapabilities()) {
      List<TaskType> __this__capabilities = new ArrayList<TaskType>(other.capabilities.size());
      for (TaskType other_element : other.capabilities) {
        __this__capabilities.add(other_element);
      }
      this.capabilities = __this__capabilities;
    }
    if (other.isSetStateVector()) {
      this.stateVector = new StateVector(other.stateVector);
    }
    this.safetyDistance = other.safetyDistance;
  }

  public Vehicle deepCopy() {
    return new Vehicle(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.type = null;
    setMaxSpeedIsSet(false);
    this.maxSpeed = 0.0;
    setMaxRunningTimeIsSet(false);
    this.maxRunningTime = 0;
    this.equipments = null;
    this.capabilities = null;
    this.stateVector = null;
    setSafetyDistanceIsSet(false);
    this.safetyDistance = 0.0;
  }

  public int getId() {
    return this.id;
  }

  public Vehicle setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public Vehicle setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see VehicleType
   */
  public VehicleType getType() {
    return this.type;
  }

  /**
   * 
   * @see VehicleType
   */
  public Vehicle setType(VehicleType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public double getMaxSpeed() {
    return this.maxSpeed;
  }

  public Vehicle setMaxSpeed(double maxSpeed) {
    this.maxSpeed = maxSpeed;
    setMaxSpeedIsSet(true);
    return this;
  }

  public void unsetMaxSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXSPEED_ISSET_ID);
  }

  /** Returns true if field maxSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXSPEED_ISSET_ID);
  }

  public void setMaxSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXSPEED_ISSET_ID, value);
  }

  public int getMaxRunningTime() {
    return this.maxRunningTime;
  }

  public Vehicle setMaxRunningTime(int maxRunningTime) {
    this.maxRunningTime = maxRunningTime;
    setMaxRunningTimeIsSet(true);
    return this;
  }

  public void unsetMaxRunningTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXRUNNINGTIME_ISSET_ID);
  }

  /** Returns true if field maxRunningTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxRunningTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXRUNNINGTIME_ISSET_ID);
  }

  public void setMaxRunningTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXRUNNINGTIME_ISSET_ID, value);
  }

  public int getEquipmentsSize() {
    return (this.equipments == null) ? 0 : this.equipments.size();
  }

  public java.util.Iterator<Equipment> getEquipmentsIterator() {
    return (this.equipments == null) ? null : this.equipments.iterator();
  }

  public void addToEquipments(Equipment elem) {
    if (this.equipments == null) {
      this.equipments = new ArrayList<Equipment>();
    }
    this.equipments.add(elem);
  }

  public List<Equipment> getEquipments() {
    return this.equipments;
  }

  public Vehicle setEquipments(List<Equipment> equipments) {
    this.equipments = equipments;
    return this;
  }

  public void unsetEquipments() {
    this.equipments = null;
  }

  /** Returns true if field equipments is set (has been assigned a value) and false otherwise */
  public boolean isSetEquipments() {
    return this.equipments != null;
  }

  public void setEquipmentsIsSet(boolean value) {
    if (!value) {
      this.equipments = null;
    }
  }

  public int getCapabilitiesSize() {
    return (this.capabilities == null) ? 0 : this.capabilities.size();
  }

  public java.util.Iterator<TaskType> getCapabilitiesIterator() {
    return (this.capabilities == null) ? null : this.capabilities.iterator();
  }

  public void addToCapabilities(TaskType elem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<TaskType>();
    }
    this.capabilities.add(elem);
  }

  public List<TaskType> getCapabilities() {
    return this.capabilities;
  }

  public Vehicle setCapabilities(List<TaskType> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public void unsetCapabilities() {
    this.capabilities = null;
  }

  /** Returns true if field capabilities is set (has been assigned a value) and false otherwise */
  public boolean isSetCapabilities() {
    return this.capabilities != null;
  }

  public void setCapabilitiesIsSet(boolean value) {
    if (!value) {
      this.capabilities = null;
    }
  }

  public StateVector getStateVector() {
    return this.stateVector;
  }

  public Vehicle setStateVector(StateVector stateVector) {
    this.stateVector = stateVector;
    return this;
  }

  public void unsetStateVector() {
    this.stateVector = null;
  }

  /** Returns true if field stateVector is set (has been assigned a value) and false otherwise */
  public boolean isSetStateVector() {
    return this.stateVector != null;
  }

  public void setStateVectorIsSet(boolean value) {
    if (!value) {
      this.stateVector = null;
    }
  }

  public double getSafetyDistance() {
    return this.safetyDistance;
  }

  public Vehicle setSafetyDistance(double safetyDistance) {
    this.safetyDistance = safetyDistance;
    setSafetyDistanceIsSet(true);
    return this;
  }

  public void unsetSafetyDistance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SAFETYDISTANCE_ISSET_ID);
  }

  /** Returns true if field safetyDistance is set (has been assigned a value) and false otherwise */
  public boolean isSetSafetyDistance() {
    return EncodingUtils.testBit(__isset_bitfield, __SAFETYDISTANCE_ISSET_ID);
  }

  public void setSafetyDistanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SAFETYDISTANCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((VehicleType)value);
      }
      break;

    case MAX_SPEED:
      if (value == null) {
        unsetMaxSpeed();
      } else {
        setMaxSpeed((Double)value);
      }
      break;

    case MAX_RUNNING_TIME:
      if (value == null) {
        unsetMaxRunningTime();
      } else {
        setMaxRunningTime((Integer)value);
      }
      break;

    case EQUIPMENTS:
      if (value == null) {
        unsetEquipments();
      } else {
        setEquipments((List<Equipment>)value);
      }
      break;

    case CAPABILITIES:
      if (value == null) {
        unsetCapabilities();
      } else {
        setCapabilities((List<TaskType>)value);
      }
      break;

    case STATE_VECTOR:
      if (value == null) {
        unsetStateVector();
      } else {
        setStateVector((StateVector)value);
      }
      break;

    case SAFETY_DISTANCE:
      if (value == null) {
        unsetSafetyDistance();
      } else {
        setSafetyDistance((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case TYPE:
      return getType();

    case MAX_SPEED:
      return Double.valueOf(getMaxSpeed());

    case MAX_RUNNING_TIME:
      return Integer.valueOf(getMaxRunningTime());

    case EQUIPMENTS:
      return getEquipments();

    case CAPABILITIES:
      return getCapabilities();

    case STATE_VECTOR:
      return getStateVector();

    case SAFETY_DISTANCE:
      return Double.valueOf(getSafetyDistance());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case MAX_SPEED:
      return isSetMaxSpeed();
    case MAX_RUNNING_TIME:
      return isSetMaxRunningTime();
    case EQUIPMENTS:
      return isSetEquipments();
    case CAPABILITIES:
      return isSetCapabilities();
    case STATE_VECTOR:
      return isSetStateVector();
    case SAFETY_DISTANCE:
      return isSetSafetyDistance();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Vehicle)
      return this.equals((Vehicle)that);
    return false;
  }

  public boolean equals(Vehicle that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_maxSpeed = true;
    boolean that_present_maxSpeed = true;
    if (this_present_maxSpeed || that_present_maxSpeed) {
      if (!(this_present_maxSpeed && that_present_maxSpeed))
        return false;
      if (this.maxSpeed != that.maxSpeed)
        return false;
    }

    boolean this_present_maxRunningTime = true;
    boolean that_present_maxRunningTime = true;
    if (this_present_maxRunningTime || that_present_maxRunningTime) {
      if (!(this_present_maxRunningTime && that_present_maxRunningTime))
        return false;
      if (this.maxRunningTime != that.maxRunningTime)
        return false;
    }

    boolean this_present_equipments = true && this.isSetEquipments();
    boolean that_present_equipments = true && that.isSetEquipments();
    if (this_present_equipments || that_present_equipments) {
      if (!(this_present_equipments && that_present_equipments))
        return false;
      if (!this.equipments.equals(that.equipments))
        return false;
    }

    boolean this_present_capabilities = true && this.isSetCapabilities();
    boolean that_present_capabilities = true && that.isSetCapabilities();
    if (this_present_capabilities || that_present_capabilities) {
      if (!(this_present_capabilities && that_present_capabilities))
        return false;
      if (!this.capabilities.equals(that.capabilities))
        return false;
    }

    boolean this_present_stateVector = true && this.isSetStateVector();
    boolean that_present_stateVector = true && that.isSetStateVector();
    if (this_present_stateVector || that_present_stateVector) {
      if (!(this_present_stateVector && that_present_stateVector))
        return false;
      if (!this.stateVector.equals(that.stateVector))
        return false;
    }

    boolean this_present_safetyDistance = true;
    boolean that_present_safetyDistance = true;
    if (this_present_safetyDistance || that_present_safetyDistance) {
      if (!(this_present_safetyDistance && that_present_safetyDistance))
        return false;
      if (this.safetyDistance != that.safetyDistance)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_maxSpeed = true;
    list.add(present_maxSpeed);
    if (present_maxSpeed)
      list.add(maxSpeed);

    boolean present_maxRunningTime = true;
    list.add(present_maxRunningTime);
    if (present_maxRunningTime)
      list.add(maxRunningTime);

    boolean present_equipments = true && (isSetEquipments());
    list.add(present_equipments);
    if (present_equipments)
      list.add(equipments);

    boolean present_capabilities = true && (isSetCapabilities());
    list.add(present_capabilities);
    if (present_capabilities)
      list.add(capabilities);

    boolean present_stateVector = true && (isSetStateVector());
    list.add(present_stateVector);
    if (present_stateVector)
      list.add(stateVector);

    boolean present_safetyDistance = true;
    list.add(present_safetyDistance);
    if (present_safetyDistance)
      list.add(safetyDistance);

    return list.hashCode();
  }

  @Override
  public int compareTo(Vehicle other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxSpeed()).compareTo(other.isSetMaxSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxSpeed, other.maxSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxRunningTime()).compareTo(other.isSetMaxRunningTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxRunningTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxRunningTime, other.maxRunningTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEquipments()).compareTo(other.isSetEquipments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEquipments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.equipments, other.equipments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCapabilities()).compareTo(other.isSetCapabilities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapabilities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capabilities, other.capabilities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStateVector()).compareTo(other.isSetStateVector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStateVector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateVector, other.stateVector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSafetyDistance()).compareTo(other.isSetSafetyDistance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSafetyDistance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.safetyDistance, other.safetyDistance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Vehicle(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxSpeed:");
    sb.append(this.maxSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxRunningTime:");
    sb.append(this.maxRunningTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("equipments:");
    if (this.equipments == null) {
      sb.append("null");
    } else {
      sb.append(this.equipments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("capabilities:");
    if (this.capabilities == null) {
      sb.append("null");
    } else {
      sb.append(this.capabilities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stateVector:");
    if (this.stateVector == null) {
      sb.append("null");
    } else {
      sb.append(this.stateVector);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("safetyDistance:");
    sb.append(this.safetyDistance);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (stateVector != null) {
      stateVector.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VehicleStandardSchemeFactory implements SchemeFactory {
    public VehicleStandardScheme getScheme() {
      return new VehicleStandardScheme();
    }
  }

  private static class VehicleStandardScheme extends StandardScheme<Vehicle> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Vehicle struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.afarcloud.thrift.VehicleType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maxSpeed = iprot.readDouble();
              struct.setMaxSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_RUNNING_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxRunningTime = iprot.readI32();
              struct.setMaxRunningTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EQUIPMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.equipments = new ArrayList<Equipment>(_list8.size);
                Equipment _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new Equipment();
                  _elem9.read(iprot);
                  struct.equipments.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setEquipmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CAPABILITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.capabilities = new ArrayList<TaskType>(_list11.size);
                TaskType _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = com.afarcloud.thrift.TaskType.findByValue(iprot.readI32());
                  struct.capabilities.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setCapabilitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATE_VECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stateVector = new StateVector();
              struct.stateVector.read(iprot);
              struct.setStateVectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SAFETY_DISTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.safetyDistance = iprot.readDouble();
              struct.setSafetyDistanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Vehicle struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_SPEED_FIELD_DESC);
      oprot.writeDouble(struct.maxSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_RUNNING_TIME_FIELD_DESC);
      oprot.writeI32(struct.maxRunningTime);
      oprot.writeFieldEnd();
      if (struct.equipments != null) {
        oprot.writeFieldBegin(EQUIPMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.equipments.size()));
          for (Equipment _iter14 : struct.equipments)
          {
            _iter14.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.capabilities != null) {
        oprot.writeFieldBegin(CAPABILITIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.capabilities.size()));
          for (TaskType _iter15 : struct.capabilities)
          {
            oprot.writeI32(_iter15.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stateVector != null) {
        oprot.writeFieldBegin(STATE_VECTOR_FIELD_DESC);
        struct.stateVector.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SAFETY_DISTANCE_FIELD_DESC);
      oprot.writeDouble(struct.safetyDistance);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VehicleTupleSchemeFactory implements SchemeFactory {
    public VehicleTupleScheme getScheme() {
      return new VehicleTupleScheme();
    }
  }

  private static class VehicleTupleScheme extends TupleScheme<Vehicle> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Vehicle struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetMaxSpeed()) {
        optionals.set(3);
      }
      if (struct.isSetMaxRunningTime()) {
        optionals.set(4);
      }
      if (struct.isSetEquipments()) {
        optionals.set(5);
      }
      if (struct.isSetCapabilities()) {
        optionals.set(6);
      }
      if (struct.isSetStateVector()) {
        optionals.set(7);
      }
      if (struct.isSetSafetyDistance()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetMaxSpeed()) {
        oprot.writeDouble(struct.maxSpeed);
      }
      if (struct.isSetMaxRunningTime()) {
        oprot.writeI32(struct.maxRunningTime);
      }
      if (struct.isSetEquipments()) {
        {
          oprot.writeI32(struct.equipments.size());
          for (Equipment _iter16 : struct.equipments)
          {
            _iter16.write(oprot);
          }
        }
      }
      if (struct.isSetCapabilities()) {
        {
          oprot.writeI32(struct.capabilities.size());
          for (TaskType _iter17 : struct.capabilities)
          {
            oprot.writeI32(_iter17.getValue());
          }
        }
      }
      if (struct.isSetStateVector()) {
        struct.stateVector.write(oprot);
      }
      if (struct.isSetSafetyDistance()) {
        oprot.writeDouble(struct.safetyDistance);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Vehicle struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = com.afarcloud.thrift.VehicleType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.maxSpeed = iprot.readDouble();
        struct.setMaxSpeedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.maxRunningTime = iprot.readI32();
        struct.setMaxRunningTimeIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.equipments = new ArrayList<Equipment>(_list18.size);
          Equipment _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new Equipment();
            _elem19.read(iprot);
            struct.equipments.add(_elem19);
          }
        }
        struct.setEquipmentsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.capabilities = new ArrayList<TaskType>(_list21.size);
          TaskType _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = com.afarcloud.thrift.TaskType.findByValue(iprot.readI32());
            struct.capabilities.add(_elem22);
          }
        }
        struct.setCapabilitiesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.stateVector = new StateVector();
        struct.stateVector.read(iprot);
        struct.setStateVectorIsSet(true);
      }
      if (incoming.get(8)) {
        struct.safetyDistance = iprot.readDouble();
        struct.setSafetyDistanceIsSet(true);
      }
    }
  }

}

