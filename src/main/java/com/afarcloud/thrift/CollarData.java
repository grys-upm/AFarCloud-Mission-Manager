/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.afarcloud.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2020-9-11")
public class CollarData implements org.apache.thrift.TBase<CollarData, CollarData._Fields>, java.io.Serializable, Cloneable, Comparable<CollarData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollarData");

  private static final org.apache.thrift.protocol.TField COLLAR_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("collarUid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLLAR_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("collarPosition", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TEMPERATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("temperature", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField RESOURCE_ALARM_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceAlarm", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField LOCATION_ANOMALY_FIELD_DESC = new org.apache.thrift.protocol.TField("locationAnomaly", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField TEMPERATURE_ANOMALY_FIELD_DESC = new org.apache.thrift.protocol.TField("temperatureAnomaly", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField DISTANCE_ANOMALY_FIELD_DESC = new org.apache.thrift.protocol.TField("distanceAnomaly", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField POSITION_ANOMALY_FIELD_DESC = new org.apache.thrift.protocol.TField("positionAnomaly", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdate", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CollarDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CollarDataTupleSchemeFactory());
  }

  public String collarUid; // required
  public com.afarcloud.thrift.Position collarPosition; // required
  public double temperature; // required
  public boolean resourceAlarm; // required
  public boolean locationAnomaly; // required
  public boolean temperatureAnomaly; // required
  public boolean distanceAnomaly; // required
  public boolean positionAnomaly; // required
  public long lastUpdate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLLAR_UID((short)1, "collarUid"),
    COLLAR_POSITION((short)2, "collarPosition"),
    TEMPERATURE((short)3, "temperature"),
    RESOURCE_ALARM((short)4, "resourceAlarm"),
    LOCATION_ANOMALY((short)5, "locationAnomaly"),
    TEMPERATURE_ANOMALY((short)6, "temperatureAnomaly"),
    DISTANCE_ANOMALY((short)7, "distanceAnomaly"),
    POSITION_ANOMALY((short)8, "positionAnomaly"),
    LAST_UPDATE((short)9, "lastUpdate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLLAR_UID
          return COLLAR_UID;
        case 2: // COLLAR_POSITION
          return COLLAR_POSITION;
        case 3: // TEMPERATURE
          return TEMPERATURE;
        case 4: // RESOURCE_ALARM
          return RESOURCE_ALARM;
        case 5: // LOCATION_ANOMALY
          return LOCATION_ANOMALY;
        case 6: // TEMPERATURE_ANOMALY
          return TEMPERATURE_ANOMALY;
        case 7: // DISTANCE_ANOMALY
          return DISTANCE_ANOMALY;
        case 8: // POSITION_ANOMALY
          return POSITION_ANOMALY;
        case 9: // LAST_UPDATE
          return LAST_UPDATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TEMPERATURE_ISSET_ID = 0;
  private static final int __RESOURCEALARM_ISSET_ID = 1;
  private static final int __LOCATIONANOMALY_ISSET_ID = 2;
  private static final int __TEMPERATUREANOMALY_ISSET_ID = 3;
  private static final int __DISTANCEANOMALY_ISSET_ID = 4;
  private static final int __POSITIONANOMALY_ISSET_ID = 5;
  private static final int __LASTUPDATE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLLAR_UID, new org.apache.thrift.meta_data.FieldMetaData("collarUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLAR_POSITION, new org.apache.thrift.meta_data.FieldMetaData("collarPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
    tmpMap.put(_Fields.TEMPERATURE, new org.apache.thrift.meta_data.FieldMetaData("temperature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESOURCE_ALARM, new org.apache.thrift.meta_data.FieldMetaData("resourceAlarm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOCATION_ANOMALY, new org.apache.thrift.meta_data.FieldMetaData("locationAnomaly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TEMPERATURE_ANOMALY, new org.apache.thrift.meta_data.FieldMetaData("temperatureAnomaly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISTANCE_ANOMALY, new org.apache.thrift.meta_data.FieldMetaData("distanceAnomaly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.POSITION_ANOMALY, new org.apache.thrift.meta_data.FieldMetaData("positionAnomaly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LAST_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("lastUpdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollarData.class, metaDataMap);
  }

  public CollarData() {
  }

  public CollarData(
    String collarUid,
    com.afarcloud.thrift.Position collarPosition,
    double temperature,
    boolean resourceAlarm,
    boolean locationAnomaly,
    boolean temperatureAnomaly,
    boolean distanceAnomaly,
    boolean positionAnomaly,
    long lastUpdate)
  {
    this();
    this.collarUid = collarUid;
    this.collarPosition = collarPosition;
    this.temperature = temperature;
    setTemperatureIsSet(true);
    this.resourceAlarm = resourceAlarm;
    setResourceAlarmIsSet(true);
    this.locationAnomaly = locationAnomaly;
    setLocationAnomalyIsSet(true);
    this.temperatureAnomaly = temperatureAnomaly;
    setTemperatureAnomalyIsSet(true);
    this.distanceAnomaly = distanceAnomaly;
    setDistanceAnomalyIsSet(true);
    this.positionAnomaly = positionAnomaly;
    setPositionAnomalyIsSet(true);
    this.lastUpdate = lastUpdate;
    setLastUpdateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollarData(CollarData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCollarUid()) {
      this.collarUid = other.collarUid;
    }
    if (other.isSetCollarPosition()) {
      this.collarPosition = new com.afarcloud.thrift.Position(other.collarPosition);
    }
    this.temperature = other.temperature;
    this.resourceAlarm = other.resourceAlarm;
    this.locationAnomaly = other.locationAnomaly;
    this.temperatureAnomaly = other.temperatureAnomaly;
    this.distanceAnomaly = other.distanceAnomaly;
    this.positionAnomaly = other.positionAnomaly;
    this.lastUpdate = other.lastUpdate;
  }

  public CollarData deepCopy() {
    return new CollarData(this);
  }

  @Override
  public void clear() {
    this.collarUid = null;
    this.collarPosition = null;
    setTemperatureIsSet(false);
    this.temperature = 0.0;
    setResourceAlarmIsSet(false);
    this.resourceAlarm = false;
    setLocationAnomalyIsSet(false);
    this.locationAnomaly = false;
    setTemperatureAnomalyIsSet(false);
    this.temperatureAnomaly = false;
    setDistanceAnomalyIsSet(false);
    this.distanceAnomaly = false;
    setPositionAnomalyIsSet(false);
    this.positionAnomaly = false;
    setLastUpdateIsSet(false);
    this.lastUpdate = 0;
  }

  public String getCollarUid() {
    return this.collarUid;
  }

  public CollarData setCollarUid(String collarUid) {
    this.collarUid = collarUid;
    return this;
  }

  public void unsetCollarUid() {
    this.collarUid = null;
  }

  /** Returns true if field collarUid is set (has been assigned a value) and false otherwise */
  public boolean isSetCollarUid() {
    return this.collarUid != null;
  }

  public void setCollarUidIsSet(boolean value) {
    if (!value) {
      this.collarUid = null;
    }
  }

  public com.afarcloud.thrift.Position getCollarPosition() {
    return this.collarPosition;
  }

  public CollarData setCollarPosition(com.afarcloud.thrift.Position collarPosition) {
    this.collarPosition = collarPosition;
    return this;
  }

  public void unsetCollarPosition() {
    this.collarPosition = null;
  }

  /** Returns true if field collarPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetCollarPosition() {
    return this.collarPosition != null;
  }

  public void setCollarPositionIsSet(boolean value) {
    if (!value) {
      this.collarPosition = null;
    }
  }

  public double getTemperature() {
    return this.temperature;
  }

  public CollarData setTemperature(double temperature) {
    this.temperature = temperature;
    setTemperatureIsSet(true);
    return this;
  }

  public void unsetTemperature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPERATURE_ISSET_ID);
  }

  /** Returns true if field temperature is set (has been assigned a value) and false otherwise */
  public boolean isSetTemperature() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPERATURE_ISSET_ID);
  }

  public void setTemperatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPERATURE_ISSET_ID, value);
  }

  public boolean isResourceAlarm() {
    return this.resourceAlarm;
  }

  public CollarData setResourceAlarm(boolean resourceAlarm) {
    this.resourceAlarm = resourceAlarm;
    setResourceAlarmIsSet(true);
    return this;
  }

  public void unsetResourceAlarm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCEALARM_ISSET_ID);
  }

  /** Returns true if field resourceAlarm is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceAlarm() {
    return EncodingUtils.testBit(__isset_bitfield, __RESOURCEALARM_ISSET_ID);
  }

  public void setResourceAlarmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCEALARM_ISSET_ID, value);
  }

  public boolean isLocationAnomaly() {
    return this.locationAnomaly;
  }

  public CollarData setLocationAnomaly(boolean locationAnomaly) {
    this.locationAnomaly = locationAnomaly;
    setLocationAnomalyIsSet(true);
    return this;
  }

  public void unsetLocationAnomaly() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCATIONANOMALY_ISSET_ID);
  }

  /** Returns true if field locationAnomaly is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationAnomaly() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCATIONANOMALY_ISSET_ID);
  }

  public void setLocationAnomalyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCATIONANOMALY_ISSET_ID, value);
  }

  public boolean isTemperatureAnomaly() {
    return this.temperatureAnomaly;
  }

  public CollarData setTemperatureAnomaly(boolean temperatureAnomaly) {
    this.temperatureAnomaly = temperatureAnomaly;
    setTemperatureAnomalyIsSet(true);
    return this;
  }

  public void unsetTemperatureAnomaly() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPERATUREANOMALY_ISSET_ID);
  }

  /** Returns true if field temperatureAnomaly is set (has been assigned a value) and false otherwise */
  public boolean isSetTemperatureAnomaly() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPERATUREANOMALY_ISSET_ID);
  }

  public void setTemperatureAnomalyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPERATUREANOMALY_ISSET_ID, value);
  }

  public boolean isDistanceAnomaly() {
    return this.distanceAnomaly;
  }

  public CollarData setDistanceAnomaly(boolean distanceAnomaly) {
    this.distanceAnomaly = distanceAnomaly;
    setDistanceAnomalyIsSet(true);
    return this;
  }

  public void unsetDistanceAnomaly() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISTANCEANOMALY_ISSET_ID);
  }

  /** Returns true if field distanceAnomaly is set (has been assigned a value) and false otherwise */
  public boolean isSetDistanceAnomaly() {
    return EncodingUtils.testBit(__isset_bitfield, __DISTANCEANOMALY_ISSET_ID);
  }

  public void setDistanceAnomalyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISTANCEANOMALY_ISSET_ID, value);
  }

  public boolean isPositionAnomaly() {
    return this.positionAnomaly;
  }

  public CollarData setPositionAnomaly(boolean positionAnomaly) {
    this.positionAnomaly = positionAnomaly;
    setPositionAnomalyIsSet(true);
    return this;
  }

  public void unsetPositionAnomaly() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONANOMALY_ISSET_ID);
  }

  /** Returns true if field positionAnomaly is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionAnomaly() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONANOMALY_ISSET_ID);
  }

  public void setPositionAnomalyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONANOMALY_ISSET_ID, value);
  }

  public long getLastUpdate() {
    return this.lastUpdate;
  }

  public CollarData setLastUpdate(long lastUpdate) {
    this.lastUpdate = lastUpdate;
    setLastUpdateIsSet(true);
    return this;
  }

  public void unsetLastUpdate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTUPDATE_ISSET_ID);
  }

  /** Returns true if field lastUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdate() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTUPDATE_ISSET_ID);
  }

  public void setLastUpdateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTUPDATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLLAR_UID:
      if (value == null) {
        unsetCollarUid();
      } else {
        setCollarUid((String)value);
      }
      break;

    case COLLAR_POSITION:
      if (value == null) {
        unsetCollarPosition();
      } else {
        setCollarPosition((com.afarcloud.thrift.Position)value);
      }
      break;

    case TEMPERATURE:
      if (value == null) {
        unsetTemperature();
      } else {
        setTemperature((Double)value);
      }
      break;

    case RESOURCE_ALARM:
      if (value == null) {
        unsetResourceAlarm();
      } else {
        setResourceAlarm((Boolean)value);
      }
      break;

    case LOCATION_ANOMALY:
      if (value == null) {
        unsetLocationAnomaly();
      } else {
        setLocationAnomaly((Boolean)value);
      }
      break;

    case TEMPERATURE_ANOMALY:
      if (value == null) {
        unsetTemperatureAnomaly();
      } else {
        setTemperatureAnomaly((Boolean)value);
      }
      break;

    case DISTANCE_ANOMALY:
      if (value == null) {
        unsetDistanceAnomaly();
      } else {
        setDistanceAnomaly((Boolean)value);
      }
      break;

    case POSITION_ANOMALY:
      if (value == null) {
        unsetPositionAnomaly();
      } else {
        setPositionAnomaly((Boolean)value);
      }
      break;

    case LAST_UPDATE:
      if (value == null) {
        unsetLastUpdate();
      } else {
        setLastUpdate((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLLAR_UID:
      return getCollarUid();

    case COLLAR_POSITION:
      return getCollarPosition();

    case TEMPERATURE:
      return Double.valueOf(getTemperature());

    case RESOURCE_ALARM:
      return Boolean.valueOf(isResourceAlarm());

    case LOCATION_ANOMALY:
      return Boolean.valueOf(isLocationAnomaly());

    case TEMPERATURE_ANOMALY:
      return Boolean.valueOf(isTemperatureAnomaly());

    case DISTANCE_ANOMALY:
      return Boolean.valueOf(isDistanceAnomaly());

    case POSITION_ANOMALY:
      return Boolean.valueOf(isPositionAnomaly());

    case LAST_UPDATE:
      return Long.valueOf(getLastUpdate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLLAR_UID:
      return isSetCollarUid();
    case COLLAR_POSITION:
      return isSetCollarPosition();
    case TEMPERATURE:
      return isSetTemperature();
    case RESOURCE_ALARM:
      return isSetResourceAlarm();
    case LOCATION_ANOMALY:
      return isSetLocationAnomaly();
    case TEMPERATURE_ANOMALY:
      return isSetTemperatureAnomaly();
    case DISTANCE_ANOMALY:
      return isSetDistanceAnomaly();
    case POSITION_ANOMALY:
      return isSetPositionAnomaly();
    case LAST_UPDATE:
      return isSetLastUpdate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollarData)
      return this.equals((CollarData)that);
    return false;
  }

  public boolean equals(CollarData that) {
    if (that == null)
      return false;

    boolean this_present_collarUid = true && this.isSetCollarUid();
    boolean that_present_collarUid = true && that.isSetCollarUid();
    if (this_present_collarUid || that_present_collarUid) {
      if (!(this_present_collarUid && that_present_collarUid))
        return false;
      if (!this.collarUid.equals(that.collarUid))
        return false;
    }

    boolean this_present_collarPosition = true && this.isSetCollarPosition();
    boolean that_present_collarPosition = true && that.isSetCollarPosition();
    if (this_present_collarPosition || that_present_collarPosition) {
      if (!(this_present_collarPosition && that_present_collarPosition))
        return false;
      if (!this.collarPosition.equals(that.collarPosition))
        return false;
    }

    boolean this_present_temperature = true;
    boolean that_present_temperature = true;
    if (this_present_temperature || that_present_temperature) {
      if (!(this_present_temperature && that_present_temperature))
        return false;
      if (this.temperature != that.temperature)
        return false;
    }

    boolean this_present_resourceAlarm = true;
    boolean that_present_resourceAlarm = true;
    if (this_present_resourceAlarm || that_present_resourceAlarm) {
      if (!(this_present_resourceAlarm && that_present_resourceAlarm))
        return false;
      if (this.resourceAlarm != that.resourceAlarm)
        return false;
    }

    boolean this_present_locationAnomaly = true;
    boolean that_present_locationAnomaly = true;
    if (this_present_locationAnomaly || that_present_locationAnomaly) {
      if (!(this_present_locationAnomaly && that_present_locationAnomaly))
        return false;
      if (this.locationAnomaly != that.locationAnomaly)
        return false;
    }

    boolean this_present_temperatureAnomaly = true;
    boolean that_present_temperatureAnomaly = true;
    if (this_present_temperatureAnomaly || that_present_temperatureAnomaly) {
      if (!(this_present_temperatureAnomaly && that_present_temperatureAnomaly))
        return false;
      if (this.temperatureAnomaly != that.temperatureAnomaly)
        return false;
    }

    boolean this_present_distanceAnomaly = true;
    boolean that_present_distanceAnomaly = true;
    if (this_present_distanceAnomaly || that_present_distanceAnomaly) {
      if (!(this_present_distanceAnomaly && that_present_distanceAnomaly))
        return false;
      if (this.distanceAnomaly != that.distanceAnomaly)
        return false;
    }

    boolean this_present_positionAnomaly = true;
    boolean that_present_positionAnomaly = true;
    if (this_present_positionAnomaly || that_present_positionAnomaly) {
      if (!(this_present_positionAnomaly && that_present_positionAnomaly))
        return false;
      if (this.positionAnomaly != that.positionAnomaly)
        return false;
    }

    boolean this_present_lastUpdate = true;
    boolean that_present_lastUpdate = true;
    if (this_present_lastUpdate || that_present_lastUpdate) {
      if (!(this_present_lastUpdate && that_present_lastUpdate))
        return false;
      if (this.lastUpdate != that.lastUpdate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_collarUid = true && (isSetCollarUid());
    list.add(present_collarUid);
    if (present_collarUid)
      list.add(collarUid);

    boolean present_collarPosition = true && (isSetCollarPosition());
    list.add(present_collarPosition);
    if (present_collarPosition)
      list.add(collarPosition);

    boolean present_temperature = true;
    list.add(present_temperature);
    if (present_temperature)
      list.add(temperature);

    boolean present_resourceAlarm = true;
    list.add(present_resourceAlarm);
    if (present_resourceAlarm)
      list.add(resourceAlarm);

    boolean present_locationAnomaly = true;
    list.add(present_locationAnomaly);
    if (present_locationAnomaly)
      list.add(locationAnomaly);

    boolean present_temperatureAnomaly = true;
    list.add(present_temperatureAnomaly);
    if (present_temperatureAnomaly)
      list.add(temperatureAnomaly);

    boolean present_distanceAnomaly = true;
    list.add(present_distanceAnomaly);
    if (present_distanceAnomaly)
      list.add(distanceAnomaly);

    boolean present_positionAnomaly = true;
    list.add(present_positionAnomaly);
    if (present_positionAnomaly)
      list.add(positionAnomaly);

    boolean present_lastUpdate = true;
    list.add(present_lastUpdate);
    if (present_lastUpdate)
      list.add(lastUpdate);

    return list.hashCode();
  }

  @Override
  public int compareTo(CollarData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCollarUid()).compareTo(other.isSetCollarUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollarUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collarUid, other.collarUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollarPosition()).compareTo(other.isSetCollarPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollarPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collarPosition, other.collarPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemperature()).compareTo(other.isSetTemperature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemperature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temperature, other.temperature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceAlarm()).compareTo(other.isSetResourceAlarm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceAlarm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceAlarm, other.resourceAlarm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationAnomaly()).compareTo(other.isSetLocationAnomaly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationAnomaly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationAnomaly, other.locationAnomaly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemperatureAnomaly()).compareTo(other.isSetTemperatureAnomaly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemperatureAnomaly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temperatureAnomaly, other.temperatureAnomaly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistanceAnomaly()).compareTo(other.isSetDistanceAnomaly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistanceAnomaly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distanceAnomaly, other.distanceAnomaly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionAnomaly()).compareTo(other.isSetPositionAnomaly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionAnomaly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionAnomaly, other.positionAnomaly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdate()).compareTo(other.isSetLastUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdate, other.lastUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollarData(");
    boolean first = true;

    sb.append("collarUid:");
    if (this.collarUid == null) {
      sb.append("null");
    } else {
      sb.append(this.collarUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("collarPosition:");
    if (this.collarPosition == null) {
      sb.append("null");
    } else {
      sb.append(this.collarPosition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("temperature:");
    sb.append(this.temperature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceAlarm:");
    sb.append(this.resourceAlarm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationAnomaly:");
    sb.append(this.locationAnomaly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("temperatureAnomaly:");
    sb.append(this.temperatureAnomaly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("distanceAnomaly:");
    sb.append(this.distanceAnomaly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionAnomaly:");
    sb.append(this.positionAnomaly);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdate:");
    sb.append(this.lastUpdate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (collarPosition != null) {
      collarPosition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollarDataStandardSchemeFactory implements SchemeFactory {
    public CollarDataStandardScheme getScheme() {
      return new CollarDataStandardScheme();
    }
  }

  private static class CollarDataStandardScheme extends StandardScheme<CollarData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollarData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLLAR_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collarUid = iprot.readString();
              struct.setCollarUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLLAR_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.collarPosition = new com.afarcloud.thrift.Position();
              struct.collarPosition.read(iprot);
              struct.setCollarPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEMPERATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.temperature = iprot.readDouble();
              struct.setTemperatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESOURCE_ALARM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.resourceAlarm = iprot.readBool();
              struct.setResourceAlarmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCATION_ANOMALY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.locationAnomaly = iprot.readBool();
              struct.setLocationAnomalyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TEMPERATURE_ANOMALY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.temperatureAnomaly = iprot.readBool();
              struct.setTemperatureAnomalyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DISTANCE_ANOMALY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.distanceAnomaly = iprot.readBool();
              struct.setDistanceAnomalyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POSITION_ANOMALY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.positionAnomaly = iprot.readBool();
              struct.setPositionAnomalyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastUpdate = iprot.readI64();
              struct.setLastUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollarData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.collarUid != null) {
        oprot.writeFieldBegin(COLLAR_UID_FIELD_DESC);
        oprot.writeString(struct.collarUid);
        oprot.writeFieldEnd();
      }
      if (struct.collarPosition != null) {
        oprot.writeFieldBegin(COLLAR_POSITION_FIELD_DESC);
        struct.collarPosition.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TEMPERATURE_FIELD_DESC);
      oprot.writeDouble(struct.temperature);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESOURCE_ALARM_FIELD_DESC);
      oprot.writeBool(struct.resourceAlarm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCATION_ANOMALY_FIELD_DESC);
      oprot.writeBool(struct.locationAnomaly);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEMPERATURE_ANOMALY_FIELD_DESC);
      oprot.writeBool(struct.temperatureAnomaly);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISTANCE_ANOMALY_FIELD_DESC);
      oprot.writeBool(struct.distanceAnomaly);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_ANOMALY_FIELD_DESC);
      oprot.writeBool(struct.positionAnomaly);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_UPDATE_FIELD_DESC);
      oprot.writeI64(struct.lastUpdate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollarDataTupleSchemeFactory implements SchemeFactory {
    public CollarDataTupleScheme getScheme() {
      return new CollarDataTupleScheme();
    }
  }

  private static class CollarDataTupleScheme extends TupleScheme<CollarData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollarData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCollarUid()) {
        optionals.set(0);
      }
      if (struct.isSetCollarPosition()) {
        optionals.set(1);
      }
      if (struct.isSetTemperature()) {
        optionals.set(2);
      }
      if (struct.isSetResourceAlarm()) {
        optionals.set(3);
      }
      if (struct.isSetLocationAnomaly()) {
        optionals.set(4);
      }
      if (struct.isSetTemperatureAnomaly()) {
        optionals.set(5);
      }
      if (struct.isSetDistanceAnomaly()) {
        optionals.set(6);
      }
      if (struct.isSetPositionAnomaly()) {
        optionals.set(7);
      }
      if (struct.isSetLastUpdate()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetCollarUid()) {
        oprot.writeString(struct.collarUid);
      }
      if (struct.isSetCollarPosition()) {
        struct.collarPosition.write(oprot);
      }
      if (struct.isSetTemperature()) {
        oprot.writeDouble(struct.temperature);
      }
      if (struct.isSetResourceAlarm()) {
        oprot.writeBool(struct.resourceAlarm);
      }
      if (struct.isSetLocationAnomaly()) {
        oprot.writeBool(struct.locationAnomaly);
      }
      if (struct.isSetTemperatureAnomaly()) {
        oprot.writeBool(struct.temperatureAnomaly);
      }
      if (struct.isSetDistanceAnomaly()) {
        oprot.writeBool(struct.distanceAnomaly);
      }
      if (struct.isSetPositionAnomaly()) {
        oprot.writeBool(struct.positionAnomaly);
      }
      if (struct.isSetLastUpdate()) {
        oprot.writeI64(struct.lastUpdate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollarData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.collarUid = iprot.readString();
        struct.setCollarUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.collarPosition = new com.afarcloud.thrift.Position();
        struct.collarPosition.read(iprot);
        struct.setCollarPositionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.temperature = iprot.readDouble();
        struct.setTemperatureIsSet(true);
      }
      if (incoming.get(3)) {
        struct.resourceAlarm = iprot.readBool();
        struct.setResourceAlarmIsSet(true);
      }
      if (incoming.get(4)) {
        struct.locationAnomaly = iprot.readBool();
        struct.setLocationAnomalyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.temperatureAnomaly = iprot.readBool();
        struct.setTemperatureAnomalyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.distanceAnomaly = iprot.readBool();
        struct.setDistanceAnomalyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.positionAnomaly = iprot.readBool();
        struct.setPositionAnomalyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastUpdate = iprot.readI64();
        struct.setLastUpdateIsSet(true);
      }
    }
  }

}

