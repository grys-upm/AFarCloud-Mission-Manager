/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.afarcloud.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2020-9-11")
public class StateVector implements org.apache.thrift.TBase<StateVector, StateVector._Fields>, java.io.Serializable, Cloneable, Comparable<StateVector> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StateVector");

  private static final org.apache.thrift.protocol.TField VEHICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ORIENTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("orientation", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField GIMBAL_PITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("gimbalPitch", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField BATTERY_FIELD_DESC = new org.apache.thrift.protocol.TField("battery", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField LINEAR_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("linearSpeed", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdate", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StateVectorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StateVectorTupleSchemeFactory());
  }

  public int vehicleId; // required
  public Position position; // required
  public Orientation orientation; // required
  public double gimbalPitch; // optional
  public Battery battery; // optional
  public double linearSpeed; // required
  public long lastUpdate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VEHICLE_ID((short)1, "vehicleId"),
    POSITION((short)2, "position"),
    ORIENTATION((short)3, "orientation"),
    GIMBAL_PITCH((short)4, "gimbalPitch"),
    BATTERY((short)5, "battery"),
    LINEAR_SPEED((short)6, "linearSpeed"),
    LAST_UPDATE((short)7, "lastUpdate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VEHICLE_ID
          return VEHICLE_ID;
        case 2: // POSITION
          return POSITION;
        case 3: // ORIENTATION
          return ORIENTATION;
        case 4: // GIMBAL_PITCH
          return GIMBAL_PITCH;
        case 5: // BATTERY
          return BATTERY;
        case 6: // LINEAR_SPEED
          return LINEAR_SPEED;
        case 7: // LAST_UPDATE
          return LAST_UPDATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VEHICLEID_ISSET_ID = 0;
  private static final int __GIMBALPITCH_ISSET_ID = 1;
  private static final int __LINEARSPEED_ISSET_ID = 2;
  private static final int __LASTUPDATE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GIMBAL_PITCH,_Fields.BATTERY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VEHICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("vehicleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Position.class)));
    tmpMap.put(_Fields.ORIENTATION, new org.apache.thrift.meta_data.FieldMetaData("orientation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Orientation.class)));
    tmpMap.put(_Fields.GIMBAL_PITCH, new org.apache.thrift.meta_data.FieldMetaData("gimbalPitch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BATTERY, new org.apache.thrift.meta_data.FieldMetaData("battery", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Battery.class)));
    tmpMap.put(_Fields.LINEAR_SPEED, new org.apache.thrift.meta_data.FieldMetaData("linearSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAST_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("lastUpdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StateVector.class, metaDataMap);
  }

  public StateVector() {
  }

  public StateVector(
    int vehicleId,
    Position position,
    Orientation orientation,
    double linearSpeed,
    long lastUpdate)
  {
    this();
    this.vehicleId = vehicleId;
    setVehicleIdIsSet(true);
    this.position = position;
    this.orientation = orientation;
    this.linearSpeed = linearSpeed;
    setLinearSpeedIsSet(true);
    this.lastUpdate = lastUpdate;
    setLastUpdateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StateVector(StateVector other) {
    __isset_bitfield = other.__isset_bitfield;
    this.vehicleId = other.vehicleId;
    if (other.isSetPosition()) {
      this.position = new Position(other.position);
    }
    if (other.isSetOrientation()) {
      this.orientation = new Orientation(other.orientation);
    }
    this.gimbalPitch = other.gimbalPitch;
    if (other.isSetBattery()) {
      this.battery = new Battery(other.battery);
    }
    this.linearSpeed = other.linearSpeed;
    this.lastUpdate = other.lastUpdate;
  }

  public StateVector deepCopy() {
    return new StateVector(this);
  }

  @Override
  public void clear() {
    setVehicleIdIsSet(false);
    this.vehicleId = 0;
    this.position = null;
    this.orientation = null;
    setGimbalPitchIsSet(false);
    this.gimbalPitch = 0.0;
    this.battery = null;
    setLinearSpeedIsSet(false);
    this.linearSpeed = 0.0;
    setLastUpdateIsSet(false);
    this.lastUpdate = 0;
  }

  public int getVehicleId() {
    return this.vehicleId;
  }

  public StateVector setVehicleId(int vehicleId) {
    this.vehicleId = vehicleId;
    setVehicleIdIsSet(true);
    return this;
  }

  public void unsetVehicleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
  }

  /** Returns true if field vehicleId is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicleId() {
    return EncodingUtils.testBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
  }

  public void setVehicleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLEID_ISSET_ID, value);
  }

  public Position getPosition() {
    return this.position;
  }

  public StateVector setPosition(Position position) {
    this.position = position;
    return this;
  }

  public void unsetPosition() {
    this.position = null;
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return this.position != null;
  }

  public void setPositionIsSet(boolean value) {
    if (!value) {
      this.position = null;
    }
  }

  public Orientation getOrientation() {
    return this.orientation;
  }

  public StateVector setOrientation(Orientation orientation) {
    this.orientation = orientation;
    return this;
  }

  public void unsetOrientation() {
    this.orientation = null;
  }

  /** Returns true if field orientation is set (has been assigned a value) and false otherwise */
  public boolean isSetOrientation() {
    return this.orientation != null;
  }

  public void setOrientationIsSet(boolean value) {
    if (!value) {
      this.orientation = null;
    }
  }

  public double getGimbalPitch() {
    return this.gimbalPitch;
  }

  public StateVector setGimbalPitch(double gimbalPitch) {
    this.gimbalPitch = gimbalPitch;
    setGimbalPitchIsSet(true);
    return this;
  }

  public void unsetGimbalPitch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIMBALPITCH_ISSET_ID);
  }

  /** Returns true if field gimbalPitch is set (has been assigned a value) and false otherwise */
  public boolean isSetGimbalPitch() {
    return EncodingUtils.testBit(__isset_bitfield, __GIMBALPITCH_ISSET_ID);
  }

  public void setGimbalPitchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIMBALPITCH_ISSET_ID, value);
  }

  public Battery getBattery() {
    return this.battery;
  }

  public StateVector setBattery(Battery battery) {
    this.battery = battery;
    return this;
  }

  public void unsetBattery() {
    this.battery = null;
  }

  /** Returns true if field battery is set (has been assigned a value) and false otherwise */
  public boolean isSetBattery() {
    return this.battery != null;
  }

  public void setBatteryIsSet(boolean value) {
    if (!value) {
      this.battery = null;
    }
  }

  public double getLinearSpeed() {
    return this.linearSpeed;
  }

  public StateVector setLinearSpeed(double linearSpeed) {
    this.linearSpeed = linearSpeed;
    setLinearSpeedIsSet(true);
    return this;
  }

  public void unsetLinearSpeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINEARSPEED_ISSET_ID);
  }

  /** Returns true if field linearSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetLinearSpeed() {
    return EncodingUtils.testBit(__isset_bitfield, __LINEARSPEED_ISSET_ID);
  }

  public void setLinearSpeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINEARSPEED_ISSET_ID, value);
  }

  public long getLastUpdate() {
    return this.lastUpdate;
  }

  public StateVector setLastUpdate(long lastUpdate) {
    this.lastUpdate = lastUpdate;
    setLastUpdateIsSet(true);
    return this;
  }

  public void unsetLastUpdate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTUPDATE_ISSET_ID);
  }

  /** Returns true if field lastUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdate() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTUPDATE_ISSET_ID);
  }

  public void setLastUpdateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTUPDATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VEHICLE_ID:
      if (value == null) {
        unsetVehicleId();
      } else {
        setVehicleId((Integer)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((Position)value);
      }
      break;

    case ORIENTATION:
      if (value == null) {
        unsetOrientation();
      } else {
        setOrientation((Orientation)value);
      }
      break;

    case GIMBAL_PITCH:
      if (value == null) {
        unsetGimbalPitch();
      } else {
        setGimbalPitch((Double)value);
      }
      break;

    case BATTERY:
      if (value == null) {
        unsetBattery();
      } else {
        setBattery((Battery)value);
      }
      break;

    case LINEAR_SPEED:
      if (value == null) {
        unsetLinearSpeed();
      } else {
        setLinearSpeed((Double)value);
      }
      break;

    case LAST_UPDATE:
      if (value == null) {
        unsetLastUpdate();
      } else {
        setLastUpdate((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VEHICLE_ID:
      return Integer.valueOf(getVehicleId());

    case POSITION:
      return getPosition();

    case ORIENTATION:
      return getOrientation();

    case GIMBAL_PITCH:
      return Double.valueOf(getGimbalPitch());

    case BATTERY:
      return getBattery();

    case LINEAR_SPEED:
      return Double.valueOf(getLinearSpeed());

    case LAST_UPDATE:
      return Long.valueOf(getLastUpdate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VEHICLE_ID:
      return isSetVehicleId();
    case POSITION:
      return isSetPosition();
    case ORIENTATION:
      return isSetOrientation();
    case GIMBAL_PITCH:
      return isSetGimbalPitch();
    case BATTERY:
      return isSetBattery();
    case LINEAR_SPEED:
      return isSetLinearSpeed();
    case LAST_UPDATE:
      return isSetLastUpdate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StateVector)
      return this.equals((StateVector)that);
    return false;
  }

  public boolean equals(StateVector that) {
    if (that == null)
      return false;

    boolean this_present_vehicleId = true;
    boolean that_present_vehicleId = true;
    if (this_present_vehicleId || that_present_vehicleId) {
      if (!(this_present_vehicleId && that_present_vehicleId))
        return false;
      if (this.vehicleId != that.vehicleId)
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (!this.position.equals(that.position))
        return false;
    }

    boolean this_present_orientation = true && this.isSetOrientation();
    boolean that_present_orientation = true && that.isSetOrientation();
    if (this_present_orientation || that_present_orientation) {
      if (!(this_present_orientation && that_present_orientation))
        return false;
      if (!this.orientation.equals(that.orientation))
        return false;
    }

    boolean this_present_gimbalPitch = true && this.isSetGimbalPitch();
    boolean that_present_gimbalPitch = true && that.isSetGimbalPitch();
    if (this_present_gimbalPitch || that_present_gimbalPitch) {
      if (!(this_present_gimbalPitch && that_present_gimbalPitch))
        return false;
      if (this.gimbalPitch != that.gimbalPitch)
        return false;
    }

    boolean this_present_battery = true && this.isSetBattery();
    boolean that_present_battery = true && that.isSetBattery();
    if (this_present_battery || that_present_battery) {
      if (!(this_present_battery && that_present_battery))
        return false;
      if (!this.battery.equals(that.battery))
        return false;
    }

    boolean this_present_linearSpeed = true;
    boolean that_present_linearSpeed = true;
    if (this_present_linearSpeed || that_present_linearSpeed) {
      if (!(this_present_linearSpeed && that_present_linearSpeed))
        return false;
      if (this.linearSpeed != that.linearSpeed)
        return false;
    }

    boolean this_present_lastUpdate = true;
    boolean that_present_lastUpdate = true;
    if (this_present_lastUpdate || that_present_lastUpdate) {
      if (!(this_present_lastUpdate && that_present_lastUpdate))
        return false;
      if (this.lastUpdate != that.lastUpdate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_vehicleId = true;
    list.add(present_vehicleId);
    if (present_vehicleId)
      list.add(vehicleId);

    boolean present_position = true && (isSetPosition());
    list.add(present_position);
    if (present_position)
      list.add(position);

    boolean present_orientation = true && (isSetOrientation());
    list.add(present_orientation);
    if (present_orientation)
      list.add(orientation);

    boolean present_gimbalPitch = true && (isSetGimbalPitch());
    list.add(present_gimbalPitch);
    if (present_gimbalPitch)
      list.add(gimbalPitch);

    boolean present_battery = true && (isSetBattery());
    list.add(present_battery);
    if (present_battery)
      list.add(battery);

    boolean present_linearSpeed = true;
    list.add(present_linearSpeed);
    if (present_linearSpeed)
      list.add(linearSpeed);

    boolean present_lastUpdate = true;
    list.add(present_lastUpdate);
    if (present_lastUpdate)
      list.add(lastUpdate);

    return list.hashCode();
  }

  @Override
  public int compareTo(StateVector other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVehicleId()).compareTo(other.isSetVehicleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleId, other.vehicleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrientation()).compareTo(other.isSetOrientation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrientation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orientation, other.orientation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGimbalPitch()).compareTo(other.isSetGimbalPitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGimbalPitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gimbalPitch, other.gimbalPitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBattery()).compareTo(other.isSetBattery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBattery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.battery, other.battery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinearSpeed()).compareTo(other.isSetLinearSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinearSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linearSpeed, other.linearSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdate()).compareTo(other.isSetLastUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdate, other.lastUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StateVector(");
    boolean first = true;

    sb.append("vehicleId:");
    sb.append(this.vehicleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("position:");
    if (this.position == null) {
      sb.append("null");
    } else {
      sb.append(this.position);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orientation:");
    if (this.orientation == null) {
      sb.append("null");
    } else {
      sb.append(this.orientation);
    }
    first = false;
    if (isSetGimbalPitch()) {
      if (!first) sb.append(", ");
      sb.append("gimbalPitch:");
      sb.append(this.gimbalPitch);
      first = false;
    }
    if (isSetBattery()) {
      if (!first) sb.append(", ");
      sb.append("battery:");
      if (this.battery == null) {
        sb.append("null");
      } else {
        sb.append(this.battery);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("linearSpeed:");
    sb.append(this.linearSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdate:");
    sb.append(this.lastUpdate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (position != null) {
      position.validate();
    }
    if (orientation != null) {
      orientation.validate();
    }
    if (battery != null) {
      battery.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StateVectorStandardSchemeFactory implements SchemeFactory {
    public StateVectorStandardScheme getScheme() {
      return new StateVectorStandardScheme();
    }
  }

  private static class StateVectorStandardScheme extends StandardScheme<StateVector> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StateVector struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VEHICLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vehicleId = iprot.readI32();
              struct.setVehicleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.position = new Position();
              struct.position.read(iprot);
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORIENTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.orientation = new Orientation();
              struct.orientation.read(iprot);
              struct.setOrientationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GIMBAL_PITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.gimbalPitch = iprot.readDouble();
              struct.setGimbalPitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BATTERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.battery = new Battery();
              struct.battery.read(iprot);
              struct.setBatteryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LINEAR_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.linearSpeed = iprot.readDouble();
              struct.setLinearSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastUpdate = iprot.readI64();
              struct.setLastUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StateVector struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VEHICLE_ID_FIELD_DESC);
      oprot.writeI32(struct.vehicleId);
      oprot.writeFieldEnd();
      if (struct.position != null) {
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        struct.position.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.orientation != null) {
        oprot.writeFieldBegin(ORIENTATION_FIELD_DESC);
        struct.orientation.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGimbalPitch()) {
        oprot.writeFieldBegin(GIMBAL_PITCH_FIELD_DESC);
        oprot.writeDouble(struct.gimbalPitch);
        oprot.writeFieldEnd();
      }
      if (struct.battery != null) {
        if (struct.isSetBattery()) {
          oprot.writeFieldBegin(BATTERY_FIELD_DESC);
          struct.battery.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(LINEAR_SPEED_FIELD_DESC);
      oprot.writeDouble(struct.linearSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_UPDATE_FIELD_DESC);
      oprot.writeI64(struct.lastUpdate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StateVectorTupleSchemeFactory implements SchemeFactory {
    public StateVectorTupleScheme getScheme() {
      return new StateVectorTupleScheme();
    }
  }

  private static class StateVectorTupleScheme extends TupleScheme<StateVector> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StateVector struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVehicleId()) {
        optionals.set(0);
      }
      if (struct.isSetPosition()) {
        optionals.set(1);
      }
      if (struct.isSetOrientation()) {
        optionals.set(2);
      }
      if (struct.isSetGimbalPitch()) {
        optionals.set(3);
      }
      if (struct.isSetBattery()) {
        optionals.set(4);
      }
      if (struct.isSetLinearSpeed()) {
        optionals.set(5);
      }
      if (struct.isSetLastUpdate()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetVehicleId()) {
        oprot.writeI32(struct.vehicleId);
      }
      if (struct.isSetPosition()) {
        struct.position.write(oprot);
      }
      if (struct.isSetOrientation()) {
        struct.orientation.write(oprot);
      }
      if (struct.isSetGimbalPitch()) {
        oprot.writeDouble(struct.gimbalPitch);
      }
      if (struct.isSetBattery()) {
        struct.battery.write(oprot);
      }
      if (struct.isSetLinearSpeed()) {
        oprot.writeDouble(struct.linearSpeed);
      }
      if (struct.isSetLastUpdate()) {
        oprot.writeI64(struct.lastUpdate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StateVector struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.vehicleId = iprot.readI32();
        struct.setVehicleIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.position = new Position();
        struct.position.read(iprot);
        struct.setPositionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orientation = new Orientation();
        struct.orientation.read(iprot);
        struct.setOrientationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gimbalPitch = iprot.readDouble();
        struct.setGimbalPitchIsSet(true);
      }
      if (incoming.get(4)) {
        struct.battery = new Battery();
        struct.battery.read(iprot);
        struct.setBatteryIsSet(true);
      }
      if (incoming.get(5)) {
        struct.linearSpeed = iprot.readDouble();
        struct.setLinearSpeedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastUpdate = iprot.readI64();
        struct.setLastUpdateIsSet(true);
      }
    }
  }

}

