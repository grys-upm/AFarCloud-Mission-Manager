/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.afarcloud.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2020-9-11")
public class Alarm implements org.apache.thrift.TBase<Alarm, Alarm._Fields>, java.io.Serializable, Cloneable, Comparable<Alarm> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Alarm");

  private static final org.apache.thrift.protocol.TField ALARM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField VEHICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ALARM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ALARM_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmCode", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AlarmStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AlarmTupleSchemeFactory());
  }

  public int alarmId; // required
  public int vehicleId; // required
  public int missionId; // required
  public int alarmType; // required
  public int alarmCode; // required
  public String description; // required
  public long time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ALARM_ID((short)1, "alarmId"),
    VEHICLE_ID((short)2, "vehicleId"),
    MISSION_ID((short)3, "missionId"),
    ALARM_TYPE((short)4, "alarmType"),
    ALARM_CODE((short)5, "alarmCode"),
    DESCRIPTION((short)6, "description"),
    TIME((short)7, "time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALARM_ID
          return ALARM_ID;
        case 2: // VEHICLE_ID
          return VEHICLE_ID;
        case 3: // MISSION_ID
          return MISSION_ID;
        case 4: // ALARM_TYPE
          return ALARM_TYPE;
        case 5: // ALARM_CODE
          return ALARM_CODE;
        case 6: // DESCRIPTION
          return DESCRIPTION;
        case 7: // TIME
          return TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALARMID_ISSET_ID = 0;
  private static final int __VEHICLEID_ISSET_ID = 1;
  private static final int __MISSIONID_ISSET_ID = 2;
  private static final int __ALARMTYPE_ISSET_ID = 3;
  private static final int __ALARMCODE_ISSET_ID = 4;
  private static final int __TIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALARM_ID, new org.apache.thrift.meta_data.FieldMetaData("alarmId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VEHICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("vehicleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALARM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("alarmType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALARM_CODE, new org.apache.thrift.meta_data.FieldMetaData("alarmCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Alarm.class, metaDataMap);
  }

  public Alarm() {
  }

  public Alarm(
    int alarmId,
    int vehicleId,
    int missionId,
    int alarmType,
    int alarmCode,
    String description,
    long time)
  {
    this();
    this.alarmId = alarmId;
    setAlarmIdIsSet(true);
    this.vehicleId = vehicleId;
    setVehicleIdIsSet(true);
    this.missionId = missionId;
    setMissionIdIsSet(true);
    this.alarmType = alarmType;
    setAlarmTypeIsSet(true);
    this.alarmCode = alarmCode;
    setAlarmCodeIsSet(true);
    this.description = description;
    this.time = time;
    setTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Alarm(Alarm other) {
    __isset_bitfield = other.__isset_bitfield;
    this.alarmId = other.alarmId;
    this.vehicleId = other.vehicleId;
    this.missionId = other.missionId;
    this.alarmType = other.alarmType;
    this.alarmCode = other.alarmCode;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.time = other.time;
  }

  public Alarm deepCopy() {
    return new Alarm(this);
  }

  @Override
  public void clear() {
    setAlarmIdIsSet(false);
    this.alarmId = 0;
    setVehicleIdIsSet(false);
    this.vehicleId = 0;
    setMissionIdIsSet(false);
    this.missionId = 0;
    setAlarmTypeIsSet(false);
    this.alarmType = 0;
    setAlarmCodeIsSet(false);
    this.alarmCode = 0;
    this.description = null;
    setTimeIsSet(false);
    this.time = 0;
  }

  public int getAlarmId() {
    return this.alarmId;
  }

  public Alarm setAlarmId(int alarmId) {
    this.alarmId = alarmId;
    setAlarmIdIsSet(true);
    return this;
  }

  public void unsetAlarmId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALARMID_ISSET_ID);
  }

  /** Returns true if field alarmId is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmId() {
    return EncodingUtils.testBit(__isset_bitfield, __ALARMID_ISSET_ID);
  }

  public void setAlarmIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALARMID_ISSET_ID, value);
  }

  public int getVehicleId() {
    return this.vehicleId;
  }

  public Alarm setVehicleId(int vehicleId) {
    this.vehicleId = vehicleId;
    setVehicleIdIsSet(true);
    return this;
  }

  public void unsetVehicleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
  }

  /** Returns true if field vehicleId is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicleId() {
    return EncodingUtils.testBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
  }

  public void setVehicleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLEID_ISSET_ID, value);
  }

  public int getMissionId() {
    return this.missionId;
  }

  public Alarm setMissionId(int missionId) {
    this.missionId = missionId;
    setMissionIdIsSet(true);
    return this;
  }

  public void unsetMissionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSIONID_ISSET_ID);
  }

  /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
  public boolean isSetMissionId() {
    return EncodingUtils.testBit(__isset_bitfield, __MISSIONID_ISSET_ID);
  }

  public void setMissionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSIONID_ISSET_ID, value);
  }

  public int getAlarmType() {
    return this.alarmType;
  }

  public Alarm setAlarmType(int alarmType) {
    this.alarmType = alarmType;
    setAlarmTypeIsSet(true);
    return this;
  }

  public void unsetAlarmType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALARMTYPE_ISSET_ID);
  }

  /** Returns true if field alarmType is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmType() {
    return EncodingUtils.testBit(__isset_bitfield, __ALARMTYPE_ISSET_ID);
  }

  public void setAlarmTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALARMTYPE_ISSET_ID, value);
  }

  public int getAlarmCode() {
    return this.alarmCode;
  }

  public Alarm setAlarmCode(int alarmCode) {
    this.alarmCode = alarmCode;
    setAlarmCodeIsSet(true);
    return this;
  }

  public void unsetAlarmCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALARMCODE_ISSET_ID);
  }

  /** Returns true if field alarmCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmCode() {
    return EncodingUtils.testBit(__isset_bitfield, __ALARMCODE_ISSET_ID);
  }

  public void setAlarmCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALARMCODE_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public Alarm setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public long getTime() {
    return this.time;
  }

  public Alarm setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALARM_ID:
      if (value == null) {
        unsetAlarmId();
      } else {
        setAlarmId((Integer)value);
      }
      break;

    case VEHICLE_ID:
      if (value == null) {
        unsetVehicleId();
      } else {
        setVehicleId((Integer)value);
      }
      break;

    case MISSION_ID:
      if (value == null) {
        unsetMissionId();
      } else {
        setMissionId((Integer)value);
      }
      break;

    case ALARM_TYPE:
      if (value == null) {
        unsetAlarmType();
      } else {
        setAlarmType((Integer)value);
      }
      break;

    case ALARM_CODE:
      if (value == null) {
        unsetAlarmCode();
      } else {
        setAlarmCode((Integer)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALARM_ID:
      return Integer.valueOf(getAlarmId());

    case VEHICLE_ID:
      return Integer.valueOf(getVehicleId());

    case MISSION_ID:
      return Integer.valueOf(getMissionId());

    case ALARM_TYPE:
      return Integer.valueOf(getAlarmType());

    case ALARM_CODE:
      return Integer.valueOf(getAlarmCode());

    case DESCRIPTION:
      return getDescription();

    case TIME:
      return Long.valueOf(getTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALARM_ID:
      return isSetAlarmId();
    case VEHICLE_ID:
      return isSetVehicleId();
    case MISSION_ID:
      return isSetMissionId();
    case ALARM_TYPE:
      return isSetAlarmType();
    case ALARM_CODE:
      return isSetAlarmCode();
    case DESCRIPTION:
      return isSetDescription();
    case TIME:
      return isSetTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Alarm)
      return this.equals((Alarm)that);
    return false;
  }

  public boolean equals(Alarm that) {
    if (that == null)
      return false;

    boolean this_present_alarmId = true;
    boolean that_present_alarmId = true;
    if (this_present_alarmId || that_present_alarmId) {
      if (!(this_present_alarmId && that_present_alarmId))
        return false;
      if (this.alarmId != that.alarmId)
        return false;
    }

    boolean this_present_vehicleId = true;
    boolean that_present_vehicleId = true;
    if (this_present_vehicleId || that_present_vehicleId) {
      if (!(this_present_vehicleId && that_present_vehicleId))
        return false;
      if (this.vehicleId != that.vehicleId)
        return false;
    }

    boolean this_present_missionId = true;
    boolean that_present_missionId = true;
    if (this_present_missionId || that_present_missionId) {
      if (!(this_present_missionId && that_present_missionId))
        return false;
      if (this.missionId != that.missionId)
        return false;
    }

    boolean this_present_alarmType = true;
    boolean that_present_alarmType = true;
    if (this_present_alarmType || that_present_alarmType) {
      if (!(this_present_alarmType && that_present_alarmType))
        return false;
      if (this.alarmType != that.alarmType)
        return false;
    }

    boolean this_present_alarmCode = true;
    boolean that_present_alarmCode = true;
    if (this_present_alarmCode || that_present_alarmCode) {
      if (!(this_present_alarmCode && that_present_alarmCode))
        return false;
      if (this.alarmCode != that.alarmCode)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_alarmId = true;
    list.add(present_alarmId);
    if (present_alarmId)
      list.add(alarmId);

    boolean present_vehicleId = true;
    list.add(present_vehicleId);
    if (present_vehicleId)
      list.add(vehicleId);

    boolean present_missionId = true;
    list.add(present_missionId);
    if (present_missionId)
      list.add(missionId);

    boolean present_alarmType = true;
    list.add(present_alarmType);
    if (present_alarmType)
      list.add(alarmType);

    boolean present_alarmCode = true;
    list.add(present_alarmCode);
    if (present_alarmCode)
      list.add(alarmCode);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_time = true;
    list.add(present_time);
    if (present_time)
      list.add(time);

    return list.hashCode();
  }

  @Override
  public int compareTo(Alarm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAlarmId()).compareTo(other.isSetAlarmId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmId, other.alarmId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicleId()).compareTo(other.isSetVehicleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleId, other.vehicleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarmType()).compareTo(other.isSetAlarmType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmType, other.alarmType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarmCode()).compareTo(other.isSetAlarmCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmCode, other.alarmCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Alarm(");
    boolean first = true;

    sb.append("alarmId:");
    sb.append(this.alarmId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicleId:");
    sb.append(this.vehicleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("missionId:");
    sb.append(this.missionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarmType:");
    sb.append(this.alarmType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alarmCode:");
    sb.append(this.alarmCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AlarmStandardSchemeFactory implements SchemeFactory {
    public AlarmStandardScheme getScheme() {
      return new AlarmStandardScheme();
    }
  }

  private static class AlarmStandardScheme extends StandardScheme<Alarm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Alarm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALARM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alarmId = iprot.readI32();
              struct.setAlarmIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VEHICLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vehicleId = iprot.readI32();
              struct.setVehicleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MISSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.missionId = iprot.readI32();
              struct.setMissionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALARM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alarmType = iprot.readI32();
              struct.setAlarmTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALARM_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alarmCode = iprot.readI32();
              struct.setAlarmCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Alarm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ALARM_ID_FIELD_DESC);
      oprot.writeI32(struct.alarmId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VEHICLE_ID_FIELD_DESC);
      oprot.writeI32(struct.vehicleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
      oprot.writeI32(struct.missionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALARM_TYPE_FIELD_DESC);
      oprot.writeI32(struct.alarmType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALARM_CODE_FIELD_DESC);
      oprot.writeI32(struct.alarmCode);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AlarmTupleSchemeFactory implements SchemeFactory {
    public AlarmTupleScheme getScheme() {
      return new AlarmTupleScheme();
    }
  }

  private static class AlarmTupleScheme extends TupleScheme<Alarm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Alarm struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAlarmId()) {
        optionals.set(0);
      }
      if (struct.isSetVehicleId()) {
        optionals.set(1);
      }
      if (struct.isSetMissionId()) {
        optionals.set(2);
      }
      if (struct.isSetAlarmType()) {
        optionals.set(3);
      }
      if (struct.isSetAlarmCode()) {
        optionals.set(4);
      }
      if (struct.isSetDescription()) {
        optionals.set(5);
      }
      if (struct.isSetTime()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetAlarmId()) {
        oprot.writeI32(struct.alarmId);
      }
      if (struct.isSetVehicleId()) {
        oprot.writeI32(struct.vehicleId);
      }
      if (struct.isSetMissionId()) {
        oprot.writeI32(struct.missionId);
      }
      if (struct.isSetAlarmType()) {
        oprot.writeI32(struct.alarmType);
      }
      if (struct.isSetAlarmCode()) {
        oprot.writeI32(struct.alarmCode);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Alarm struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.alarmId = iprot.readI32();
        struct.setAlarmIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.vehicleId = iprot.readI32();
        struct.setVehicleIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.missionId = iprot.readI32();
        struct.setMissionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.alarmType = iprot.readI32();
        struct.setAlarmTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.alarmCode = iprot.readI32();
        struct.setAlarmCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
    }
  }

}

