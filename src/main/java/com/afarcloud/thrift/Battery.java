/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.afarcloud.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2020-9-11")
public class Battery implements org.apache.thrift.TBase<Battery, Battery._Fields>, java.io.Serializable, Cloneable, Comparable<Battery> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Battery");

  private static final org.apache.thrift.protocol.TField BATTERY_CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryCapacity", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField BATTERY_PERCENTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryPercentage", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BatteryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BatteryTupleSchemeFactory());
  }

  public double batteryCapacity; // required
  public double batteryPercentage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BATTERY_CAPACITY((short)1, "batteryCapacity"),
    BATTERY_PERCENTAGE((short)2, "batteryPercentage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BATTERY_CAPACITY
          return BATTERY_CAPACITY;
        case 2: // BATTERY_PERCENTAGE
          return BATTERY_PERCENTAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BATTERYCAPACITY_ISSET_ID = 0;
  private static final int __BATTERYPERCENTAGE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BATTERY_CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("batteryCapacity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BATTERY_PERCENTAGE, new org.apache.thrift.meta_data.FieldMetaData("batteryPercentage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Battery.class, metaDataMap);
  }

  public Battery() {
  }

  public Battery(
    double batteryCapacity,
    double batteryPercentage)
  {
    this();
    this.batteryCapacity = batteryCapacity;
    setBatteryCapacityIsSet(true);
    this.batteryPercentage = batteryPercentage;
    setBatteryPercentageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Battery(Battery other) {
    __isset_bitfield = other.__isset_bitfield;
    this.batteryCapacity = other.batteryCapacity;
    this.batteryPercentage = other.batteryPercentage;
  }

  public Battery deepCopy() {
    return new Battery(this);
  }

  @Override
  public void clear() {
    setBatteryCapacityIsSet(false);
    this.batteryCapacity = 0.0;
    setBatteryPercentageIsSet(false);
    this.batteryPercentage = 0.0;
  }

  public double getBatteryCapacity() {
    return this.batteryCapacity;
  }

  public Battery setBatteryCapacity(double batteryCapacity) {
    this.batteryCapacity = batteryCapacity;
    setBatteryCapacityIsSet(true);
    return this;
  }

  public void unsetBatteryCapacity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATTERYCAPACITY_ISSET_ID);
  }

  /** Returns true if field batteryCapacity is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryCapacity() {
    return EncodingUtils.testBit(__isset_bitfield, __BATTERYCAPACITY_ISSET_ID);
  }

  public void setBatteryCapacityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATTERYCAPACITY_ISSET_ID, value);
  }

  public double getBatteryPercentage() {
    return this.batteryPercentage;
  }

  public Battery setBatteryPercentage(double batteryPercentage) {
    this.batteryPercentage = batteryPercentage;
    setBatteryPercentageIsSet(true);
    return this;
  }

  public void unsetBatteryPercentage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATTERYPERCENTAGE_ISSET_ID);
  }

  /** Returns true if field batteryPercentage is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryPercentage() {
    return EncodingUtils.testBit(__isset_bitfield, __BATTERYPERCENTAGE_ISSET_ID);
  }

  public void setBatteryPercentageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATTERYPERCENTAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BATTERY_CAPACITY:
      if (value == null) {
        unsetBatteryCapacity();
      } else {
        setBatteryCapacity((Double)value);
      }
      break;

    case BATTERY_PERCENTAGE:
      if (value == null) {
        unsetBatteryPercentage();
      } else {
        setBatteryPercentage((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BATTERY_CAPACITY:
      return Double.valueOf(getBatteryCapacity());

    case BATTERY_PERCENTAGE:
      return Double.valueOf(getBatteryPercentage());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BATTERY_CAPACITY:
      return isSetBatteryCapacity();
    case BATTERY_PERCENTAGE:
      return isSetBatteryPercentage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Battery)
      return this.equals((Battery)that);
    return false;
  }

  public boolean equals(Battery that) {
    if (that == null)
      return false;

    boolean this_present_batteryCapacity = true;
    boolean that_present_batteryCapacity = true;
    if (this_present_batteryCapacity || that_present_batteryCapacity) {
      if (!(this_present_batteryCapacity && that_present_batteryCapacity))
        return false;
      if (this.batteryCapacity != that.batteryCapacity)
        return false;
    }

    boolean this_present_batteryPercentage = true;
    boolean that_present_batteryPercentage = true;
    if (this_present_batteryPercentage || that_present_batteryPercentage) {
      if (!(this_present_batteryPercentage && that_present_batteryPercentage))
        return false;
      if (this.batteryPercentage != that.batteryPercentage)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_batteryCapacity = true;
    list.add(present_batteryCapacity);
    if (present_batteryCapacity)
      list.add(batteryCapacity);

    boolean present_batteryPercentage = true;
    list.add(present_batteryPercentage);
    if (present_batteryPercentage)
      list.add(batteryPercentage);

    return list.hashCode();
  }

  @Override
  public int compareTo(Battery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBatteryCapacity()).compareTo(other.isSetBatteryCapacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryCapacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryCapacity, other.batteryCapacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatteryPercentage()).compareTo(other.isSetBatteryPercentage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryPercentage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryPercentage, other.batteryPercentage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Battery(");
    boolean first = true;

    sb.append("batteryCapacity:");
    sb.append(this.batteryCapacity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("batteryPercentage:");
    sb.append(this.batteryPercentage);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BatteryStandardSchemeFactory implements SchemeFactory {
    public BatteryStandardScheme getScheme() {
      return new BatteryStandardScheme();
    }
  }

  private static class BatteryStandardScheme extends StandardScheme<Battery> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Battery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BATTERY_CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.batteryCapacity = iprot.readDouble();
              struct.setBatteryCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BATTERY_PERCENTAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.batteryPercentage = iprot.readDouble();
              struct.setBatteryPercentageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Battery struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BATTERY_CAPACITY_FIELD_DESC);
      oprot.writeDouble(struct.batteryCapacity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BATTERY_PERCENTAGE_FIELD_DESC);
      oprot.writeDouble(struct.batteryPercentage);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BatteryTupleSchemeFactory implements SchemeFactory {
    public BatteryTupleScheme getScheme() {
      return new BatteryTupleScheme();
    }
  }

  private static class BatteryTupleScheme extends TupleScheme<Battery> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Battery struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBatteryCapacity()) {
        optionals.set(0);
      }
      if (struct.isSetBatteryPercentage()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBatteryCapacity()) {
        oprot.writeDouble(struct.batteryCapacity);
      }
      if (struct.isSetBatteryPercentage()) {
        oprot.writeDouble(struct.batteryPercentage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Battery struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.batteryCapacity = iprot.readDouble();
        struct.setBatteryCapacityIsSet(true);
      }
      if (incoming.get(1)) {
        struct.batteryPercentage = iprot.readDouble();
        struct.setBatteryPercentageIsSet(true);
      }
    }
  }

}

