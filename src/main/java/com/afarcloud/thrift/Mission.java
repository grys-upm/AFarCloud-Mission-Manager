/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.afarcloud.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2020-9-11")
public class Mission implements org.apache.thrift.TBase<Mission, Mission._Fields>, java.io.Serializable, Cloneable, Comparable<Mission> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mission");

  private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAVIGATION_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("navigationArea", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField FORBIDDEN_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("forbiddenArea", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField HOME_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("homeLocation", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("tasks", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField VEHICLES_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicles", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField COMMANDS_FIELD_DESC = new org.apache.thrift.protocol.TField("commands", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MissionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MissionTupleSchemeFactory());
  }

  public int missionId; // required
  public String name; // optional
  public Region navigationArea; // required
  public List<Region> forbiddenArea; // required
  public List<Position> homeLocation; // required
  public List<Task> tasks; // required
  public List<Vehicle> vehicles; // required
  public List<Command> commands; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MISSION_ID((short)1, "missionId"),
    NAME((short)2, "name"),
    NAVIGATION_AREA((short)3, "navigationArea"),
    FORBIDDEN_AREA((short)4, "forbiddenArea"),
    HOME_LOCATION((short)5, "homeLocation"),
    TASKS((short)6, "tasks"),
    VEHICLES((short)7, "vehicles"),
    COMMANDS((short)8, "commands");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MISSION_ID
          return MISSION_ID;
        case 2: // NAME
          return NAME;
        case 3: // NAVIGATION_AREA
          return NAVIGATION_AREA;
        case 4: // FORBIDDEN_AREA
          return FORBIDDEN_AREA;
        case 5: // HOME_LOCATION
          return HOME_LOCATION;
        case 6: // TASKS
          return TASKS;
        case 7: // VEHICLES
          return VEHICLES;
        case 8: // COMMANDS
          return COMMANDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MISSIONID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.COMMANDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAVIGATION_AREA, new org.apache.thrift.meta_data.FieldMetaData("navigationArea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Region.class)));
    tmpMap.put(_Fields.FORBIDDEN_AREA, new org.apache.thrift.meta_data.FieldMetaData("forbiddenArea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Region.class))));
    tmpMap.put(_Fields.HOME_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("homeLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Position.class))));
    tmpMap.put(_Fields.TASKS, new org.apache.thrift.meta_data.FieldMetaData("tasks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Task.class))));
    tmpMap.put(_Fields.VEHICLES, new org.apache.thrift.meta_data.FieldMetaData("vehicles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vehicle.class))));
    tmpMap.put(_Fields.COMMANDS, new org.apache.thrift.meta_data.FieldMetaData("commands", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Command.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mission.class, metaDataMap);
  }

  public Mission() {
  }

  public Mission(
    int missionId,
    Region navigationArea,
    List<Region> forbiddenArea,
    List<Position> homeLocation,
    List<Task> tasks,
    List<Vehicle> vehicles)
  {
    this();
    this.missionId = missionId;
    setMissionIdIsSet(true);
    this.navigationArea = navigationArea;
    this.forbiddenArea = forbiddenArea;
    this.homeLocation = homeLocation;
    this.tasks = tasks;
    this.vehicles = vehicles;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Mission(Mission other) {
    __isset_bitfield = other.__isset_bitfield;
    this.missionId = other.missionId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetNavigationArea()) {
      this.navigationArea = new Region(other.navigationArea);
    }
    if (other.isSetForbiddenArea()) {
      List<Region> __this__forbiddenArea = new ArrayList<Region>(other.forbiddenArea.size());
      for (Region other_element : other.forbiddenArea) {
        __this__forbiddenArea.add(new Region(other_element));
      }
      this.forbiddenArea = __this__forbiddenArea;
    }
    if (other.isSetHomeLocation()) {
      List<Position> __this__homeLocation = new ArrayList<Position>(other.homeLocation.size());
      for (Position other_element : other.homeLocation) {
        __this__homeLocation.add(new Position(other_element));
      }
      this.homeLocation = __this__homeLocation;
    }
    if (other.isSetTasks()) {
      List<Task> __this__tasks = new ArrayList<Task>(other.tasks.size());
      for (Task other_element : other.tasks) {
        __this__tasks.add(new Task(other_element));
      }
      this.tasks = __this__tasks;
    }
    if (other.isSetVehicles()) {
      List<Vehicle> __this__vehicles = new ArrayList<Vehicle>(other.vehicles.size());
      for (Vehicle other_element : other.vehicles) {
        __this__vehicles.add(new Vehicle(other_element));
      }
      this.vehicles = __this__vehicles;
    }
    if (other.isSetCommands()) {
      List<Command> __this__commands = new ArrayList<Command>(other.commands.size());
      for (Command other_element : other.commands) {
        __this__commands.add(new Command(other_element));
      }
      this.commands = __this__commands;
    }
  }

  public Mission deepCopy() {
    return new Mission(this);
  }

  @Override
  public void clear() {
    setMissionIdIsSet(false);
    this.missionId = 0;
    this.name = null;
    this.navigationArea = null;
    this.forbiddenArea = null;
    this.homeLocation = null;
    this.tasks = null;
    this.vehicles = null;
    this.commands = null;
  }

  public int getMissionId() {
    return this.missionId;
  }

  public Mission setMissionId(int missionId) {
    this.missionId = missionId;
    setMissionIdIsSet(true);
    return this;
  }

  public void unsetMissionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSIONID_ISSET_ID);
  }

  /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
  public boolean isSetMissionId() {
    return EncodingUtils.testBit(__isset_bitfield, __MISSIONID_ISSET_ID);
  }

  public void setMissionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSIONID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public Mission setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public Region getNavigationArea() {
    return this.navigationArea;
  }

  public Mission setNavigationArea(Region navigationArea) {
    this.navigationArea = navigationArea;
    return this;
  }

  public void unsetNavigationArea() {
    this.navigationArea = null;
  }

  /** Returns true if field navigationArea is set (has been assigned a value) and false otherwise */
  public boolean isSetNavigationArea() {
    return this.navigationArea != null;
  }

  public void setNavigationAreaIsSet(boolean value) {
    if (!value) {
      this.navigationArea = null;
    }
  }

  public int getForbiddenAreaSize() {
    return (this.forbiddenArea == null) ? 0 : this.forbiddenArea.size();
  }

  public java.util.Iterator<Region> getForbiddenAreaIterator() {
    return (this.forbiddenArea == null) ? null : this.forbiddenArea.iterator();
  }

  public void addToForbiddenArea(Region elem) {
    if (this.forbiddenArea == null) {
      this.forbiddenArea = new ArrayList<Region>();
    }
    this.forbiddenArea.add(elem);
  }

  public List<Region> getForbiddenArea() {
    return this.forbiddenArea;
  }

  public Mission setForbiddenArea(List<Region> forbiddenArea) {
    this.forbiddenArea = forbiddenArea;
    return this;
  }

  public void unsetForbiddenArea() {
    this.forbiddenArea = null;
  }

  /** Returns true if field forbiddenArea is set (has been assigned a value) and false otherwise */
  public boolean isSetForbiddenArea() {
    return this.forbiddenArea != null;
  }

  public void setForbiddenAreaIsSet(boolean value) {
    if (!value) {
      this.forbiddenArea = null;
    }
  }

  public int getHomeLocationSize() {
    return (this.homeLocation == null) ? 0 : this.homeLocation.size();
  }

  public java.util.Iterator<Position> getHomeLocationIterator() {
    return (this.homeLocation == null) ? null : this.homeLocation.iterator();
  }

  public void addToHomeLocation(Position elem) {
    if (this.homeLocation == null) {
      this.homeLocation = new ArrayList<Position>();
    }
    this.homeLocation.add(elem);
  }

  public List<Position> getHomeLocation() {
    return this.homeLocation;
  }

  public Mission setHomeLocation(List<Position> homeLocation) {
    this.homeLocation = homeLocation;
    return this;
  }

  public void unsetHomeLocation() {
    this.homeLocation = null;
  }

  /** Returns true if field homeLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeLocation() {
    return this.homeLocation != null;
  }

  public void setHomeLocationIsSet(boolean value) {
    if (!value) {
      this.homeLocation = null;
    }
  }

  public int getTasksSize() {
    return (this.tasks == null) ? 0 : this.tasks.size();
  }

  public java.util.Iterator<Task> getTasksIterator() {
    return (this.tasks == null) ? null : this.tasks.iterator();
  }

  public void addToTasks(Task elem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<Task>();
    }
    this.tasks.add(elem);
  }

  public List<Task> getTasks() {
    return this.tasks;
  }

  public Mission setTasks(List<Task> tasks) {
    this.tasks = tasks;
    return this;
  }

  public void unsetTasks() {
    this.tasks = null;
  }

  /** Returns true if field tasks is set (has been assigned a value) and false otherwise */
  public boolean isSetTasks() {
    return this.tasks != null;
  }

  public void setTasksIsSet(boolean value) {
    if (!value) {
      this.tasks = null;
    }
  }

  public int getVehiclesSize() {
    return (this.vehicles == null) ? 0 : this.vehicles.size();
  }

  public java.util.Iterator<Vehicle> getVehiclesIterator() {
    return (this.vehicles == null) ? null : this.vehicles.iterator();
  }

  public void addToVehicles(Vehicle elem) {
    if (this.vehicles == null) {
      this.vehicles = new ArrayList<Vehicle>();
    }
    this.vehicles.add(elem);
  }

  public List<Vehicle> getVehicles() {
    return this.vehicles;
  }

  public Mission setVehicles(List<Vehicle> vehicles) {
    this.vehicles = vehicles;
    return this;
  }

  public void unsetVehicles() {
    this.vehicles = null;
  }

  /** Returns true if field vehicles is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicles() {
    return this.vehicles != null;
  }

  public void setVehiclesIsSet(boolean value) {
    if (!value) {
      this.vehicles = null;
    }
  }

  public int getCommandsSize() {
    return (this.commands == null) ? 0 : this.commands.size();
  }

  public java.util.Iterator<Command> getCommandsIterator() {
    return (this.commands == null) ? null : this.commands.iterator();
  }

  public void addToCommands(Command elem) {
    if (this.commands == null) {
      this.commands = new ArrayList<Command>();
    }
    this.commands.add(elem);
  }

  public List<Command> getCommands() {
    return this.commands;
  }

  public Mission setCommands(List<Command> commands) {
    this.commands = commands;
    return this;
  }

  public void unsetCommands() {
    this.commands = null;
  }

  /** Returns true if field commands is set (has been assigned a value) and false otherwise */
  public boolean isSetCommands() {
    return this.commands != null;
  }

  public void setCommandsIsSet(boolean value) {
    if (!value) {
      this.commands = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MISSION_ID:
      if (value == null) {
        unsetMissionId();
      } else {
        setMissionId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case NAVIGATION_AREA:
      if (value == null) {
        unsetNavigationArea();
      } else {
        setNavigationArea((Region)value);
      }
      break;

    case FORBIDDEN_AREA:
      if (value == null) {
        unsetForbiddenArea();
      } else {
        setForbiddenArea((List<Region>)value);
      }
      break;

    case HOME_LOCATION:
      if (value == null) {
        unsetHomeLocation();
      } else {
        setHomeLocation((List<Position>)value);
      }
      break;

    case TASKS:
      if (value == null) {
        unsetTasks();
      } else {
        setTasks((List<Task>)value);
      }
      break;

    case VEHICLES:
      if (value == null) {
        unsetVehicles();
      } else {
        setVehicles((List<Vehicle>)value);
      }
      break;

    case COMMANDS:
      if (value == null) {
        unsetCommands();
      } else {
        setCommands((List<Command>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MISSION_ID:
      return Integer.valueOf(getMissionId());

    case NAME:
      return getName();

    case NAVIGATION_AREA:
      return getNavigationArea();

    case FORBIDDEN_AREA:
      return getForbiddenArea();

    case HOME_LOCATION:
      return getHomeLocation();

    case TASKS:
      return getTasks();

    case VEHICLES:
      return getVehicles();

    case COMMANDS:
      return getCommands();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MISSION_ID:
      return isSetMissionId();
    case NAME:
      return isSetName();
    case NAVIGATION_AREA:
      return isSetNavigationArea();
    case FORBIDDEN_AREA:
      return isSetForbiddenArea();
    case HOME_LOCATION:
      return isSetHomeLocation();
    case TASKS:
      return isSetTasks();
    case VEHICLES:
      return isSetVehicles();
    case COMMANDS:
      return isSetCommands();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Mission)
      return this.equals((Mission)that);
    return false;
  }

  public boolean equals(Mission that) {
    if (that == null)
      return false;

    boolean this_present_missionId = true;
    boolean that_present_missionId = true;
    if (this_present_missionId || that_present_missionId) {
      if (!(this_present_missionId && that_present_missionId))
        return false;
      if (this.missionId != that.missionId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_navigationArea = true && this.isSetNavigationArea();
    boolean that_present_navigationArea = true && that.isSetNavigationArea();
    if (this_present_navigationArea || that_present_navigationArea) {
      if (!(this_present_navigationArea && that_present_navigationArea))
        return false;
      if (!this.navigationArea.equals(that.navigationArea))
        return false;
    }

    boolean this_present_forbiddenArea = true && this.isSetForbiddenArea();
    boolean that_present_forbiddenArea = true && that.isSetForbiddenArea();
    if (this_present_forbiddenArea || that_present_forbiddenArea) {
      if (!(this_present_forbiddenArea && that_present_forbiddenArea))
        return false;
      if (!this.forbiddenArea.equals(that.forbiddenArea))
        return false;
    }

    boolean this_present_homeLocation = true && this.isSetHomeLocation();
    boolean that_present_homeLocation = true && that.isSetHomeLocation();
    if (this_present_homeLocation || that_present_homeLocation) {
      if (!(this_present_homeLocation && that_present_homeLocation))
        return false;
      if (!this.homeLocation.equals(that.homeLocation))
        return false;
    }

    boolean this_present_tasks = true && this.isSetTasks();
    boolean that_present_tasks = true && that.isSetTasks();
    if (this_present_tasks || that_present_tasks) {
      if (!(this_present_tasks && that_present_tasks))
        return false;
      if (!this.tasks.equals(that.tasks))
        return false;
    }

    boolean this_present_vehicles = true && this.isSetVehicles();
    boolean that_present_vehicles = true && that.isSetVehicles();
    if (this_present_vehicles || that_present_vehicles) {
      if (!(this_present_vehicles && that_present_vehicles))
        return false;
      if (!this.vehicles.equals(that.vehicles))
        return false;
    }

    boolean this_present_commands = true && this.isSetCommands();
    boolean that_present_commands = true && that.isSetCommands();
    if (this_present_commands || that_present_commands) {
      if (!(this_present_commands && that_present_commands))
        return false;
      if (!this.commands.equals(that.commands))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_missionId = true;
    list.add(present_missionId);
    if (present_missionId)
      list.add(missionId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_navigationArea = true && (isSetNavigationArea());
    list.add(present_navigationArea);
    if (present_navigationArea)
      list.add(navigationArea);

    boolean present_forbiddenArea = true && (isSetForbiddenArea());
    list.add(present_forbiddenArea);
    if (present_forbiddenArea)
      list.add(forbiddenArea);

    boolean present_homeLocation = true && (isSetHomeLocation());
    list.add(present_homeLocation);
    if (present_homeLocation)
      list.add(homeLocation);

    boolean present_tasks = true && (isSetTasks());
    list.add(present_tasks);
    if (present_tasks)
      list.add(tasks);

    boolean present_vehicles = true && (isSetVehicles());
    list.add(present_vehicles);
    if (present_vehicles)
      list.add(vehicles);

    boolean present_commands = true && (isSetCommands());
    list.add(present_commands);
    if (present_commands)
      list.add(commands);

    return list.hashCode();
  }

  @Override
  public int compareTo(Mission other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNavigationArea()).compareTo(other.isSetNavigationArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNavigationArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.navigationArea, other.navigationArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForbiddenArea()).compareTo(other.isSetForbiddenArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForbiddenArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forbiddenArea, other.forbiddenArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeLocation()).compareTo(other.isSetHomeLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeLocation, other.homeLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTasks()).compareTo(other.isSetTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tasks, other.tasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicles()).compareTo(other.isSetVehicles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicles, other.vehicles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommands()).compareTo(other.isSetCommands());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommands()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commands, other.commands);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Mission(");
    boolean first = true;

    sb.append("missionId:");
    sb.append(this.missionId);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("navigationArea:");
    if (this.navigationArea == null) {
      sb.append("null");
    } else {
      sb.append(this.navigationArea);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("forbiddenArea:");
    if (this.forbiddenArea == null) {
      sb.append("null");
    } else {
      sb.append(this.forbiddenArea);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeLocation:");
    if (this.homeLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.homeLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tasks:");
    if (this.tasks == null) {
      sb.append("null");
    } else {
      sb.append(this.tasks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicles:");
    if (this.vehicles == null) {
      sb.append("null");
    } else {
      sb.append(this.vehicles);
    }
    first = false;
    if (isSetCommands()) {
      if (!first) sb.append(", ");
      sb.append("commands:");
      if (this.commands == null) {
        sb.append("null");
      } else {
        sb.append(this.commands);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (navigationArea != null) {
      navigationArea.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MissionStandardSchemeFactory implements SchemeFactory {
    public MissionStandardScheme getScheme() {
      return new MissionStandardScheme();
    }
  }

  private static class MissionStandardScheme extends StandardScheme<Mission> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Mission struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MISSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.missionId = iprot.readI32();
              struct.setMissionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAVIGATION_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.navigationArea = new Region();
              struct.navigationArea.read(iprot);
              struct.setNavigationAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FORBIDDEN_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.forbiddenArea = new ArrayList<Region>(_list56.size);
                Region _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  _elem57 = new Region();
                  _elem57.read(iprot);
                  struct.forbiddenArea.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setForbiddenAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HOME_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                struct.homeLocation = new ArrayList<Position>(_list59.size);
                Position _elem60;
                for (int _i61 = 0; _i61 < _list59.size; ++_i61)
                {
                  _elem60 = new Position();
                  _elem60.read(iprot);
                  struct.homeLocation.add(_elem60);
                }
                iprot.readListEnd();
              }
              struct.setHomeLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.tasks = new ArrayList<Task>(_list62.size);
                Task _elem63;
                for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                {
                  _elem63 = new Task();
                  _elem63.read(iprot);
                  struct.tasks.add(_elem63);
                }
                iprot.readListEnd();
              }
              struct.setTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VEHICLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list65 = iprot.readListBegin();
                struct.vehicles = new ArrayList<Vehicle>(_list65.size);
                Vehicle _elem66;
                for (int _i67 = 0; _i67 < _list65.size; ++_i67)
                {
                  _elem66 = new Vehicle();
                  _elem66.read(iprot);
                  struct.vehicles.add(_elem66);
                }
                iprot.readListEnd();
              }
              struct.setVehiclesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMMANDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                struct.commands = new ArrayList<Command>(_list68.size);
                Command _elem69;
                for (int _i70 = 0; _i70 < _list68.size; ++_i70)
                {
                  _elem69 = new Command();
                  _elem69.read(iprot);
                  struct.commands.add(_elem69);
                }
                iprot.readListEnd();
              }
              struct.setCommandsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Mission struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
      oprot.writeI32(struct.missionId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.navigationArea != null) {
        oprot.writeFieldBegin(NAVIGATION_AREA_FIELD_DESC);
        struct.navigationArea.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.forbiddenArea != null) {
        oprot.writeFieldBegin(FORBIDDEN_AREA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.forbiddenArea.size()));
          for (Region _iter71 : struct.forbiddenArea)
          {
            _iter71.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.homeLocation != null) {
        oprot.writeFieldBegin(HOME_LOCATION_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.homeLocation.size()));
          for (Position _iter72 : struct.homeLocation)
          {
            _iter72.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tasks != null) {
        oprot.writeFieldBegin(TASKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tasks.size()));
          for (Task _iter73 : struct.tasks)
          {
            _iter73.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.vehicles != null) {
        oprot.writeFieldBegin(VEHICLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.vehicles.size()));
          for (Vehicle _iter74 : struct.vehicles)
          {
            _iter74.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.commands != null) {
        if (struct.isSetCommands()) {
          oprot.writeFieldBegin(COMMANDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.commands.size()));
            for (Command _iter75 : struct.commands)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MissionTupleSchemeFactory implements SchemeFactory {
    public MissionTupleScheme getScheme() {
      return new MissionTupleScheme();
    }
  }

  private static class MissionTupleScheme extends TupleScheme<Mission> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Mission struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMissionId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetNavigationArea()) {
        optionals.set(2);
      }
      if (struct.isSetForbiddenArea()) {
        optionals.set(3);
      }
      if (struct.isSetHomeLocation()) {
        optionals.set(4);
      }
      if (struct.isSetTasks()) {
        optionals.set(5);
      }
      if (struct.isSetVehicles()) {
        optionals.set(6);
      }
      if (struct.isSetCommands()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetMissionId()) {
        oprot.writeI32(struct.missionId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetNavigationArea()) {
        struct.navigationArea.write(oprot);
      }
      if (struct.isSetForbiddenArea()) {
        {
          oprot.writeI32(struct.forbiddenArea.size());
          for (Region _iter76 : struct.forbiddenArea)
          {
            _iter76.write(oprot);
          }
        }
      }
      if (struct.isSetHomeLocation()) {
        {
          oprot.writeI32(struct.homeLocation.size());
          for (Position _iter77 : struct.homeLocation)
          {
            _iter77.write(oprot);
          }
        }
      }
      if (struct.isSetTasks()) {
        {
          oprot.writeI32(struct.tasks.size());
          for (Task _iter78 : struct.tasks)
          {
            _iter78.write(oprot);
          }
        }
      }
      if (struct.isSetVehicles()) {
        {
          oprot.writeI32(struct.vehicles.size());
          for (Vehicle _iter79 : struct.vehicles)
          {
            _iter79.write(oprot);
          }
        }
      }
      if (struct.isSetCommands()) {
        {
          oprot.writeI32(struct.commands.size());
          for (Command _iter80 : struct.commands)
          {
            _iter80.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Mission struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.missionId = iprot.readI32();
        struct.setMissionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.navigationArea = new Region();
        struct.navigationArea.read(iprot);
        struct.setNavigationAreaIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.forbiddenArea = new ArrayList<Region>(_list81.size);
          Region _elem82;
          for (int _i83 = 0; _i83 < _list81.size; ++_i83)
          {
            _elem82 = new Region();
            _elem82.read(iprot);
            struct.forbiddenArea.add(_elem82);
          }
        }
        struct.setForbiddenAreaIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list84 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.homeLocation = new ArrayList<Position>(_list84.size);
          Position _elem85;
          for (int _i86 = 0; _i86 < _list84.size; ++_i86)
          {
            _elem85 = new Position();
            _elem85.read(iprot);
            struct.homeLocation.add(_elem85);
          }
        }
        struct.setHomeLocationIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tasks = new ArrayList<Task>(_list87.size);
          Task _elem88;
          for (int _i89 = 0; _i89 < _list87.size; ++_i89)
          {
            _elem88 = new Task();
            _elem88.read(iprot);
            struct.tasks.add(_elem88);
          }
        }
        struct.setTasksIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.vehicles = new ArrayList<Vehicle>(_list90.size);
          Vehicle _elem91;
          for (int _i92 = 0; _i92 < _list90.size; ++_i92)
          {
            _elem91 = new Vehicle();
            _elem91.read(iprot);
            struct.vehicles.add(_elem91);
          }
        }
        struct.setVehiclesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.commands = new ArrayList<Command>(_list93.size);
          Command _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = new Command();
            _elem94.read(iprot);
            struct.commands.add(_elem94);
          }
        }
        struct.setCommandsIsSet(true);
      }
    }
  }

}

