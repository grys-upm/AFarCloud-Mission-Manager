/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.afarcloud.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2020-9-11")
public class SemanticQueryService {

  public interface Iface {

    public List<com.afarcloud.thrift.Vehicle> getAllVehicles(int requestId) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.MissionTag> getAllMissions(int requestId) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.MissionTag> getOngoingMissions(int requestId) throws org.apache.thrift.TException;

    public com.afarcloud.thrift.Mission getMissionById(int requestId, int missionId) throws org.apache.thrift.TException;

    public com.afarcloud.thrift.Vehicle getVehicle(int requestId, int vid) throws org.apache.thrift.TException;

    public com.afarcloud.thrift.PartField getPartfield(int requestId, int partfieldId) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.PartField> getAllPartfields(int requestId) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataPF(int requestId, int partfieldId) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataBySensorUid(int requestId, String sensorUid) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataBySensorTypePF(int requestId, int partfieldId, com.afarcloud.thrift.SensorType sensorType) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataByObservationTypePF(int requestId, int partfieldId, com.afarcloud.thrift.ObservationType obserType) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataBySensorTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataByObservationTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.CollarData> queryCollarLastDataPF(int requestId, int partfieldId) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.CollarData> queryCollarLastDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.CollarData> queryCollarLastDataByCollarUid(int requestId, String collarUid) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.StateVector> queryVehicleLastStateVectorPF(int requestId, int partfieldId) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.StateVector> queryVehicleLastStateVectorC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.StateVector> queryVehicleLastStateVectorByVehicleId(int requestId, int vehicleId) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.DetectionRegion> queryDetectedStuffOnTheFarm(int requestId, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataPF(int requestId, int partfieldId, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataBySensorUid(int requestId, String sensorUid, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataBySensorTypePF(int requestId, int partfieldId, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataByObservationTypePF(int requestId, int partfieldId, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataBySensorTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataByObservationTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.CollarData> queryCollarHistoricalDataPF(int requestId, int partfieldId, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.CollarData> queryCollarHistoricalDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.CollarData> queryCollarHistoricalDataByCollarUid(int requestId, String collarUid, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.StateVector> queryVehicleHistoricalStateVectorsPF(int requestId, int partfieldId, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.StateVector> queryVehicleHistoricalStateVectorsC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException;

    public List<com.afarcloud.thrift.StateVector> queryVehicleHistoricalStateVectorByVehicleId(int requestId, int vehicleId, long startTime, long endTime) throws org.apache.thrift.TException;

    public void storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference) throws org.apache.thrift.TException;

    public String ping() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAllVehicles(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllMissions(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOngoingMissions(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMissionById(int requestId, int missionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVehicle(int requestId, int vid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPartfield(int requestId, int partfieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllPartfields(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorLastDataPF(int requestId, int partfieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorLastDataBySensorUid(int requestId, String sensorUid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorLastDataBySensorTypePF(int requestId, int partfieldId, com.afarcloud.thrift.SensorType sensorType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorLastDataByObservationTypePF(int requestId, int partfieldId, com.afarcloud.thrift.ObservationType obserType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorLastDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorLastDataBySensorTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorLastDataByObservationTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCollarLastDataPF(int requestId, int partfieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCollarLastDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCollarLastDataByCollarUid(int requestId, String collarUid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryVehicleLastStateVectorPF(int requestId, int partfieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryVehicleLastStateVectorC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryVehicleLastStateVectorByVehicleId(int requestId, int vehicleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryDetectedStuffOnTheFarm(int requestId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorHistoricalDataPF(int requestId, int partfieldId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorHistoricalDataBySensorUid(int requestId, String sensorUid, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorHistoricalDataBySensorTypePF(int requestId, int partfieldId, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorHistoricalDataByObservationTypePF(int requestId, int partfieldId, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorHistoricalDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorHistoricalDataBySensorTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void querySensorHistoricalDataByObservationTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCollarHistoricalDataPF(int requestId, int partfieldId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCollarHistoricalDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryCollarHistoricalDataByCollarUid(int requestId, String collarUid, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryVehicleHistoricalStateVectorsPF(int requestId, int partfieldId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryVehicleHistoricalStateVectorsC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryVehicleHistoricalStateVectorByVehicleId(int requestId, int vehicleId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<com.afarcloud.thrift.Vehicle> getAllVehicles(int requestId) throws org.apache.thrift.TException
    {
      send_getAllVehicles(requestId);
      return recv_getAllVehicles();
    }

    public void send_getAllVehicles(int requestId) throws org.apache.thrift.TException
    {
      getAllVehicles_args args = new getAllVehicles_args();
      args.setRequestId(requestId);
      sendBase("getAllVehicles", args);
    }

    public List<com.afarcloud.thrift.Vehicle> recv_getAllVehicles() throws org.apache.thrift.TException
    {
      getAllVehicles_result result = new getAllVehicles_result();
      receiveBase(result, "getAllVehicles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllVehicles failed: unknown result");
    }

    public List<com.afarcloud.thrift.MissionTag> getAllMissions(int requestId) throws org.apache.thrift.TException
    {
      send_getAllMissions(requestId);
      return recv_getAllMissions();
    }

    public void send_getAllMissions(int requestId) throws org.apache.thrift.TException
    {
      getAllMissions_args args = new getAllMissions_args();
      args.setRequestId(requestId);
      sendBase("getAllMissions", args);
    }

    public List<com.afarcloud.thrift.MissionTag> recv_getAllMissions() throws org.apache.thrift.TException
    {
      getAllMissions_result result = new getAllMissions_result();
      receiveBase(result, "getAllMissions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllMissions failed: unknown result");
    }

    public List<com.afarcloud.thrift.MissionTag> getOngoingMissions(int requestId) throws org.apache.thrift.TException
    {
      send_getOngoingMissions(requestId);
      return recv_getOngoingMissions();
    }

    public void send_getOngoingMissions(int requestId) throws org.apache.thrift.TException
    {
      getOngoingMissions_args args = new getOngoingMissions_args();
      args.setRequestId(requestId);
      sendBase("getOngoingMissions", args);
    }

    public List<com.afarcloud.thrift.MissionTag> recv_getOngoingMissions() throws org.apache.thrift.TException
    {
      getOngoingMissions_result result = new getOngoingMissions_result();
      receiveBase(result, "getOngoingMissions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOngoingMissions failed: unknown result");
    }

    public com.afarcloud.thrift.Mission getMissionById(int requestId, int missionId) throws org.apache.thrift.TException
    {
      send_getMissionById(requestId, missionId);
      return recv_getMissionById();
    }

    public void send_getMissionById(int requestId, int missionId) throws org.apache.thrift.TException
    {
      getMissionById_args args = new getMissionById_args();
      args.setRequestId(requestId);
      args.setMissionId(missionId);
      sendBase("getMissionById", args);
    }

    public com.afarcloud.thrift.Mission recv_getMissionById() throws org.apache.thrift.TException
    {
      getMissionById_result result = new getMissionById_result();
      receiveBase(result, "getMissionById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMissionById failed: unknown result");
    }

    public com.afarcloud.thrift.Vehicle getVehicle(int requestId, int vid) throws org.apache.thrift.TException
    {
      send_getVehicle(requestId, vid);
      return recv_getVehicle();
    }

    public void send_getVehicle(int requestId, int vid) throws org.apache.thrift.TException
    {
      getVehicle_args args = new getVehicle_args();
      args.setRequestId(requestId);
      args.setVid(vid);
      sendBase("getVehicle", args);
    }

    public com.afarcloud.thrift.Vehicle recv_getVehicle() throws org.apache.thrift.TException
    {
      getVehicle_result result = new getVehicle_result();
      receiveBase(result, "getVehicle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVehicle failed: unknown result");
    }

    public com.afarcloud.thrift.PartField getPartfield(int requestId, int partfieldId) throws org.apache.thrift.TException
    {
      send_getPartfield(requestId, partfieldId);
      return recv_getPartfield();
    }

    public void send_getPartfield(int requestId, int partfieldId) throws org.apache.thrift.TException
    {
      getPartfield_args args = new getPartfield_args();
      args.setRequestId(requestId);
      args.setPartfieldId(partfieldId);
      sendBase("getPartfield", args);
    }

    public com.afarcloud.thrift.PartField recv_getPartfield() throws org.apache.thrift.TException
    {
      getPartfield_result result = new getPartfield_result();
      receiveBase(result, "getPartfield");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPartfield failed: unknown result");
    }

    public List<com.afarcloud.thrift.PartField> getAllPartfields(int requestId) throws org.apache.thrift.TException
    {
      send_getAllPartfields(requestId);
      return recv_getAllPartfields();
    }

    public void send_getAllPartfields(int requestId) throws org.apache.thrift.TException
    {
      getAllPartfields_args args = new getAllPartfields_args();
      args.setRequestId(requestId);
      sendBase("getAllPartfields", args);
    }

    public List<com.afarcloud.thrift.PartField> recv_getAllPartfields() throws org.apache.thrift.TException
    {
      getAllPartfields_result result = new getAllPartfields_result();
      receiveBase(result, "getAllPartfields");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllPartfields failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataPF(int requestId, int partfieldId) throws org.apache.thrift.TException
    {
      send_querySensorLastDataPF(requestId, partfieldId);
      return recv_querySensorLastDataPF();
    }

    public void send_querySensorLastDataPF(int requestId, int partfieldId) throws org.apache.thrift.TException
    {
      querySensorLastDataPF_args args = new querySensorLastDataPF_args();
      args.setRequestId(requestId);
      args.setPartfieldId(partfieldId);
      sendBase("querySensorLastDataPF", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorLastDataPF() throws org.apache.thrift.TException
    {
      querySensorLastDataPF_result result = new querySensorLastDataPF_result();
      receiveBase(result, "querySensorLastDataPF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorLastDataPF failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataBySensorUid(int requestId, String sensorUid) throws org.apache.thrift.TException
    {
      send_querySensorLastDataBySensorUid(requestId, sensorUid);
      return recv_querySensorLastDataBySensorUid();
    }

    public void send_querySensorLastDataBySensorUid(int requestId, String sensorUid) throws org.apache.thrift.TException
    {
      querySensorLastDataBySensorUid_args args = new querySensorLastDataBySensorUid_args();
      args.setRequestId(requestId);
      args.setSensorUid(sensorUid);
      sendBase("querySensorLastDataBySensorUid", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorLastDataBySensorUid() throws org.apache.thrift.TException
    {
      querySensorLastDataBySensorUid_result result = new querySensorLastDataBySensorUid_result();
      receiveBase(result, "querySensorLastDataBySensorUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorLastDataBySensorUid failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataBySensorTypePF(int requestId, int partfieldId, com.afarcloud.thrift.SensorType sensorType) throws org.apache.thrift.TException
    {
      send_querySensorLastDataBySensorTypePF(requestId, partfieldId, sensorType);
      return recv_querySensorLastDataBySensorTypePF();
    }

    public void send_querySensorLastDataBySensorTypePF(int requestId, int partfieldId, com.afarcloud.thrift.SensorType sensorType) throws org.apache.thrift.TException
    {
      querySensorLastDataBySensorTypePF_args args = new querySensorLastDataBySensorTypePF_args();
      args.setRequestId(requestId);
      args.setPartfieldId(partfieldId);
      args.setSensorType(sensorType);
      sendBase("querySensorLastDataBySensorTypePF", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorLastDataBySensorTypePF() throws org.apache.thrift.TException
    {
      querySensorLastDataBySensorTypePF_result result = new querySensorLastDataBySensorTypePF_result();
      receiveBase(result, "querySensorLastDataBySensorTypePF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorLastDataBySensorTypePF failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataByObservationTypePF(int requestId, int partfieldId, com.afarcloud.thrift.ObservationType obserType) throws org.apache.thrift.TException
    {
      send_querySensorLastDataByObservationTypePF(requestId, partfieldId, obserType);
      return recv_querySensorLastDataByObservationTypePF();
    }

    public void send_querySensorLastDataByObservationTypePF(int requestId, int partfieldId, com.afarcloud.thrift.ObservationType obserType) throws org.apache.thrift.TException
    {
      querySensorLastDataByObservationTypePF_args args = new querySensorLastDataByObservationTypePF_args();
      args.setRequestId(requestId);
      args.setPartfieldId(partfieldId);
      args.setObserType(obserType);
      sendBase("querySensorLastDataByObservationTypePF", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorLastDataByObservationTypePF() throws org.apache.thrift.TException
    {
      querySensorLastDataByObservationTypePF_result result = new querySensorLastDataByObservationTypePF_result();
      receiveBase(result, "querySensorLastDataByObservationTypePF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorLastDataByObservationTypePF failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException
    {
      send_querySensorLastDataC(requestId, regionCentre, radius);
      return recv_querySensorLastDataC();
    }

    public void send_querySensorLastDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException
    {
      querySensorLastDataC_args args = new querySensorLastDataC_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      sendBase("querySensorLastDataC", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorLastDataC() throws org.apache.thrift.TException
    {
      querySensorLastDataC_result result = new querySensorLastDataC_result();
      receiveBase(result, "querySensorLastDataC");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorLastDataC failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataBySensorTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType) throws org.apache.thrift.TException
    {
      send_querySensorLastDataBySensorTypeC(requestId, regionCentre, radius, sensorType);
      return recv_querySensorLastDataBySensorTypeC();
    }

    public void send_querySensorLastDataBySensorTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType) throws org.apache.thrift.TException
    {
      querySensorLastDataBySensorTypeC_args args = new querySensorLastDataBySensorTypeC_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      args.setSensorType(sensorType);
      sendBase("querySensorLastDataBySensorTypeC", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorLastDataBySensorTypeC() throws org.apache.thrift.TException
    {
      querySensorLastDataBySensorTypeC_result result = new querySensorLastDataBySensorTypeC_result();
      receiveBase(result, "querySensorLastDataBySensorTypeC");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorLastDataBySensorTypeC failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorLastDataByObservationTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType) throws org.apache.thrift.TException
    {
      send_querySensorLastDataByObservationTypeC(requestId, regionCentre, radius, obserType);
      return recv_querySensorLastDataByObservationTypeC();
    }

    public void send_querySensorLastDataByObservationTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType) throws org.apache.thrift.TException
    {
      querySensorLastDataByObservationTypeC_args args = new querySensorLastDataByObservationTypeC_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      args.setObserType(obserType);
      sendBase("querySensorLastDataByObservationTypeC", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorLastDataByObservationTypeC() throws org.apache.thrift.TException
    {
      querySensorLastDataByObservationTypeC_result result = new querySensorLastDataByObservationTypeC_result();
      receiveBase(result, "querySensorLastDataByObservationTypeC");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorLastDataByObservationTypeC failed: unknown result");
    }

    public List<com.afarcloud.thrift.CollarData> queryCollarLastDataPF(int requestId, int partfieldId) throws org.apache.thrift.TException
    {
      send_queryCollarLastDataPF(requestId, partfieldId);
      return recv_queryCollarLastDataPF();
    }

    public void send_queryCollarLastDataPF(int requestId, int partfieldId) throws org.apache.thrift.TException
    {
      queryCollarLastDataPF_args args = new queryCollarLastDataPF_args();
      args.setRequestId(requestId);
      args.setPartfieldId(partfieldId);
      sendBase("queryCollarLastDataPF", args);
    }

    public List<com.afarcloud.thrift.CollarData> recv_queryCollarLastDataPF() throws org.apache.thrift.TException
    {
      queryCollarLastDataPF_result result = new queryCollarLastDataPF_result();
      receiveBase(result, "queryCollarLastDataPF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCollarLastDataPF failed: unknown result");
    }

    public List<com.afarcloud.thrift.CollarData> queryCollarLastDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException
    {
      send_queryCollarLastDataC(requestId, regionCentre, radius);
      return recv_queryCollarLastDataC();
    }

    public void send_queryCollarLastDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException
    {
      queryCollarLastDataC_args args = new queryCollarLastDataC_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      sendBase("queryCollarLastDataC", args);
    }

    public List<com.afarcloud.thrift.CollarData> recv_queryCollarLastDataC() throws org.apache.thrift.TException
    {
      queryCollarLastDataC_result result = new queryCollarLastDataC_result();
      receiveBase(result, "queryCollarLastDataC");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCollarLastDataC failed: unknown result");
    }

    public List<com.afarcloud.thrift.CollarData> queryCollarLastDataByCollarUid(int requestId, String collarUid) throws org.apache.thrift.TException
    {
      send_queryCollarLastDataByCollarUid(requestId, collarUid);
      return recv_queryCollarLastDataByCollarUid();
    }

    public void send_queryCollarLastDataByCollarUid(int requestId, String collarUid) throws org.apache.thrift.TException
    {
      queryCollarLastDataByCollarUid_args args = new queryCollarLastDataByCollarUid_args();
      args.setRequestId(requestId);
      args.setCollarUid(collarUid);
      sendBase("queryCollarLastDataByCollarUid", args);
    }

    public List<com.afarcloud.thrift.CollarData> recv_queryCollarLastDataByCollarUid() throws org.apache.thrift.TException
    {
      queryCollarLastDataByCollarUid_result result = new queryCollarLastDataByCollarUid_result();
      receiveBase(result, "queryCollarLastDataByCollarUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCollarLastDataByCollarUid failed: unknown result");
    }

    public List<com.afarcloud.thrift.StateVector> queryVehicleLastStateVectorPF(int requestId, int partfieldId) throws org.apache.thrift.TException
    {
      send_queryVehicleLastStateVectorPF(requestId, partfieldId);
      return recv_queryVehicleLastStateVectorPF();
    }

    public void send_queryVehicleLastStateVectorPF(int requestId, int partfieldId) throws org.apache.thrift.TException
    {
      queryVehicleLastStateVectorPF_args args = new queryVehicleLastStateVectorPF_args();
      args.setRequestId(requestId);
      args.setPartfieldId(partfieldId);
      sendBase("queryVehicleLastStateVectorPF", args);
    }

    public List<com.afarcloud.thrift.StateVector> recv_queryVehicleLastStateVectorPF() throws org.apache.thrift.TException
    {
      queryVehicleLastStateVectorPF_result result = new queryVehicleLastStateVectorPF_result();
      receiveBase(result, "queryVehicleLastStateVectorPF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryVehicleLastStateVectorPF failed: unknown result");
    }

    public List<com.afarcloud.thrift.StateVector> queryVehicleLastStateVectorC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException
    {
      send_queryVehicleLastStateVectorC(requestId, regionCentre, radius);
      return recv_queryVehicleLastStateVectorC();
    }

    public void send_queryVehicleLastStateVectorC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius) throws org.apache.thrift.TException
    {
      queryVehicleLastStateVectorC_args args = new queryVehicleLastStateVectorC_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      sendBase("queryVehicleLastStateVectorC", args);
    }

    public List<com.afarcloud.thrift.StateVector> recv_queryVehicleLastStateVectorC() throws org.apache.thrift.TException
    {
      queryVehicleLastStateVectorC_result result = new queryVehicleLastStateVectorC_result();
      receiveBase(result, "queryVehicleLastStateVectorC");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryVehicleLastStateVectorC failed: unknown result");
    }

    public List<com.afarcloud.thrift.StateVector> queryVehicleLastStateVectorByVehicleId(int requestId, int vehicleId) throws org.apache.thrift.TException
    {
      send_queryVehicleLastStateVectorByVehicleId(requestId, vehicleId);
      return recv_queryVehicleLastStateVectorByVehicleId();
    }

    public void send_queryVehicleLastStateVectorByVehicleId(int requestId, int vehicleId) throws org.apache.thrift.TException
    {
      queryVehicleLastStateVectorByVehicleId_args args = new queryVehicleLastStateVectorByVehicleId_args();
      args.setRequestId(requestId);
      args.setVehicleId(vehicleId);
      sendBase("queryVehicleLastStateVectorByVehicleId", args);
    }

    public List<com.afarcloud.thrift.StateVector> recv_queryVehicleLastStateVectorByVehicleId() throws org.apache.thrift.TException
    {
      queryVehicleLastStateVectorByVehicleId_result result = new queryVehicleLastStateVectorByVehicleId_result();
      receiveBase(result, "queryVehicleLastStateVectorByVehicleId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryVehicleLastStateVectorByVehicleId failed: unknown result");
    }

    public List<com.afarcloud.thrift.DetectionRegion> queryDetectedStuffOnTheFarm(int requestId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_queryDetectedStuffOnTheFarm(requestId, startTime, endTime);
      return recv_queryDetectedStuffOnTheFarm();
    }

    public void send_queryDetectedStuffOnTheFarm(int requestId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      queryDetectedStuffOnTheFarm_args args = new queryDetectedStuffOnTheFarm_args();
      args.setRequestId(requestId);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("queryDetectedStuffOnTheFarm", args);
    }

    public List<com.afarcloud.thrift.DetectionRegion> recv_queryDetectedStuffOnTheFarm() throws org.apache.thrift.TException
    {
      queryDetectedStuffOnTheFarm_result result = new queryDetectedStuffOnTheFarm_result();
      receiveBase(result, "queryDetectedStuffOnTheFarm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryDetectedStuffOnTheFarm failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataPF(int requestId, int partfieldId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_querySensorHistoricalDataPF(requestId, partfieldId, startTime, endTime);
      return recv_querySensorHistoricalDataPF();
    }

    public void send_querySensorHistoricalDataPF(int requestId, int partfieldId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      querySensorHistoricalDataPF_args args = new querySensorHistoricalDataPF_args();
      args.setRequestId(requestId);
      args.setPartfieldId(partfieldId);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("querySensorHistoricalDataPF", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorHistoricalDataPF() throws org.apache.thrift.TException
    {
      querySensorHistoricalDataPF_result result = new querySensorHistoricalDataPF_result();
      receiveBase(result, "querySensorHistoricalDataPF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorHistoricalDataPF failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataBySensorUid(int requestId, String sensorUid, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_querySensorHistoricalDataBySensorUid(requestId, sensorUid, startTime, endTime);
      return recv_querySensorHistoricalDataBySensorUid();
    }

    public void send_querySensorHistoricalDataBySensorUid(int requestId, String sensorUid, long startTime, long endTime) throws org.apache.thrift.TException
    {
      querySensorHistoricalDataBySensorUid_args args = new querySensorHistoricalDataBySensorUid_args();
      args.setRequestId(requestId);
      args.setSensorUid(sensorUid);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("querySensorHistoricalDataBySensorUid", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorHistoricalDataBySensorUid() throws org.apache.thrift.TException
    {
      querySensorHistoricalDataBySensorUid_result result = new querySensorHistoricalDataBySensorUid_result();
      receiveBase(result, "querySensorHistoricalDataBySensorUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorHistoricalDataBySensorUid failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataBySensorTypePF(int requestId, int partfieldId, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_querySensorHistoricalDataBySensorTypePF(requestId, partfieldId, sensorType, startTime, endTime);
      return recv_querySensorHistoricalDataBySensorTypePF();
    }

    public void send_querySensorHistoricalDataBySensorTypePF(int requestId, int partfieldId, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime) throws org.apache.thrift.TException
    {
      querySensorHistoricalDataBySensorTypePF_args args = new querySensorHistoricalDataBySensorTypePF_args();
      args.setRequestId(requestId);
      args.setPartfieldId(partfieldId);
      args.setSensorType(sensorType);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("querySensorHistoricalDataBySensorTypePF", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorHistoricalDataBySensorTypePF() throws org.apache.thrift.TException
    {
      querySensorHistoricalDataBySensorTypePF_result result = new querySensorHistoricalDataBySensorTypePF_result();
      receiveBase(result, "querySensorHistoricalDataBySensorTypePF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorHistoricalDataBySensorTypePF failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataByObservationTypePF(int requestId, int partfieldId, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_querySensorHistoricalDataByObservationTypePF(requestId, partfieldId, obserType, startTime, endTime);
      return recv_querySensorHistoricalDataByObservationTypePF();
    }

    public void send_querySensorHistoricalDataByObservationTypePF(int requestId, int partfieldId, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime) throws org.apache.thrift.TException
    {
      querySensorHistoricalDataByObservationTypePF_args args = new querySensorHistoricalDataByObservationTypePF_args();
      args.setRequestId(requestId);
      args.setPartfieldId(partfieldId);
      args.setObserType(obserType);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("querySensorHistoricalDataByObservationTypePF", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorHistoricalDataByObservationTypePF() throws org.apache.thrift.TException
    {
      querySensorHistoricalDataByObservationTypePF_result result = new querySensorHistoricalDataByObservationTypePF_result();
      receiveBase(result, "querySensorHistoricalDataByObservationTypePF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorHistoricalDataByObservationTypePF failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_querySensorHistoricalDataC(requestId, regionCentre, radius, startTime, endTime);
      return recv_querySensorHistoricalDataC();
    }

    public void send_querySensorHistoricalDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException
    {
      querySensorHistoricalDataC_args args = new querySensorHistoricalDataC_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("querySensorHistoricalDataC", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorHistoricalDataC() throws org.apache.thrift.TException
    {
      querySensorHistoricalDataC_result result = new querySensorHistoricalDataC_result();
      receiveBase(result, "querySensorHistoricalDataC");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorHistoricalDataC failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataBySensorTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_querySensorHistoricalDataBySensorTypeC(requestId, regionCentre, radius, sensorType, startTime, endTime);
      return recv_querySensorHistoricalDataBySensorTypeC();
    }

    public void send_querySensorHistoricalDataBySensorTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime) throws org.apache.thrift.TException
    {
      querySensorHistoricalDataBySensorTypeC_args args = new querySensorHistoricalDataBySensorTypeC_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      args.setSensorType(sensorType);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("querySensorHistoricalDataBySensorTypeC", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorHistoricalDataBySensorTypeC() throws org.apache.thrift.TException
    {
      querySensorHistoricalDataBySensorTypeC_result result = new querySensorHistoricalDataBySensorTypeC_result();
      receiveBase(result, "querySensorHistoricalDataBySensorTypeC");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorHistoricalDataBySensorTypeC failed: unknown result");
    }

    public List<com.afarcloud.thrift.SensorData> querySensorHistoricalDataByObservationTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_querySensorHistoricalDataByObservationTypeC(requestId, regionCentre, radius, obserType, startTime, endTime);
      return recv_querySensorHistoricalDataByObservationTypeC();
    }

    public void send_querySensorHistoricalDataByObservationTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime) throws org.apache.thrift.TException
    {
      querySensorHistoricalDataByObservationTypeC_args args = new querySensorHistoricalDataByObservationTypeC_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      args.setObserType(obserType);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("querySensorHistoricalDataByObservationTypeC", args);
    }

    public List<com.afarcloud.thrift.SensorData> recv_querySensorHistoricalDataByObservationTypeC() throws org.apache.thrift.TException
    {
      querySensorHistoricalDataByObservationTypeC_result result = new querySensorHistoricalDataByObservationTypeC_result();
      receiveBase(result, "querySensorHistoricalDataByObservationTypeC");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySensorHistoricalDataByObservationTypeC failed: unknown result");
    }

    public List<com.afarcloud.thrift.CollarData> queryCollarHistoricalDataPF(int requestId, int partfieldId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_queryCollarHistoricalDataPF(requestId, partfieldId, startTime, endTime);
      return recv_queryCollarHistoricalDataPF();
    }

    public void send_queryCollarHistoricalDataPF(int requestId, int partfieldId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      queryCollarHistoricalDataPF_args args = new queryCollarHistoricalDataPF_args();
      args.setRequestId(requestId);
      args.setPartfieldId(partfieldId);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("queryCollarHistoricalDataPF", args);
    }

    public List<com.afarcloud.thrift.CollarData> recv_queryCollarHistoricalDataPF() throws org.apache.thrift.TException
    {
      queryCollarHistoricalDataPF_result result = new queryCollarHistoricalDataPF_result();
      receiveBase(result, "queryCollarHistoricalDataPF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCollarHistoricalDataPF failed: unknown result");
    }

    public List<com.afarcloud.thrift.CollarData> queryCollarHistoricalDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_queryCollarHistoricalDataC(requestId, regionCentre, radius, startTime, endTime);
      return recv_queryCollarHistoricalDataC();
    }

    public void send_queryCollarHistoricalDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException
    {
      queryCollarHistoricalDataC_args args = new queryCollarHistoricalDataC_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("queryCollarHistoricalDataC", args);
    }

    public List<com.afarcloud.thrift.CollarData> recv_queryCollarHistoricalDataC() throws org.apache.thrift.TException
    {
      queryCollarHistoricalDataC_result result = new queryCollarHistoricalDataC_result();
      receiveBase(result, "queryCollarHistoricalDataC");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCollarHistoricalDataC failed: unknown result");
    }

    public List<com.afarcloud.thrift.CollarData> queryCollarHistoricalDataByCollarUid(int requestId, String collarUid, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_queryCollarHistoricalDataByCollarUid(requestId, collarUid, startTime, endTime);
      return recv_queryCollarHistoricalDataByCollarUid();
    }

    public void send_queryCollarHistoricalDataByCollarUid(int requestId, String collarUid, long startTime, long endTime) throws org.apache.thrift.TException
    {
      queryCollarHistoricalDataByCollarUid_args args = new queryCollarHistoricalDataByCollarUid_args();
      args.setRequestId(requestId);
      args.setCollarUid(collarUid);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("queryCollarHistoricalDataByCollarUid", args);
    }

    public List<com.afarcloud.thrift.CollarData> recv_queryCollarHistoricalDataByCollarUid() throws org.apache.thrift.TException
    {
      queryCollarHistoricalDataByCollarUid_result result = new queryCollarHistoricalDataByCollarUid_result();
      receiveBase(result, "queryCollarHistoricalDataByCollarUid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCollarHistoricalDataByCollarUid failed: unknown result");
    }

    public List<com.afarcloud.thrift.StateVector> queryVehicleHistoricalStateVectorsPF(int requestId, int partfieldId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_queryVehicleHistoricalStateVectorsPF(requestId, partfieldId, startTime, endTime);
      return recv_queryVehicleHistoricalStateVectorsPF();
    }

    public void send_queryVehicleHistoricalStateVectorsPF(int requestId, int partfieldId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      queryVehicleHistoricalStateVectorsPF_args args = new queryVehicleHistoricalStateVectorsPF_args();
      args.setRequestId(requestId);
      args.setPartfieldId(partfieldId);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("queryVehicleHistoricalStateVectorsPF", args);
    }

    public List<com.afarcloud.thrift.StateVector> recv_queryVehicleHistoricalStateVectorsPF() throws org.apache.thrift.TException
    {
      queryVehicleHistoricalStateVectorsPF_result result = new queryVehicleHistoricalStateVectorsPF_result();
      receiveBase(result, "queryVehicleHistoricalStateVectorsPF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryVehicleHistoricalStateVectorsPF failed: unknown result");
    }

    public List<com.afarcloud.thrift.StateVector> queryVehicleHistoricalStateVectorsC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_queryVehicleHistoricalStateVectorsC(requestId, regionCentre, radius, startTime, endTime);
      return recv_queryVehicleHistoricalStateVectorsC();
    }

    public void send_queryVehicleHistoricalStateVectorsC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime) throws org.apache.thrift.TException
    {
      queryVehicleHistoricalStateVectorsC_args args = new queryVehicleHistoricalStateVectorsC_args();
      args.setRequestId(requestId);
      args.setRegionCentre(regionCentre);
      args.setRadius(radius);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("queryVehicleHistoricalStateVectorsC", args);
    }

    public List<com.afarcloud.thrift.StateVector> recv_queryVehicleHistoricalStateVectorsC() throws org.apache.thrift.TException
    {
      queryVehicleHistoricalStateVectorsC_result result = new queryVehicleHistoricalStateVectorsC_result();
      receiveBase(result, "queryVehicleHistoricalStateVectorsC");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryVehicleHistoricalStateVectorsC failed: unknown result");
    }

    public List<com.afarcloud.thrift.StateVector> queryVehicleHistoricalStateVectorByVehicleId(int requestId, int vehicleId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      send_queryVehicleHistoricalStateVectorByVehicleId(requestId, vehicleId, startTime, endTime);
      return recv_queryVehicleHistoricalStateVectorByVehicleId();
    }

    public void send_queryVehicleHistoricalStateVectorByVehicleId(int requestId, int vehicleId, long startTime, long endTime) throws org.apache.thrift.TException
    {
      queryVehicleHistoricalStateVectorByVehicleId_args args = new queryVehicleHistoricalStateVectorByVehicleId_args();
      args.setRequestId(requestId);
      args.setVehicleId(vehicleId);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("queryVehicleHistoricalStateVectorByVehicleId", args);
    }

    public List<com.afarcloud.thrift.StateVector> recv_queryVehicleHistoricalStateVectorByVehicleId() throws org.apache.thrift.TException
    {
      queryVehicleHistoricalStateVectorByVehicleId_result result = new queryVehicleHistoricalStateVectorByVehicleId_result();
      receiveBase(result, "queryVehicleHistoricalStateVectorByVehicleId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryVehicleHistoricalStateVectorByVehicleId failed: unknown result");
    }

    public void storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference) throws org.apache.thrift.TException
    {
      send_storeEvent(requestId, missionId, vehicleId, subtype, description, timeReference);
    }

    public void send_storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference) throws org.apache.thrift.TException
    {
      storeEvent_args args = new storeEvent_args();
      args.setRequestId(requestId);
      args.setMissionId(missionId);
      args.setVehicleId(vehicleId);
      args.setSubtype(subtype);
      args.setDescription(description);
      args.setTimeReference(timeReference);
      sendBase("storeEvent", args);
    }

    public String ping() throws org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public String recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAllVehicles(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllVehicles_call method_call = new getAllVehicles_call(requestId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllVehicles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      public getAllVehicles_call(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllVehicles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllVehicles_args args = new getAllVehicles_args();
        args.setRequestId(requestId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.Vehicle> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllVehicles();
      }
    }

    public void getAllMissions(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllMissions_call method_call = new getAllMissions_call(requestId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllMissions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      public getAllMissions_call(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllMissions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllMissions_args args = new getAllMissions_args();
        args.setRequestId(requestId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.MissionTag> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllMissions();
      }
    }

    public void getOngoingMissions(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOngoingMissions_call method_call = new getOngoingMissions_call(requestId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOngoingMissions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      public getOngoingMissions_call(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOngoingMissions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOngoingMissions_args args = new getOngoingMissions_args();
        args.setRequestId(requestId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.MissionTag> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOngoingMissions();
      }
    }

    public void getMissionById(int requestId, int missionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMissionById_call method_call = new getMissionById_call(requestId, missionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMissionById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int missionId;
      public getMissionById_call(int requestId, int missionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.missionId = missionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMissionById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMissionById_args args = new getMissionById_args();
        args.setRequestId(requestId);
        args.setMissionId(missionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.afarcloud.thrift.Mission getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMissionById();
      }
    }

    public void getVehicle(int requestId, int vid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVehicle_call method_call = new getVehicle_call(requestId, vid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVehicle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int vid;
      public getVehicle_call(int requestId, int vid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.vid = vid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVehicle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVehicle_args args = new getVehicle_args();
        args.setRequestId(requestId);
        args.setVid(vid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.afarcloud.thrift.Vehicle getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVehicle();
      }
    }

    public void getPartfield(int requestId, int partfieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPartfield_call method_call = new getPartfield_call(requestId, partfieldId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPartfield_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int partfieldId;
      public getPartfield_call(int requestId, int partfieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.partfieldId = partfieldId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPartfield", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPartfield_args args = new getPartfield_args();
        args.setRequestId(requestId);
        args.setPartfieldId(partfieldId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.afarcloud.thrift.PartField getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPartfield();
      }
    }

    public void getAllPartfields(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllPartfields_call method_call = new getAllPartfields_call(requestId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllPartfields_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      public getAllPartfields_call(int requestId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllPartfields", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllPartfields_args args = new getAllPartfields_args();
        args.setRequestId(requestId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.PartField> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllPartfields();
      }
    }

    public void querySensorLastDataPF(int requestId, int partfieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorLastDataPF_call method_call = new querySensorLastDataPF_call(requestId, partfieldId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorLastDataPF_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int partfieldId;
      public querySensorLastDataPF_call(int requestId, int partfieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.partfieldId = partfieldId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorLastDataPF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorLastDataPF_args args = new querySensorLastDataPF_args();
        args.setRequestId(requestId);
        args.setPartfieldId(partfieldId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorLastDataPF();
      }
    }

    public void querySensorLastDataBySensorUid(int requestId, String sensorUid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorLastDataBySensorUid_call method_call = new querySensorLastDataBySensorUid_call(requestId, sensorUid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorLastDataBySensorUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private String sensorUid;
      public querySensorLastDataBySensorUid_call(int requestId, String sensorUid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.sensorUid = sensorUid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorLastDataBySensorUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorLastDataBySensorUid_args args = new querySensorLastDataBySensorUid_args();
        args.setRequestId(requestId);
        args.setSensorUid(sensorUid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorLastDataBySensorUid();
      }
    }

    public void querySensorLastDataBySensorTypePF(int requestId, int partfieldId, com.afarcloud.thrift.SensorType sensorType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorLastDataBySensorTypePF_call method_call = new querySensorLastDataBySensorTypePF_call(requestId, partfieldId, sensorType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorLastDataBySensorTypePF_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int partfieldId;
      private com.afarcloud.thrift.SensorType sensorType;
      public querySensorLastDataBySensorTypePF_call(int requestId, int partfieldId, com.afarcloud.thrift.SensorType sensorType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.partfieldId = partfieldId;
        this.sensorType = sensorType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorLastDataBySensorTypePF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorLastDataBySensorTypePF_args args = new querySensorLastDataBySensorTypePF_args();
        args.setRequestId(requestId);
        args.setPartfieldId(partfieldId);
        args.setSensorType(sensorType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorLastDataBySensorTypePF();
      }
    }

    public void querySensorLastDataByObservationTypePF(int requestId, int partfieldId, com.afarcloud.thrift.ObservationType obserType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorLastDataByObservationTypePF_call method_call = new querySensorLastDataByObservationTypePF_call(requestId, partfieldId, obserType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorLastDataByObservationTypePF_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int partfieldId;
      private com.afarcloud.thrift.ObservationType obserType;
      public querySensorLastDataByObservationTypePF_call(int requestId, int partfieldId, com.afarcloud.thrift.ObservationType obserType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.partfieldId = partfieldId;
        this.obserType = obserType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorLastDataByObservationTypePF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorLastDataByObservationTypePF_args args = new querySensorLastDataByObservationTypePF_args();
        args.setRequestId(requestId);
        args.setPartfieldId(partfieldId);
        args.setObserType(obserType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorLastDataByObservationTypePF();
      }
    }

    public void querySensorLastDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorLastDataC_call method_call = new querySensorLastDataC_call(requestId, regionCentre, radius, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorLastDataC_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      public querySensorLastDataC_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorLastDataC", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorLastDataC_args args = new querySensorLastDataC_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorLastDataC();
      }
    }

    public void querySensorLastDataBySensorTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorLastDataBySensorTypeC_call method_call = new querySensorLastDataBySensorTypeC_call(requestId, regionCentre, radius, sensorType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorLastDataBySensorTypeC_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      private com.afarcloud.thrift.SensorType sensorType;
      public querySensorLastDataBySensorTypeC_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
        this.sensorType = sensorType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorLastDataBySensorTypeC", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorLastDataBySensorTypeC_args args = new querySensorLastDataBySensorTypeC_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.setSensorType(sensorType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorLastDataBySensorTypeC();
      }
    }

    public void querySensorLastDataByObservationTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorLastDataByObservationTypeC_call method_call = new querySensorLastDataByObservationTypeC_call(requestId, regionCentre, radius, obserType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorLastDataByObservationTypeC_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      private com.afarcloud.thrift.ObservationType obserType;
      public querySensorLastDataByObservationTypeC_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
        this.obserType = obserType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorLastDataByObservationTypeC", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorLastDataByObservationTypeC_args args = new querySensorLastDataByObservationTypeC_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.setObserType(obserType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorLastDataByObservationTypeC();
      }
    }

    public void queryCollarLastDataPF(int requestId, int partfieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCollarLastDataPF_call method_call = new queryCollarLastDataPF_call(requestId, partfieldId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCollarLastDataPF_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int partfieldId;
      public queryCollarLastDataPF_call(int requestId, int partfieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.partfieldId = partfieldId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCollarLastDataPF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCollarLastDataPF_args args = new queryCollarLastDataPF_args();
        args.setRequestId(requestId);
        args.setPartfieldId(partfieldId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.CollarData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCollarLastDataPF();
      }
    }

    public void queryCollarLastDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCollarLastDataC_call method_call = new queryCollarLastDataC_call(requestId, regionCentre, radius, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCollarLastDataC_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      public queryCollarLastDataC_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCollarLastDataC", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCollarLastDataC_args args = new queryCollarLastDataC_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.CollarData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCollarLastDataC();
      }
    }

    public void queryCollarLastDataByCollarUid(int requestId, String collarUid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCollarLastDataByCollarUid_call method_call = new queryCollarLastDataByCollarUid_call(requestId, collarUid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCollarLastDataByCollarUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private String collarUid;
      public queryCollarLastDataByCollarUid_call(int requestId, String collarUid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.collarUid = collarUid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCollarLastDataByCollarUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCollarLastDataByCollarUid_args args = new queryCollarLastDataByCollarUid_args();
        args.setRequestId(requestId);
        args.setCollarUid(collarUid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.CollarData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCollarLastDataByCollarUid();
      }
    }

    public void queryVehicleLastStateVectorPF(int requestId, int partfieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryVehicleLastStateVectorPF_call method_call = new queryVehicleLastStateVectorPF_call(requestId, partfieldId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryVehicleLastStateVectorPF_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int partfieldId;
      public queryVehicleLastStateVectorPF_call(int requestId, int partfieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.partfieldId = partfieldId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryVehicleLastStateVectorPF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryVehicleLastStateVectorPF_args args = new queryVehicleLastStateVectorPF_args();
        args.setRequestId(requestId);
        args.setPartfieldId(partfieldId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.StateVector> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryVehicleLastStateVectorPF();
      }
    }

    public void queryVehicleLastStateVectorC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryVehicleLastStateVectorC_call method_call = new queryVehicleLastStateVectorC_call(requestId, regionCentre, radius, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryVehicleLastStateVectorC_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      public queryVehicleLastStateVectorC_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryVehicleLastStateVectorC", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryVehicleLastStateVectorC_args args = new queryVehicleLastStateVectorC_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.StateVector> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryVehicleLastStateVectorC();
      }
    }

    public void queryVehicleLastStateVectorByVehicleId(int requestId, int vehicleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryVehicleLastStateVectorByVehicleId_call method_call = new queryVehicleLastStateVectorByVehicleId_call(requestId, vehicleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryVehicleLastStateVectorByVehicleId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int vehicleId;
      public queryVehicleLastStateVectorByVehicleId_call(int requestId, int vehicleId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.vehicleId = vehicleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryVehicleLastStateVectorByVehicleId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryVehicleLastStateVectorByVehicleId_args args = new queryVehicleLastStateVectorByVehicleId_args();
        args.setRequestId(requestId);
        args.setVehicleId(vehicleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.StateVector> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryVehicleLastStateVectorByVehicleId();
      }
    }

    public void queryDetectedStuffOnTheFarm(int requestId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryDetectedStuffOnTheFarm_call method_call = new queryDetectedStuffOnTheFarm_call(requestId, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryDetectedStuffOnTheFarm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private long startTime;
      private long endTime;
      public queryDetectedStuffOnTheFarm_call(int requestId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryDetectedStuffOnTheFarm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryDetectedStuffOnTheFarm_args args = new queryDetectedStuffOnTheFarm_args();
        args.setRequestId(requestId);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.DetectionRegion> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryDetectedStuffOnTheFarm();
      }
    }

    public void querySensorHistoricalDataPF(int requestId, int partfieldId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorHistoricalDataPF_call method_call = new querySensorHistoricalDataPF_call(requestId, partfieldId, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorHistoricalDataPF_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int partfieldId;
      private long startTime;
      private long endTime;
      public querySensorHistoricalDataPF_call(int requestId, int partfieldId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.partfieldId = partfieldId;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorHistoricalDataPF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorHistoricalDataPF_args args = new querySensorHistoricalDataPF_args();
        args.setRequestId(requestId);
        args.setPartfieldId(partfieldId);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorHistoricalDataPF();
      }
    }

    public void querySensorHistoricalDataBySensorUid(int requestId, String sensorUid, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorHistoricalDataBySensorUid_call method_call = new querySensorHistoricalDataBySensorUid_call(requestId, sensorUid, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorHistoricalDataBySensorUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private String sensorUid;
      private long startTime;
      private long endTime;
      public querySensorHistoricalDataBySensorUid_call(int requestId, String sensorUid, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.sensorUid = sensorUid;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorHistoricalDataBySensorUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorHistoricalDataBySensorUid_args args = new querySensorHistoricalDataBySensorUid_args();
        args.setRequestId(requestId);
        args.setSensorUid(sensorUid);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorHistoricalDataBySensorUid();
      }
    }

    public void querySensorHistoricalDataBySensorTypePF(int requestId, int partfieldId, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorHistoricalDataBySensorTypePF_call method_call = new querySensorHistoricalDataBySensorTypePF_call(requestId, partfieldId, sensorType, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorHistoricalDataBySensorTypePF_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int partfieldId;
      private com.afarcloud.thrift.SensorType sensorType;
      private long startTime;
      private long endTime;
      public querySensorHistoricalDataBySensorTypePF_call(int requestId, int partfieldId, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.partfieldId = partfieldId;
        this.sensorType = sensorType;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorHistoricalDataBySensorTypePF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorHistoricalDataBySensorTypePF_args args = new querySensorHistoricalDataBySensorTypePF_args();
        args.setRequestId(requestId);
        args.setPartfieldId(partfieldId);
        args.setSensorType(sensorType);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorHistoricalDataBySensorTypePF();
      }
    }

    public void querySensorHistoricalDataByObservationTypePF(int requestId, int partfieldId, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorHistoricalDataByObservationTypePF_call method_call = new querySensorHistoricalDataByObservationTypePF_call(requestId, partfieldId, obserType, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorHistoricalDataByObservationTypePF_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int partfieldId;
      private com.afarcloud.thrift.ObservationType obserType;
      private long startTime;
      private long endTime;
      public querySensorHistoricalDataByObservationTypePF_call(int requestId, int partfieldId, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.partfieldId = partfieldId;
        this.obserType = obserType;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorHistoricalDataByObservationTypePF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorHistoricalDataByObservationTypePF_args args = new querySensorHistoricalDataByObservationTypePF_args();
        args.setRequestId(requestId);
        args.setPartfieldId(partfieldId);
        args.setObserType(obserType);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorHistoricalDataByObservationTypePF();
      }
    }

    public void querySensorHistoricalDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorHistoricalDataC_call method_call = new querySensorHistoricalDataC_call(requestId, regionCentre, radius, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorHistoricalDataC_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      private long startTime;
      private long endTime;
      public querySensorHistoricalDataC_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorHistoricalDataC", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorHistoricalDataC_args args = new querySensorHistoricalDataC_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorHistoricalDataC();
      }
    }

    public void querySensorHistoricalDataBySensorTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorHistoricalDataBySensorTypeC_call method_call = new querySensorHistoricalDataBySensorTypeC_call(requestId, regionCentre, radius, sensorType, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorHistoricalDataBySensorTypeC_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      private com.afarcloud.thrift.SensorType sensorType;
      private long startTime;
      private long endTime;
      public querySensorHistoricalDataBySensorTypeC_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.SensorType sensorType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
        this.sensorType = sensorType;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorHistoricalDataBySensorTypeC", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorHistoricalDataBySensorTypeC_args args = new querySensorHistoricalDataBySensorTypeC_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.setSensorType(sensorType);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorHistoricalDataBySensorTypeC();
      }
    }

    public void querySensorHistoricalDataByObservationTypeC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySensorHistoricalDataByObservationTypeC_call method_call = new querySensorHistoricalDataByObservationTypeC_call(requestId, regionCentre, radius, obserType, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySensorHistoricalDataByObservationTypeC_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      private com.afarcloud.thrift.ObservationType obserType;
      private long startTime;
      private long endTime;
      public querySensorHistoricalDataByObservationTypeC_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, com.afarcloud.thrift.ObservationType obserType, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
        this.obserType = obserType;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySensorHistoricalDataByObservationTypeC", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySensorHistoricalDataByObservationTypeC_args args = new querySensorHistoricalDataByObservationTypeC_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.setObserType(obserType);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.SensorData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySensorHistoricalDataByObservationTypeC();
      }
    }

    public void queryCollarHistoricalDataPF(int requestId, int partfieldId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCollarHistoricalDataPF_call method_call = new queryCollarHistoricalDataPF_call(requestId, partfieldId, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCollarHistoricalDataPF_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int partfieldId;
      private long startTime;
      private long endTime;
      public queryCollarHistoricalDataPF_call(int requestId, int partfieldId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.partfieldId = partfieldId;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCollarHistoricalDataPF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCollarHistoricalDataPF_args args = new queryCollarHistoricalDataPF_args();
        args.setRequestId(requestId);
        args.setPartfieldId(partfieldId);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.CollarData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCollarHistoricalDataPF();
      }
    }

    public void queryCollarHistoricalDataC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCollarHistoricalDataC_call method_call = new queryCollarHistoricalDataC_call(requestId, regionCentre, radius, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCollarHistoricalDataC_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      private long startTime;
      private long endTime;
      public queryCollarHistoricalDataC_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCollarHistoricalDataC", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCollarHistoricalDataC_args args = new queryCollarHistoricalDataC_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.CollarData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCollarHistoricalDataC();
      }
    }

    public void queryCollarHistoricalDataByCollarUid(int requestId, String collarUid, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCollarHistoricalDataByCollarUid_call method_call = new queryCollarHistoricalDataByCollarUid_call(requestId, collarUid, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCollarHistoricalDataByCollarUid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private String collarUid;
      private long startTime;
      private long endTime;
      public queryCollarHistoricalDataByCollarUid_call(int requestId, String collarUid, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.collarUid = collarUid;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCollarHistoricalDataByCollarUid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCollarHistoricalDataByCollarUid_args args = new queryCollarHistoricalDataByCollarUid_args();
        args.setRequestId(requestId);
        args.setCollarUid(collarUid);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.CollarData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCollarHistoricalDataByCollarUid();
      }
    }

    public void queryVehicleHistoricalStateVectorsPF(int requestId, int partfieldId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryVehicleHistoricalStateVectorsPF_call method_call = new queryVehicleHistoricalStateVectorsPF_call(requestId, partfieldId, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryVehicleHistoricalStateVectorsPF_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int partfieldId;
      private long startTime;
      private long endTime;
      public queryVehicleHistoricalStateVectorsPF_call(int requestId, int partfieldId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.partfieldId = partfieldId;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryVehicleHistoricalStateVectorsPF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryVehicleHistoricalStateVectorsPF_args args = new queryVehicleHistoricalStateVectorsPF_args();
        args.setRequestId(requestId);
        args.setPartfieldId(partfieldId);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.StateVector> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryVehicleHistoricalStateVectorsPF();
      }
    }

    public void queryVehicleHistoricalStateVectorsC(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryVehicleHistoricalStateVectorsC_call method_call = new queryVehicleHistoricalStateVectorsC_call(requestId, regionCentre, radius, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryVehicleHistoricalStateVectorsC_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private com.afarcloud.thrift.Position regionCentre;
      private int radius;
      private long startTime;
      private long endTime;
      public queryVehicleHistoricalStateVectorsC_call(int requestId, com.afarcloud.thrift.Position regionCentre, int radius, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.regionCentre = regionCentre;
        this.radius = radius;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryVehicleHistoricalStateVectorsC", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryVehicleHistoricalStateVectorsC_args args = new queryVehicleHistoricalStateVectorsC_args();
        args.setRequestId(requestId);
        args.setRegionCentre(regionCentre);
        args.setRadius(radius);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.StateVector> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryVehicleHistoricalStateVectorsC();
      }
    }

    public void queryVehicleHistoricalStateVectorByVehicleId(int requestId, int vehicleId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryVehicleHistoricalStateVectorByVehicleId_call method_call = new queryVehicleHistoricalStateVectorByVehicleId_call(requestId, vehicleId, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryVehicleHistoricalStateVectorByVehicleId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int vehicleId;
      private long startTime;
      private long endTime;
      public queryVehicleHistoricalStateVectorByVehicleId_call(int requestId, int vehicleId, long startTime, long endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.vehicleId = vehicleId;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryVehicleHistoricalStateVectorByVehicleId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryVehicleHistoricalStateVectorByVehicleId_args args = new queryVehicleHistoricalStateVectorByVehicleId_args();
        args.setRequestId(requestId);
        args.setVehicleId(vehicleId);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.afarcloud.thrift.StateVector> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryVehicleHistoricalStateVectorByVehicleId();
      }
    }

    public void storeEvent(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeEvent_call method_call = new storeEvent_call(requestId, missionId, vehicleId, subtype, description, timeReference, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requestId;
      private int missionId;
      private int vehicleId;
      private int subtype;
      private String description;
      private long timeReference;
      public storeEvent_call(int requestId, int missionId, int vehicleId, int subtype, String description, long timeReference, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.requestId = requestId;
        this.missionId = missionId;
        this.vehicleId = vehicleId;
        this.subtype = subtype;
        this.description = description;
        this.timeReference = timeReference;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeEvent", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        storeEvent_args args = new storeEvent_args();
        args.setRequestId(requestId);
        args.setMissionId(missionId);
        args.setVehicleId(vehicleId);
        args.setSubtype(subtype);
        args.setDescription(description);
        args.setTimeReference(timeReference);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllVehicles", new getAllVehicles());
      processMap.put("getAllMissions", new getAllMissions());
      processMap.put("getOngoingMissions", new getOngoingMissions());
      processMap.put("getMissionById", new getMissionById());
      processMap.put("getVehicle", new getVehicle());
      processMap.put("getPartfield", new getPartfield());
      processMap.put("getAllPartfields", new getAllPartfields());
      processMap.put("querySensorLastDataPF", new querySensorLastDataPF());
      processMap.put("querySensorLastDataBySensorUid", new querySensorLastDataBySensorUid());
      processMap.put("querySensorLastDataBySensorTypePF", new querySensorLastDataBySensorTypePF());
      processMap.put("querySensorLastDataByObservationTypePF", new querySensorLastDataByObservationTypePF());
      processMap.put("querySensorLastDataC", new querySensorLastDataC());
      processMap.put("querySensorLastDataBySensorTypeC", new querySensorLastDataBySensorTypeC());
      processMap.put("querySensorLastDataByObservationTypeC", new querySensorLastDataByObservationTypeC());
      processMap.put("queryCollarLastDataPF", new queryCollarLastDataPF());
      processMap.put("queryCollarLastDataC", new queryCollarLastDataC());
      processMap.put("queryCollarLastDataByCollarUid", new queryCollarLastDataByCollarUid());
      processMap.put("queryVehicleLastStateVectorPF", new queryVehicleLastStateVectorPF());
      processMap.put("queryVehicleLastStateVectorC", new queryVehicleLastStateVectorC());
      processMap.put("queryVehicleLastStateVectorByVehicleId", new queryVehicleLastStateVectorByVehicleId());
      processMap.put("queryDetectedStuffOnTheFarm", new queryDetectedStuffOnTheFarm());
      processMap.put("querySensorHistoricalDataPF", new querySensorHistoricalDataPF());
      processMap.put("querySensorHistoricalDataBySensorUid", new querySensorHistoricalDataBySensorUid());
      processMap.put("querySensorHistoricalDataBySensorTypePF", new querySensorHistoricalDataBySensorTypePF());
      processMap.put("querySensorHistoricalDataByObservationTypePF", new querySensorHistoricalDataByObservationTypePF());
      processMap.put("querySensorHistoricalDataC", new querySensorHistoricalDataC());
      processMap.put("querySensorHistoricalDataBySensorTypeC", new querySensorHistoricalDataBySensorTypeC());
      processMap.put("querySensorHistoricalDataByObservationTypeC", new querySensorHistoricalDataByObservationTypeC());
      processMap.put("queryCollarHistoricalDataPF", new queryCollarHistoricalDataPF());
      processMap.put("queryCollarHistoricalDataC", new queryCollarHistoricalDataC());
      processMap.put("queryCollarHistoricalDataByCollarUid", new queryCollarHistoricalDataByCollarUid());
      processMap.put("queryVehicleHistoricalStateVectorsPF", new queryVehicleHistoricalStateVectorsPF());
      processMap.put("queryVehicleHistoricalStateVectorsC", new queryVehicleHistoricalStateVectorsC());
      processMap.put("queryVehicleHistoricalStateVectorByVehicleId", new queryVehicleHistoricalStateVectorByVehicleId());
      processMap.put("storeEvent", new storeEvent());
      processMap.put("ping", new ping());
      return processMap;
    }

    public static class getAllVehicles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllVehicles_args> {
      public getAllVehicles() {
        super("getAllVehicles");
      }

      public getAllVehicles_args getEmptyArgsInstance() {
        return new getAllVehicles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllVehicles_result getResult(I iface, getAllVehicles_args args) throws org.apache.thrift.TException {
        getAllVehicles_result result = new getAllVehicles_result();
        result.success = iface.getAllVehicles(args.requestId);
        return result;
      }
    }

    public static class getAllMissions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllMissions_args> {
      public getAllMissions() {
        super("getAllMissions");
      }

      public getAllMissions_args getEmptyArgsInstance() {
        return new getAllMissions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllMissions_result getResult(I iface, getAllMissions_args args) throws org.apache.thrift.TException {
        getAllMissions_result result = new getAllMissions_result();
        result.success = iface.getAllMissions(args.requestId);
        return result;
      }
    }

    public static class getOngoingMissions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOngoingMissions_args> {
      public getOngoingMissions() {
        super("getOngoingMissions");
      }

      public getOngoingMissions_args getEmptyArgsInstance() {
        return new getOngoingMissions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOngoingMissions_result getResult(I iface, getOngoingMissions_args args) throws org.apache.thrift.TException {
        getOngoingMissions_result result = new getOngoingMissions_result();
        result.success = iface.getOngoingMissions(args.requestId);
        return result;
      }
    }

    public static class getMissionById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMissionById_args> {
      public getMissionById() {
        super("getMissionById");
      }

      public getMissionById_args getEmptyArgsInstance() {
        return new getMissionById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMissionById_result getResult(I iface, getMissionById_args args) throws org.apache.thrift.TException {
        getMissionById_result result = new getMissionById_result();
        result.success = iface.getMissionById(args.requestId, args.missionId);
        return result;
      }
    }

    public static class getVehicle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVehicle_args> {
      public getVehicle() {
        super("getVehicle");
      }

      public getVehicle_args getEmptyArgsInstance() {
        return new getVehicle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVehicle_result getResult(I iface, getVehicle_args args) throws org.apache.thrift.TException {
        getVehicle_result result = new getVehicle_result();
        result.success = iface.getVehicle(args.requestId, args.vid);
        return result;
      }
    }

    public static class getPartfield<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPartfield_args> {
      public getPartfield() {
        super("getPartfield");
      }

      public getPartfield_args getEmptyArgsInstance() {
        return new getPartfield_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPartfield_result getResult(I iface, getPartfield_args args) throws org.apache.thrift.TException {
        getPartfield_result result = new getPartfield_result();
        result.success = iface.getPartfield(args.requestId, args.partfieldId);
        return result;
      }
    }

    public static class getAllPartfields<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllPartfields_args> {
      public getAllPartfields() {
        super("getAllPartfields");
      }

      public getAllPartfields_args getEmptyArgsInstance() {
        return new getAllPartfields_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllPartfields_result getResult(I iface, getAllPartfields_args args) throws org.apache.thrift.TException {
        getAllPartfields_result result = new getAllPartfields_result();
        result.success = iface.getAllPartfields(args.requestId);
        return result;
      }
    }

    public static class querySensorLastDataPF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorLastDataPF_args> {
      public querySensorLastDataPF() {
        super("querySensorLastDataPF");
      }

      public querySensorLastDataPF_args getEmptyArgsInstance() {
        return new querySensorLastDataPF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorLastDataPF_result getResult(I iface, querySensorLastDataPF_args args) throws org.apache.thrift.TException {
        querySensorLastDataPF_result result = new querySensorLastDataPF_result();
        result.success = iface.querySensorLastDataPF(args.requestId, args.partfieldId);
        return result;
      }
    }

    public static class querySensorLastDataBySensorUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorLastDataBySensorUid_args> {
      public querySensorLastDataBySensorUid() {
        super("querySensorLastDataBySensorUid");
      }

      public querySensorLastDataBySensorUid_args getEmptyArgsInstance() {
        return new querySensorLastDataBySensorUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorLastDataBySensorUid_result getResult(I iface, querySensorLastDataBySensorUid_args args) throws org.apache.thrift.TException {
        querySensorLastDataBySensorUid_result result = new querySensorLastDataBySensorUid_result();
        result.success = iface.querySensorLastDataBySensorUid(args.requestId, args.sensorUid);
        return result;
      }
    }

    public static class querySensorLastDataBySensorTypePF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorLastDataBySensorTypePF_args> {
      public querySensorLastDataBySensorTypePF() {
        super("querySensorLastDataBySensorTypePF");
      }

      public querySensorLastDataBySensorTypePF_args getEmptyArgsInstance() {
        return new querySensorLastDataBySensorTypePF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorLastDataBySensorTypePF_result getResult(I iface, querySensorLastDataBySensorTypePF_args args) throws org.apache.thrift.TException {
        querySensorLastDataBySensorTypePF_result result = new querySensorLastDataBySensorTypePF_result();
        result.success = iface.querySensorLastDataBySensorTypePF(args.requestId, args.partfieldId, args.sensorType);
        return result;
      }
    }

    public static class querySensorLastDataByObservationTypePF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorLastDataByObservationTypePF_args> {
      public querySensorLastDataByObservationTypePF() {
        super("querySensorLastDataByObservationTypePF");
      }

      public querySensorLastDataByObservationTypePF_args getEmptyArgsInstance() {
        return new querySensorLastDataByObservationTypePF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorLastDataByObservationTypePF_result getResult(I iface, querySensorLastDataByObservationTypePF_args args) throws org.apache.thrift.TException {
        querySensorLastDataByObservationTypePF_result result = new querySensorLastDataByObservationTypePF_result();
        result.success = iface.querySensorLastDataByObservationTypePF(args.requestId, args.partfieldId, args.obserType);
        return result;
      }
    }

    public static class querySensorLastDataC<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorLastDataC_args> {
      public querySensorLastDataC() {
        super("querySensorLastDataC");
      }

      public querySensorLastDataC_args getEmptyArgsInstance() {
        return new querySensorLastDataC_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorLastDataC_result getResult(I iface, querySensorLastDataC_args args) throws org.apache.thrift.TException {
        querySensorLastDataC_result result = new querySensorLastDataC_result();
        result.success = iface.querySensorLastDataC(args.requestId, args.regionCentre, args.radius);
        return result;
      }
    }

    public static class querySensorLastDataBySensorTypeC<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorLastDataBySensorTypeC_args> {
      public querySensorLastDataBySensorTypeC() {
        super("querySensorLastDataBySensorTypeC");
      }

      public querySensorLastDataBySensorTypeC_args getEmptyArgsInstance() {
        return new querySensorLastDataBySensorTypeC_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorLastDataBySensorTypeC_result getResult(I iface, querySensorLastDataBySensorTypeC_args args) throws org.apache.thrift.TException {
        querySensorLastDataBySensorTypeC_result result = new querySensorLastDataBySensorTypeC_result();
        result.success = iface.querySensorLastDataBySensorTypeC(args.requestId, args.regionCentre, args.radius, args.sensorType);
        return result;
      }
    }

    public static class querySensorLastDataByObservationTypeC<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorLastDataByObservationTypeC_args> {
      public querySensorLastDataByObservationTypeC() {
        super("querySensorLastDataByObservationTypeC");
      }

      public querySensorLastDataByObservationTypeC_args getEmptyArgsInstance() {
        return new querySensorLastDataByObservationTypeC_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorLastDataByObservationTypeC_result getResult(I iface, querySensorLastDataByObservationTypeC_args args) throws org.apache.thrift.TException {
        querySensorLastDataByObservationTypeC_result result = new querySensorLastDataByObservationTypeC_result();
        result.success = iface.querySensorLastDataByObservationTypeC(args.requestId, args.regionCentre, args.radius, args.obserType);
        return result;
      }
    }

    public static class queryCollarLastDataPF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCollarLastDataPF_args> {
      public queryCollarLastDataPF() {
        super("queryCollarLastDataPF");
      }

      public queryCollarLastDataPF_args getEmptyArgsInstance() {
        return new queryCollarLastDataPF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCollarLastDataPF_result getResult(I iface, queryCollarLastDataPF_args args) throws org.apache.thrift.TException {
        queryCollarLastDataPF_result result = new queryCollarLastDataPF_result();
        result.success = iface.queryCollarLastDataPF(args.requestId, args.partfieldId);
        return result;
      }
    }

    public static class queryCollarLastDataC<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCollarLastDataC_args> {
      public queryCollarLastDataC() {
        super("queryCollarLastDataC");
      }

      public queryCollarLastDataC_args getEmptyArgsInstance() {
        return new queryCollarLastDataC_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCollarLastDataC_result getResult(I iface, queryCollarLastDataC_args args) throws org.apache.thrift.TException {
        queryCollarLastDataC_result result = new queryCollarLastDataC_result();
        result.success = iface.queryCollarLastDataC(args.requestId, args.regionCentre, args.radius);
        return result;
      }
    }

    public static class queryCollarLastDataByCollarUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCollarLastDataByCollarUid_args> {
      public queryCollarLastDataByCollarUid() {
        super("queryCollarLastDataByCollarUid");
      }

      public queryCollarLastDataByCollarUid_args getEmptyArgsInstance() {
        return new queryCollarLastDataByCollarUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCollarLastDataByCollarUid_result getResult(I iface, queryCollarLastDataByCollarUid_args args) throws org.apache.thrift.TException {
        queryCollarLastDataByCollarUid_result result = new queryCollarLastDataByCollarUid_result();
        result.success = iface.queryCollarLastDataByCollarUid(args.requestId, args.collarUid);
        return result;
      }
    }

    public static class queryVehicleLastStateVectorPF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryVehicleLastStateVectorPF_args> {
      public queryVehicleLastStateVectorPF() {
        super("queryVehicleLastStateVectorPF");
      }

      public queryVehicleLastStateVectorPF_args getEmptyArgsInstance() {
        return new queryVehicleLastStateVectorPF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryVehicleLastStateVectorPF_result getResult(I iface, queryVehicleLastStateVectorPF_args args) throws org.apache.thrift.TException {
        queryVehicleLastStateVectorPF_result result = new queryVehicleLastStateVectorPF_result();
        result.success = iface.queryVehicleLastStateVectorPF(args.requestId, args.partfieldId);
        return result;
      }
    }

    public static class queryVehicleLastStateVectorC<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryVehicleLastStateVectorC_args> {
      public queryVehicleLastStateVectorC() {
        super("queryVehicleLastStateVectorC");
      }

      public queryVehicleLastStateVectorC_args getEmptyArgsInstance() {
        return new queryVehicleLastStateVectorC_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryVehicleLastStateVectorC_result getResult(I iface, queryVehicleLastStateVectorC_args args) throws org.apache.thrift.TException {
        queryVehicleLastStateVectorC_result result = new queryVehicleLastStateVectorC_result();
        result.success = iface.queryVehicleLastStateVectorC(args.requestId, args.regionCentre, args.radius);
        return result;
      }
    }

    public static class queryVehicleLastStateVectorByVehicleId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryVehicleLastStateVectorByVehicleId_args> {
      public queryVehicleLastStateVectorByVehicleId() {
        super("queryVehicleLastStateVectorByVehicleId");
      }

      public queryVehicleLastStateVectorByVehicleId_args getEmptyArgsInstance() {
        return new queryVehicleLastStateVectorByVehicleId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryVehicleLastStateVectorByVehicleId_result getResult(I iface, queryVehicleLastStateVectorByVehicleId_args args) throws org.apache.thrift.TException {
        queryVehicleLastStateVectorByVehicleId_result result = new queryVehicleLastStateVectorByVehicleId_result();
        result.success = iface.queryVehicleLastStateVectorByVehicleId(args.requestId, args.vehicleId);
        return result;
      }
    }

    public static class queryDetectedStuffOnTheFarm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryDetectedStuffOnTheFarm_args> {
      public queryDetectedStuffOnTheFarm() {
        super("queryDetectedStuffOnTheFarm");
      }

      public queryDetectedStuffOnTheFarm_args getEmptyArgsInstance() {
        return new queryDetectedStuffOnTheFarm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryDetectedStuffOnTheFarm_result getResult(I iface, queryDetectedStuffOnTheFarm_args args) throws org.apache.thrift.TException {
        queryDetectedStuffOnTheFarm_result result = new queryDetectedStuffOnTheFarm_result();
        result.success = iface.queryDetectedStuffOnTheFarm(args.requestId, args.startTime, args.endTime);
        return result;
      }
    }

    public static class querySensorHistoricalDataPF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorHistoricalDataPF_args> {
      public querySensorHistoricalDataPF() {
        super("querySensorHistoricalDataPF");
      }

      public querySensorHistoricalDataPF_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataPF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorHistoricalDataPF_result getResult(I iface, querySensorHistoricalDataPF_args args) throws org.apache.thrift.TException {
        querySensorHistoricalDataPF_result result = new querySensorHistoricalDataPF_result();
        result.success = iface.querySensorHistoricalDataPF(args.requestId, args.partfieldId, args.startTime, args.endTime);
        return result;
      }
    }

    public static class querySensorHistoricalDataBySensorUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorHistoricalDataBySensorUid_args> {
      public querySensorHistoricalDataBySensorUid() {
        super("querySensorHistoricalDataBySensorUid");
      }

      public querySensorHistoricalDataBySensorUid_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataBySensorUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorHistoricalDataBySensorUid_result getResult(I iface, querySensorHistoricalDataBySensorUid_args args) throws org.apache.thrift.TException {
        querySensorHistoricalDataBySensorUid_result result = new querySensorHistoricalDataBySensorUid_result();
        result.success = iface.querySensorHistoricalDataBySensorUid(args.requestId, args.sensorUid, args.startTime, args.endTime);
        return result;
      }
    }

    public static class querySensorHistoricalDataBySensorTypePF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorHistoricalDataBySensorTypePF_args> {
      public querySensorHistoricalDataBySensorTypePF() {
        super("querySensorHistoricalDataBySensorTypePF");
      }

      public querySensorHistoricalDataBySensorTypePF_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataBySensorTypePF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorHistoricalDataBySensorTypePF_result getResult(I iface, querySensorHistoricalDataBySensorTypePF_args args) throws org.apache.thrift.TException {
        querySensorHistoricalDataBySensorTypePF_result result = new querySensorHistoricalDataBySensorTypePF_result();
        result.success = iface.querySensorHistoricalDataBySensorTypePF(args.requestId, args.partfieldId, args.sensorType, args.startTime, args.endTime);
        return result;
      }
    }

    public static class querySensorHistoricalDataByObservationTypePF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorHistoricalDataByObservationTypePF_args> {
      public querySensorHistoricalDataByObservationTypePF() {
        super("querySensorHistoricalDataByObservationTypePF");
      }

      public querySensorHistoricalDataByObservationTypePF_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataByObservationTypePF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorHistoricalDataByObservationTypePF_result getResult(I iface, querySensorHistoricalDataByObservationTypePF_args args) throws org.apache.thrift.TException {
        querySensorHistoricalDataByObservationTypePF_result result = new querySensorHistoricalDataByObservationTypePF_result();
        result.success = iface.querySensorHistoricalDataByObservationTypePF(args.requestId, args.partfieldId, args.obserType, args.startTime, args.endTime);
        return result;
      }
    }

    public static class querySensorHistoricalDataC<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorHistoricalDataC_args> {
      public querySensorHistoricalDataC() {
        super("querySensorHistoricalDataC");
      }

      public querySensorHistoricalDataC_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataC_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorHistoricalDataC_result getResult(I iface, querySensorHistoricalDataC_args args) throws org.apache.thrift.TException {
        querySensorHistoricalDataC_result result = new querySensorHistoricalDataC_result();
        result.success = iface.querySensorHistoricalDataC(args.requestId, args.regionCentre, args.radius, args.startTime, args.endTime);
        return result;
      }
    }

    public static class querySensorHistoricalDataBySensorTypeC<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorHistoricalDataBySensorTypeC_args> {
      public querySensorHistoricalDataBySensorTypeC() {
        super("querySensorHistoricalDataBySensorTypeC");
      }

      public querySensorHistoricalDataBySensorTypeC_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataBySensorTypeC_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorHistoricalDataBySensorTypeC_result getResult(I iface, querySensorHistoricalDataBySensorTypeC_args args) throws org.apache.thrift.TException {
        querySensorHistoricalDataBySensorTypeC_result result = new querySensorHistoricalDataBySensorTypeC_result();
        result.success = iface.querySensorHistoricalDataBySensorTypeC(args.requestId, args.regionCentre, args.radius, args.sensorType, args.startTime, args.endTime);
        return result;
      }
    }

    public static class querySensorHistoricalDataByObservationTypeC<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySensorHistoricalDataByObservationTypeC_args> {
      public querySensorHistoricalDataByObservationTypeC() {
        super("querySensorHistoricalDataByObservationTypeC");
      }

      public querySensorHistoricalDataByObservationTypeC_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataByObservationTypeC_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySensorHistoricalDataByObservationTypeC_result getResult(I iface, querySensorHistoricalDataByObservationTypeC_args args) throws org.apache.thrift.TException {
        querySensorHistoricalDataByObservationTypeC_result result = new querySensorHistoricalDataByObservationTypeC_result();
        result.success = iface.querySensorHistoricalDataByObservationTypeC(args.requestId, args.regionCentre, args.radius, args.obserType, args.startTime, args.endTime);
        return result;
      }
    }

    public static class queryCollarHistoricalDataPF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCollarHistoricalDataPF_args> {
      public queryCollarHistoricalDataPF() {
        super("queryCollarHistoricalDataPF");
      }

      public queryCollarHistoricalDataPF_args getEmptyArgsInstance() {
        return new queryCollarHistoricalDataPF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCollarHistoricalDataPF_result getResult(I iface, queryCollarHistoricalDataPF_args args) throws org.apache.thrift.TException {
        queryCollarHistoricalDataPF_result result = new queryCollarHistoricalDataPF_result();
        result.success = iface.queryCollarHistoricalDataPF(args.requestId, args.partfieldId, args.startTime, args.endTime);
        return result;
      }
    }

    public static class queryCollarHistoricalDataC<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCollarHistoricalDataC_args> {
      public queryCollarHistoricalDataC() {
        super("queryCollarHistoricalDataC");
      }

      public queryCollarHistoricalDataC_args getEmptyArgsInstance() {
        return new queryCollarHistoricalDataC_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCollarHistoricalDataC_result getResult(I iface, queryCollarHistoricalDataC_args args) throws org.apache.thrift.TException {
        queryCollarHistoricalDataC_result result = new queryCollarHistoricalDataC_result();
        result.success = iface.queryCollarHistoricalDataC(args.requestId, args.regionCentre, args.radius, args.startTime, args.endTime);
        return result;
      }
    }

    public static class queryCollarHistoricalDataByCollarUid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCollarHistoricalDataByCollarUid_args> {
      public queryCollarHistoricalDataByCollarUid() {
        super("queryCollarHistoricalDataByCollarUid");
      }

      public queryCollarHistoricalDataByCollarUid_args getEmptyArgsInstance() {
        return new queryCollarHistoricalDataByCollarUid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCollarHistoricalDataByCollarUid_result getResult(I iface, queryCollarHistoricalDataByCollarUid_args args) throws org.apache.thrift.TException {
        queryCollarHistoricalDataByCollarUid_result result = new queryCollarHistoricalDataByCollarUid_result();
        result.success = iface.queryCollarHistoricalDataByCollarUid(args.requestId, args.collarUid, args.startTime, args.endTime);
        return result;
      }
    }

    public static class queryVehicleHistoricalStateVectorsPF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryVehicleHistoricalStateVectorsPF_args> {
      public queryVehicleHistoricalStateVectorsPF() {
        super("queryVehicleHistoricalStateVectorsPF");
      }

      public queryVehicleHistoricalStateVectorsPF_args getEmptyArgsInstance() {
        return new queryVehicleHistoricalStateVectorsPF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryVehicleHistoricalStateVectorsPF_result getResult(I iface, queryVehicleHistoricalStateVectorsPF_args args) throws org.apache.thrift.TException {
        queryVehicleHistoricalStateVectorsPF_result result = new queryVehicleHistoricalStateVectorsPF_result();
        result.success = iface.queryVehicleHistoricalStateVectorsPF(args.requestId, args.partfieldId, args.startTime, args.endTime);
        return result;
      }
    }

    public static class queryVehicleHistoricalStateVectorsC<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryVehicleHistoricalStateVectorsC_args> {
      public queryVehicleHistoricalStateVectorsC() {
        super("queryVehicleHistoricalStateVectorsC");
      }

      public queryVehicleHistoricalStateVectorsC_args getEmptyArgsInstance() {
        return new queryVehicleHistoricalStateVectorsC_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryVehicleHistoricalStateVectorsC_result getResult(I iface, queryVehicleHistoricalStateVectorsC_args args) throws org.apache.thrift.TException {
        queryVehicleHistoricalStateVectorsC_result result = new queryVehicleHistoricalStateVectorsC_result();
        result.success = iface.queryVehicleHistoricalStateVectorsC(args.requestId, args.regionCentre, args.radius, args.startTime, args.endTime);
        return result;
      }
    }

    public static class queryVehicleHistoricalStateVectorByVehicleId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryVehicleHistoricalStateVectorByVehicleId_args> {
      public queryVehicleHistoricalStateVectorByVehicleId() {
        super("queryVehicleHistoricalStateVectorByVehicleId");
      }

      public queryVehicleHistoricalStateVectorByVehicleId_args getEmptyArgsInstance() {
        return new queryVehicleHistoricalStateVectorByVehicleId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryVehicleHistoricalStateVectorByVehicleId_result getResult(I iface, queryVehicleHistoricalStateVectorByVehicleId_args args) throws org.apache.thrift.TException {
        queryVehicleHistoricalStateVectorByVehicleId_result result = new queryVehicleHistoricalStateVectorByVehicleId_result();
        result.success = iface.queryVehicleHistoricalStateVectorByVehicleId(args.requestId, args.vehicleId, args.startTime, args.endTime);
        return result;
      }
    }

    public static class storeEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeEvent_args> {
      public storeEvent() {
        super("storeEvent");
      }

      public storeEvent_args getEmptyArgsInstance() {
        return new storeEvent_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, storeEvent_args args) throws org.apache.thrift.TException {
        iface.storeEvent(args.requestId, args.missionId, args.vehicleId, args.subtype, args.description, args.timeReference);
        return null;
      }
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAllVehicles", new getAllVehicles());
      processMap.put("getAllMissions", new getAllMissions());
      processMap.put("getOngoingMissions", new getOngoingMissions());
      processMap.put("getMissionById", new getMissionById());
      processMap.put("getVehicle", new getVehicle());
      processMap.put("getPartfield", new getPartfield());
      processMap.put("getAllPartfields", new getAllPartfields());
      processMap.put("querySensorLastDataPF", new querySensorLastDataPF());
      processMap.put("querySensorLastDataBySensorUid", new querySensorLastDataBySensorUid());
      processMap.put("querySensorLastDataBySensorTypePF", new querySensorLastDataBySensorTypePF());
      processMap.put("querySensorLastDataByObservationTypePF", new querySensorLastDataByObservationTypePF());
      processMap.put("querySensorLastDataC", new querySensorLastDataC());
      processMap.put("querySensorLastDataBySensorTypeC", new querySensorLastDataBySensorTypeC());
      processMap.put("querySensorLastDataByObservationTypeC", new querySensorLastDataByObservationTypeC());
      processMap.put("queryCollarLastDataPF", new queryCollarLastDataPF());
      processMap.put("queryCollarLastDataC", new queryCollarLastDataC());
      processMap.put("queryCollarLastDataByCollarUid", new queryCollarLastDataByCollarUid());
      processMap.put("queryVehicleLastStateVectorPF", new queryVehicleLastStateVectorPF());
      processMap.put("queryVehicleLastStateVectorC", new queryVehicleLastStateVectorC());
      processMap.put("queryVehicleLastStateVectorByVehicleId", new queryVehicleLastStateVectorByVehicleId());
      processMap.put("queryDetectedStuffOnTheFarm", new queryDetectedStuffOnTheFarm());
      processMap.put("querySensorHistoricalDataPF", new querySensorHistoricalDataPF());
      processMap.put("querySensorHistoricalDataBySensorUid", new querySensorHistoricalDataBySensorUid());
      processMap.put("querySensorHistoricalDataBySensorTypePF", new querySensorHistoricalDataBySensorTypePF());
      processMap.put("querySensorHistoricalDataByObservationTypePF", new querySensorHistoricalDataByObservationTypePF());
      processMap.put("querySensorHistoricalDataC", new querySensorHistoricalDataC());
      processMap.put("querySensorHistoricalDataBySensorTypeC", new querySensorHistoricalDataBySensorTypeC());
      processMap.put("querySensorHistoricalDataByObservationTypeC", new querySensorHistoricalDataByObservationTypeC());
      processMap.put("queryCollarHistoricalDataPF", new queryCollarHistoricalDataPF());
      processMap.put("queryCollarHistoricalDataC", new queryCollarHistoricalDataC());
      processMap.put("queryCollarHistoricalDataByCollarUid", new queryCollarHistoricalDataByCollarUid());
      processMap.put("queryVehicleHistoricalStateVectorsPF", new queryVehicleHistoricalStateVectorsPF());
      processMap.put("queryVehicleHistoricalStateVectorsC", new queryVehicleHistoricalStateVectorsC());
      processMap.put("queryVehicleHistoricalStateVectorByVehicleId", new queryVehicleHistoricalStateVectorByVehicleId());
      processMap.put("storeEvent", new storeEvent());
      processMap.put("ping", new ping());
      return processMap;
    }

    public static class getAllVehicles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllVehicles_args, List<com.afarcloud.thrift.Vehicle>> {
      public getAllVehicles() {
        super("getAllVehicles");
      }

      public getAllVehicles_args getEmptyArgsInstance() {
        return new getAllVehicles_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.Vehicle>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.Vehicle>>() { 
          public void onComplete(List<com.afarcloud.thrift.Vehicle> o) {
            getAllVehicles_result result = new getAllVehicles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllVehicles_result result = new getAllVehicles_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllVehicles_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.Vehicle>> resultHandler) throws TException {
        iface.getAllVehicles(args.requestId,resultHandler);
      }
    }

    public static class getAllMissions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllMissions_args, List<com.afarcloud.thrift.MissionTag>> {
      public getAllMissions() {
        super("getAllMissions");
      }

      public getAllMissions_args getEmptyArgsInstance() {
        return new getAllMissions_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.MissionTag>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.MissionTag>>() { 
          public void onComplete(List<com.afarcloud.thrift.MissionTag> o) {
            getAllMissions_result result = new getAllMissions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllMissions_result result = new getAllMissions_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllMissions_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.MissionTag>> resultHandler) throws TException {
        iface.getAllMissions(args.requestId,resultHandler);
      }
    }

    public static class getOngoingMissions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOngoingMissions_args, List<com.afarcloud.thrift.MissionTag>> {
      public getOngoingMissions() {
        super("getOngoingMissions");
      }

      public getOngoingMissions_args getEmptyArgsInstance() {
        return new getOngoingMissions_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.MissionTag>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.MissionTag>>() { 
          public void onComplete(List<com.afarcloud.thrift.MissionTag> o) {
            getOngoingMissions_result result = new getOngoingMissions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOngoingMissions_result result = new getOngoingMissions_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOngoingMissions_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.MissionTag>> resultHandler) throws TException {
        iface.getOngoingMissions(args.requestId,resultHandler);
      }
    }

    public static class getMissionById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMissionById_args, com.afarcloud.thrift.Mission> {
      public getMissionById() {
        super("getMissionById");
      }

      public getMissionById_args getEmptyArgsInstance() {
        return new getMissionById_args();
      }

      public AsyncMethodCallback<com.afarcloud.thrift.Mission> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.afarcloud.thrift.Mission>() { 
          public void onComplete(com.afarcloud.thrift.Mission o) {
            getMissionById_result result = new getMissionById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMissionById_result result = new getMissionById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMissionById_args args, org.apache.thrift.async.AsyncMethodCallback<com.afarcloud.thrift.Mission> resultHandler) throws TException {
        iface.getMissionById(args.requestId, args.missionId,resultHandler);
      }
    }

    public static class getVehicle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVehicle_args, com.afarcloud.thrift.Vehicle> {
      public getVehicle() {
        super("getVehicle");
      }

      public getVehicle_args getEmptyArgsInstance() {
        return new getVehicle_args();
      }

      public AsyncMethodCallback<com.afarcloud.thrift.Vehicle> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.afarcloud.thrift.Vehicle>() { 
          public void onComplete(com.afarcloud.thrift.Vehicle o) {
            getVehicle_result result = new getVehicle_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVehicle_result result = new getVehicle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVehicle_args args, org.apache.thrift.async.AsyncMethodCallback<com.afarcloud.thrift.Vehicle> resultHandler) throws TException {
        iface.getVehicle(args.requestId, args.vid,resultHandler);
      }
    }

    public static class getPartfield<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPartfield_args, com.afarcloud.thrift.PartField> {
      public getPartfield() {
        super("getPartfield");
      }

      public getPartfield_args getEmptyArgsInstance() {
        return new getPartfield_args();
      }

      public AsyncMethodCallback<com.afarcloud.thrift.PartField> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.afarcloud.thrift.PartField>() { 
          public void onComplete(com.afarcloud.thrift.PartField o) {
            getPartfield_result result = new getPartfield_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPartfield_result result = new getPartfield_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPartfield_args args, org.apache.thrift.async.AsyncMethodCallback<com.afarcloud.thrift.PartField> resultHandler) throws TException {
        iface.getPartfield(args.requestId, args.partfieldId,resultHandler);
      }
    }

    public static class getAllPartfields<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllPartfields_args, List<com.afarcloud.thrift.PartField>> {
      public getAllPartfields() {
        super("getAllPartfields");
      }

      public getAllPartfields_args getEmptyArgsInstance() {
        return new getAllPartfields_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.PartField>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.PartField>>() { 
          public void onComplete(List<com.afarcloud.thrift.PartField> o) {
            getAllPartfields_result result = new getAllPartfields_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllPartfields_result result = new getAllPartfields_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllPartfields_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.PartField>> resultHandler) throws TException {
        iface.getAllPartfields(args.requestId,resultHandler);
      }
    }

    public static class querySensorLastDataPF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorLastDataPF_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorLastDataPF() {
        super("querySensorLastDataPF");
      }

      public querySensorLastDataPF_args getEmptyArgsInstance() {
        return new querySensorLastDataPF_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorLastDataPF_result result = new querySensorLastDataPF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorLastDataPF_result result = new querySensorLastDataPF_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorLastDataPF_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorLastDataPF(args.requestId, args.partfieldId,resultHandler);
      }
    }

    public static class querySensorLastDataBySensorUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorLastDataBySensorUid_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorLastDataBySensorUid() {
        super("querySensorLastDataBySensorUid");
      }

      public querySensorLastDataBySensorUid_args getEmptyArgsInstance() {
        return new querySensorLastDataBySensorUid_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorLastDataBySensorUid_result result = new querySensorLastDataBySensorUid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorLastDataBySensorUid_result result = new querySensorLastDataBySensorUid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorLastDataBySensorUid_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorLastDataBySensorUid(args.requestId, args.sensorUid,resultHandler);
      }
    }

    public static class querySensorLastDataBySensorTypePF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorLastDataBySensorTypePF_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorLastDataBySensorTypePF() {
        super("querySensorLastDataBySensorTypePF");
      }

      public querySensorLastDataBySensorTypePF_args getEmptyArgsInstance() {
        return new querySensorLastDataBySensorTypePF_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorLastDataBySensorTypePF_result result = new querySensorLastDataBySensorTypePF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorLastDataBySensorTypePF_result result = new querySensorLastDataBySensorTypePF_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorLastDataBySensorTypePF_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorLastDataBySensorTypePF(args.requestId, args.partfieldId, args.sensorType,resultHandler);
      }
    }

    public static class querySensorLastDataByObservationTypePF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorLastDataByObservationTypePF_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorLastDataByObservationTypePF() {
        super("querySensorLastDataByObservationTypePF");
      }

      public querySensorLastDataByObservationTypePF_args getEmptyArgsInstance() {
        return new querySensorLastDataByObservationTypePF_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorLastDataByObservationTypePF_result result = new querySensorLastDataByObservationTypePF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorLastDataByObservationTypePF_result result = new querySensorLastDataByObservationTypePF_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorLastDataByObservationTypePF_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorLastDataByObservationTypePF(args.requestId, args.partfieldId, args.obserType,resultHandler);
      }
    }

    public static class querySensorLastDataC<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorLastDataC_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorLastDataC() {
        super("querySensorLastDataC");
      }

      public querySensorLastDataC_args getEmptyArgsInstance() {
        return new querySensorLastDataC_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorLastDataC_result result = new querySensorLastDataC_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorLastDataC_result result = new querySensorLastDataC_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorLastDataC_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorLastDataC(args.requestId, args.regionCentre, args.radius,resultHandler);
      }
    }

    public static class querySensorLastDataBySensorTypeC<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorLastDataBySensorTypeC_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorLastDataBySensorTypeC() {
        super("querySensorLastDataBySensorTypeC");
      }

      public querySensorLastDataBySensorTypeC_args getEmptyArgsInstance() {
        return new querySensorLastDataBySensorTypeC_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorLastDataBySensorTypeC_result result = new querySensorLastDataBySensorTypeC_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorLastDataBySensorTypeC_result result = new querySensorLastDataBySensorTypeC_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorLastDataBySensorTypeC_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorLastDataBySensorTypeC(args.requestId, args.regionCentre, args.radius, args.sensorType,resultHandler);
      }
    }

    public static class querySensorLastDataByObservationTypeC<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorLastDataByObservationTypeC_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorLastDataByObservationTypeC() {
        super("querySensorLastDataByObservationTypeC");
      }

      public querySensorLastDataByObservationTypeC_args getEmptyArgsInstance() {
        return new querySensorLastDataByObservationTypeC_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorLastDataByObservationTypeC_result result = new querySensorLastDataByObservationTypeC_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorLastDataByObservationTypeC_result result = new querySensorLastDataByObservationTypeC_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorLastDataByObservationTypeC_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorLastDataByObservationTypeC(args.requestId, args.regionCentre, args.radius, args.obserType,resultHandler);
      }
    }

    public static class queryCollarLastDataPF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCollarLastDataPF_args, List<com.afarcloud.thrift.CollarData>> {
      public queryCollarLastDataPF() {
        super("queryCollarLastDataPF");
      }

      public queryCollarLastDataPF_args getEmptyArgsInstance() {
        return new queryCollarLastDataPF_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>>() { 
          public void onComplete(List<com.afarcloud.thrift.CollarData> o) {
            queryCollarLastDataPF_result result = new queryCollarLastDataPF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCollarLastDataPF_result result = new queryCollarLastDataPF_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCollarLastDataPF_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> resultHandler) throws TException {
        iface.queryCollarLastDataPF(args.requestId, args.partfieldId,resultHandler);
      }
    }

    public static class queryCollarLastDataC<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCollarLastDataC_args, List<com.afarcloud.thrift.CollarData>> {
      public queryCollarLastDataC() {
        super("queryCollarLastDataC");
      }

      public queryCollarLastDataC_args getEmptyArgsInstance() {
        return new queryCollarLastDataC_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>>() { 
          public void onComplete(List<com.afarcloud.thrift.CollarData> o) {
            queryCollarLastDataC_result result = new queryCollarLastDataC_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCollarLastDataC_result result = new queryCollarLastDataC_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCollarLastDataC_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> resultHandler) throws TException {
        iface.queryCollarLastDataC(args.requestId, args.regionCentre, args.radius,resultHandler);
      }
    }

    public static class queryCollarLastDataByCollarUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCollarLastDataByCollarUid_args, List<com.afarcloud.thrift.CollarData>> {
      public queryCollarLastDataByCollarUid() {
        super("queryCollarLastDataByCollarUid");
      }

      public queryCollarLastDataByCollarUid_args getEmptyArgsInstance() {
        return new queryCollarLastDataByCollarUid_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>>() { 
          public void onComplete(List<com.afarcloud.thrift.CollarData> o) {
            queryCollarLastDataByCollarUid_result result = new queryCollarLastDataByCollarUid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCollarLastDataByCollarUid_result result = new queryCollarLastDataByCollarUid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCollarLastDataByCollarUid_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> resultHandler) throws TException {
        iface.queryCollarLastDataByCollarUid(args.requestId, args.collarUid,resultHandler);
      }
    }

    public static class queryVehicleLastStateVectorPF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryVehicleLastStateVectorPF_args, List<com.afarcloud.thrift.StateVector>> {
      public queryVehicleLastStateVectorPF() {
        super("queryVehicleLastStateVectorPF");
      }

      public queryVehicleLastStateVectorPF_args getEmptyArgsInstance() {
        return new queryVehicleLastStateVectorPF_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>>() { 
          public void onComplete(List<com.afarcloud.thrift.StateVector> o) {
            queryVehicleLastStateVectorPF_result result = new queryVehicleLastStateVectorPF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryVehicleLastStateVectorPF_result result = new queryVehicleLastStateVectorPF_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryVehicleLastStateVectorPF_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> resultHandler) throws TException {
        iface.queryVehicleLastStateVectorPF(args.requestId, args.partfieldId,resultHandler);
      }
    }

    public static class queryVehicleLastStateVectorC<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryVehicleLastStateVectorC_args, List<com.afarcloud.thrift.StateVector>> {
      public queryVehicleLastStateVectorC() {
        super("queryVehicleLastStateVectorC");
      }

      public queryVehicleLastStateVectorC_args getEmptyArgsInstance() {
        return new queryVehicleLastStateVectorC_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>>() { 
          public void onComplete(List<com.afarcloud.thrift.StateVector> o) {
            queryVehicleLastStateVectorC_result result = new queryVehicleLastStateVectorC_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryVehicleLastStateVectorC_result result = new queryVehicleLastStateVectorC_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryVehicleLastStateVectorC_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> resultHandler) throws TException {
        iface.queryVehicleLastStateVectorC(args.requestId, args.regionCentre, args.radius,resultHandler);
      }
    }

    public static class queryVehicleLastStateVectorByVehicleId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryVehicleLastStateVectorByVehicleId_args, List<com.afarcloud.thrift.StateVector>> {
      public queryVehicleLastStateVectorByVehicleId() {
        super("queryVehicleLastStateVectorByVehicleId");
      }

      public queryVehicleLastStateVectorByVehicleId_args getEmptyArgsInstance() {
        return new queryVehicleLastStateVectorByVehicleId_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>>() { 
          public void onComplete(List<com.afarcloud.thrift.StateVector> o) {
            queryVehicleLastStateVectorByVehicleId_result result = new queryVehicleLastStateVectorByVehicleId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryVehicleLastStateVectorByVehicleId_result result = new queryVehicleLastStateVectorByVehicleId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryVehicleLastStateVectorByVehicleId_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> resultHandler) throws TException {
        iface.queryVehicleLastStateVectorByVehicleId(args.requestId, args.vehicleId,resultHandler);
      }
    }

    public static class queryDetectedStuffOnTheFarm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryDetectedStuffOnTheFarm_args, List<com.afarcloud.thrift.DetectionRegion>> {
      public queryDetectedStuffOnTheFarm() {
        super("queryDetectedStuffOnTheFarm");
      }

      public queryDetectedStuffOnTheFarm_args getEmptyArgsInstance() {
        return new queryDetectedStuffOnTheFarm_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.DetectionRegion>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.DetectionRegion>>() { 
          public void onComplete(List<com.afarcloud.thrift.DetectionRegion> o) {
            queryDetectedStuffOnTheFarm_result result = new queryDetectedStuffOnTheFarm_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryDetectedStuffOnTheFarm_result result = new queryDetectedStuffOnTheFarm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryDetectedStuffOnTheFarm_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.DetectionRegion>> resultHandler) throws TException {
        iface.queryDetectedStuffOnTheFarm(args.requestId, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class querySensorHistoricalDataPF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorHistoricalDataPF_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorHistoricalDataPF() {
        super("querySensorHistoricalDataPF");
      }

      public querySensorHistoricalDataPF_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataPF_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorHistoricalDataPF_result result = new querySensorHistoricalDataPF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorHistoricalDataPF_result result = new querySensorHistoricalDataPF_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorHistoricalDataPF_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorHistoricalDataPF(args.requestId, args.partfieldId, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class querySensorHistoricalDataBySensorUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorHistoricalDataBySensorUid_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorHistoricalDataBySensorUid() {
        super("querySensorHistoricalDataBySensorUid");
      }

      public querySensorHistoricalDataBySensorUid_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataBySensorUid_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorHistoricalDataBySensorUid_result result = new querySensorHistoricalDataBySensorUid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorHistoricalDataBySensorUid_result result = new querySensorHistoricalDataBySensorUid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorHistoricalDataBySensorUid_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorHistoricalDataBySensorUid(args.requestId, args.sensorUid, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class querySensorHistoricalDataBySensorTypePF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorHistoricalDataBySensorTypePF_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorHistoricalDataBySensorTypePF() {
        super("querySensorHistoricalDataBySensorTypePF");
      }

      public querySensorHistoricalDataBySensorTypePF_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataBySensorTypePF_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorHistoricalDataBySensorTypePF_result result = new querySensorHistoricalDataBySensorTypePF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorHistoricalDataBySensorTypePF_result result = new querySensorHistoricalDataBySensorTypePF_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorHistoricalDataBySensorTypePF_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorHistoricalDataBySensorTypePF(args.requestId, args.partfieldId, args.sensorType, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class querySensorHistoricalDataByObservationTypePF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorHistoricalDataByObservationTypePF_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorHistoricalDataByObservationTypePF() {
        super("querySensorHistoricalDataByObservationTypePF");
      }

      public querySensorHistoricalDataByObservationTypePF_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataByObservationTypePF_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorHistoricalDataByObservationTypePF_result result = new querySensorHistoricalDataByObservationTypePF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorHistoricalDataByObservationTypePF_result result = new querySensorHistoricalDataByObservationTypePF_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorHistoricalDataByObservationTypePF_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorHistoricalDataByObservationTypePF(args.requestId, args.partfieldId, args.obserType, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class querySensorHistoricalDataC<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorHistoricalDataC_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorHistoricalDataC() {
        super("querySensorHistoricalDataC");
      }

      public querySensorHistoricalDataC_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataC_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorHistoricalDataC_result result = new querySensorHistoricalDataC_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorHistoricalDataC_result result = new querySensorHistoricalDataC_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorHistoricalDataC_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorHistoricalDataC(args.requestId, args.regionCentre, args.radius, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class querySensorHistoricalDataBySensorTypeC<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorHistoricalDataBySensorTypeC_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorHistoricalDataBySensorTypeC() {
        super("querySensorHistoricalDataBySensorTypeC");
      }

      public querySensorHistoricalDataBySensorTypeC_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataBySensorTypeC_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorHistoricalDataBySensorTypeC_result result = new querySensorHistoricalDataBySensorTypeC_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorHistoricalDataBySensorTypeC_result result = new querySensorHistoricalDataBySensorTypeC_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorHistoricalDataBySensorTypeC_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorHistoricalDataBySensorTypeC(args.requestId, args.regionCentre, args.radius, args.sensorType, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class querySensorHistoricalDataByObservationTypeC<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySensorHistoricalDataByObservationTypeC_args, List<com.afarcloud.thrift.SensorData>> {
      public querySensorHistoricalDataByObservationTypeC() {
        super("querySensorHistoricalDataByObservationTypeC");
      }

      public querySensorHistoricalDataByObservationTypeC_args getEmptyArgsInstance() {
        return new querySensorHistoricalDataByObservationTypeC_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>>() { 
          public void onComplete(List<com.afarcloud.thrift.SensorData> o) {
            querySensorHistoricalDataByObservationTypeC_result result = new querySensorHistoricalDataByObservationTypeC_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            querySensorHistoricalDataByObservationTypeC_result result = new querySensorHistoricalDataByObservationTypeC_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySensorHistoricalDataByObservationTypeC_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.SensorData>> resultHandler) throws TException {
        iface.querySensorHistoricalDataByObservationTypeC(args.requestId, args.regionCentre, args.radius, args.obserType, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class queryCollarHistoricalDataPF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCollarHistoricalDataPF_args, List<com.afarcloud.thrift.CollarData>> {
      public queryCollarHistoricalDataPF() {
        super("queryCollarHistoricalDataPF");
      }

      public queryCollarHistoricalDataPF_args getEmptyArgsInstance() {
        return new queryCollarHistoricalDataPF_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>>() { 
          public void onComplete(List<com.afarcloud.thrift.CollarData> o) {
            queryCollarHistoricalDataPF_result result = new queryCollarHistoricalDataPF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCollarHistoricalDataPF_result result = new queryCollarHistoricalDataPF_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCollarHistoricalDataPF_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> resultHandler) throws TException {
        iface.queryCollarHistoricalDataPF(args.requestId, args.partfieldId, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class queryCollarHistoricalDataC<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCollarHistoricalDataC_args, List<com.afarcloud.thrift.CollarData>> {
      public queryCollarHistoricalDataC() {
        super("queryCollarHistoricalDataC");
      }

      public queryCollarHistoricalDataC_args getEmptyArgsInstance() {
        return new queryCollarHistoricalDataC_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>>() { 
          public void onComplete(List<com.afarcloud.thrift.CollarData> o) {
            queryCollarHistoricalDataC_result result = new queryCollarHistoricalDataC_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCollarHistoricalDataC_result result = new queryCollarHistoricalDataC_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCollarHistoricalDataC_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> resultHandler) throws TException {
        iface.queryCollarHistoricalDataC(args.requestId, args.regionCentre, args.radius, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class queryCollarHistoricalDataByCollarUid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCollarHistoricalDataByCollarUid_args, List<com.afarcloud.thrift.CollarData>> {
      public queryCollarHistoricalDataByCollarUid() {
        super("queryCollarHistoricalDataByCollarUid");
      }

      public queryCollarHistoricalDataByCollarUid_args getEmptyArgsInstance() {
        return new queryCollarHistoricalDataByCollarUid_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>>() { 
          public void onComplete(List<com.afarcloud.thrift.CollarData> o) {
            queryCollarHistoricalDataByCollarUid_result result = new queryCollarHistoricalDataByCollarUid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCollarHistoricalDataByCollarUid_result result = new queryCollarHistoricalDataByCollarUid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCollarHistoricalDataByCollarUid_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.CollarData>> resultHandler) throws TException {
        iface.queryCollarHistoricalDataByCollarUid(args.requestId, args.collarUid, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class queryVehicleHistoricalStateVectorsPF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryVehicleHistoricalStateVectorsPF_args, List<com.afarcloud.thrift.StateVector>> {
      public queryVehicleHistoricalStateVectorsPF() {
        super("queryVehicleHistoricalStateVectorsPF");
      }

      public queryVehicleHistoricalStateVectorsPF_args getEmptyArgsInstance() {
        return new queryVehicleHistoricalStateVectorsPF_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>>() { 
          public void onComplete(List<com.afarcloud.thrift.StateVector> o) {
            queryVehicleHistoricalStateVectorsPF_result result = new queryVehicleHistoricalStateVectorsPF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryVehicleHistoricalStateVectorsPF_result result = new queryVehicleHistoricalStateVectorsPF_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryVehicleHistoricalStateVectorsPF_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> resultHandler) throws TException {
        iface.queryVehicleHistoricalStateVectorsPF(args.requestId, args.partfieldId, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class queryVehicleHistoricalStateVectorsC<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryVehicleHistoricalStateVectorsC_args, List<com.afarcloud.thrift.StateVector>> {
      public queryVehicleHistoricalStateVectorsC() {
        super("queryVehicleHistoricalStateVectorsC");
      }

      public queryVehicleHistoricalStateVectorsC_args getEmptyArgsInstance() {
        return new queryVehicleHistoricalStateVectorsC_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>>() { 
          public void onComplete(List<com.afarcloud.thrift.StateVector> o) {
            queryVehicleHistoricalStateVectorsC_result result = new queryVehicleHistoricalStateVectorsC_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryVehicleHistoricalStateVectorsC_result result = new queryVehicleHistoricalStateVectorsC_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryVehicleHistoricalStateVectorsC_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> resultHandler) throws TException {
        iface.queryVehicleHistoricalStateVectorsC(args.requestId, args.regionCentre, args.radius, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class queryVehicleHistoricalStateVectorByVehicleId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryVehicleHistoricalStateVectorByVehicleId_args, List<com.afarcloud.thrift.StateVector>> {
      public queryVehicleHistoricalStateVectorByVehicleId() {
        super("queryVehicleHistoricalStateVectorByVehicleId");
      }

      public queryVehicleHistoricalStateVectorByVehicleId_args getEmptyArgsInstance() {
        return new queryVehicleHistoricalStateVectorByVehicleId_args();
      }

      public AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>>() { 
          public void onComplete(List<com.afarcloud.thrift.StateVector> o) {
            queryVehicleHistoricalStateVectorByVehicleId_result result = new queryVehicleHistoricalStateVectorByVehicleId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryVehicleHistoricalStateVectorByVehicleId_result result = new queryVehicleHistoricalStateVectorByVehicleId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryVehicleHistoricalStateVectorByVehicleId_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.afarcloud.thrift.StateVector>> resultHandler) throws TException {
        iface.queryVehicleHistoricalStateVectorByVehicleId(args.requestId, args.vehicleId, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class storeEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeEvent_args, Void> {
      public storeEvent() {
        super("storeEvent");
      }

      public storeEvent_args getEmptyArgsInstance() {
        return new storeEvent_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, storeEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.storeEvent(args.requestId, args.missionId, args.vehicleId, args.subtype, args.description, args.timeReference,resultHandler);
      }
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, String> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            ping_result result = new ping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

  }

  public static class getAllVehicles_args implements org.apache.thrift.TBase<getAllVehicles_args, getAllVehicles_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllVehicles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllVehicles_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllVehicles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllVehicles_argsTupleSchemeFactory());
    }

    public int requestId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllVehicles_args.class, metaDataMap);
    }

    public getAllVehicles_args() {
    }

    public getAllVehicles_args(
      int requestId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllVehicles_args(getAllVehicles_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
    }

    public getAllVehicles_args deepCopy() {
      return new getAllVehicles_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public getAllVehicles_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllVehicles_args)
        return this.equals((getAllVehicles_args)that);
      return false;
    }

    public boolean equals(getAllVehicles_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllVehicles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllVehicles_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllVehicles_argsStandardSchemeFactory implements SchemeFactory {
      public getAllVehicles_argsStandardScheme getScheme() {
        return new getAllVehicles_argsStandardScheme();
      }
    }

    private static class getAllVehicles_argsStandardScheme extends StandardScheme<getAllVehicles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllVehicles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllVehicles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllVehicles_argsTupleSchemeFactory implements SchemeFactory {
      public getAllVehicles_argsTupleScheme getScheme() {
        return new getAllVehicles_argsTupleScheme();
      }
    }

    private static class getAllVehicles_argsTupleScheme extends TupleScheme<getAllVehicles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllVehicles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllVehicles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
      }
    }

  }

  public static class getAllVehicles_result implements org.apache.thrift.TBase<getAllVehicles_result, getAllVehicles_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllVehicles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllVehicles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllVehicles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllVehicles_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.Vehicle> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Vehicle.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllVehicles_result.class, metaDataMap);
    }

    public getAllVehicles_result() {
    }

    public getAllVehicles_result(
      List<com.afarcloud.thrift.Vehicle> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllVehicles_result(getAllVehicles_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.Vehicle> __this__success = new ArrayList<com.afarcloud.thrift.Vehicle>(other.success.size());
        for (com.afarcloud.thrift.Vehicle other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.Vehicle(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllVehicles_result deepCopy() {
      return new getAllVehicles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.Vehicle> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.Vehicle elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.Vehicle>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.Vehicle> getSuccess() {
      return this.success;
    }

    public getAllVehicles_result setSuccess(List<com.afarcloud.thrift.Vehicle> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.Vehicle>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllVehicles_result)
        return this.equals((getAllVehicles_result)that);
      return false;
    }

    public boolean equals(getAllVehicles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllVehicles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllVehicles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllVehicles_resultStandardSchemeFactory implements SchemeFactory {
      public getAllVehicles_resultStandardScheme getScheme() {
        return new getAllVehicles_resultStandardScheme();
      }
    }

    private static class getAllVehicles_resultStandardScheme extends StandardScheme<getAllVehicles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllVehicles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.Vehicle>(_list0.size);
                  com.afarcloud.thrift.Vehicle _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.afarcloud.thrift.Vehicle();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllVehicles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.Vehicle _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllVehicles_resultTupleSchemeFactory implements SchemeFactory {
      public getAllVehicles_resultTupleScheme getScheme() {
        return new getAllVehicles_resultTupleScheme();
      }
    }

    private static class getAllVehicles_resultTupleScheme extends TupleScheme<getAllVehicles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllVehicles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.Vehicle _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllVehicles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.Vehicle>(_list5.size);
            com.afarcloud.thrift.Vehicle _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.afarcloud.thrift.Vehicle();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllMissions_args implements org.apache.thrift.TBase<getAllMissions_args, getAllMissions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllMissions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllMissions_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllMissions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllMissions_argsTupleSchemeFactory());
    }

    public int requestId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllMissions_args.class, metaDataMap);
    }

    public getAllMissions_args() {
    }

    public getAllMissions_args(
      int requestId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllMissions_args(getAllMissions_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
    }

    public getAllMissions_args deepCopy() {
      return new getAllMissions_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public getAllMissions_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllMissions_args)
        return this.equals((getAllMissions_args)that);
      return false;
    }

    public boolean equals(getAllMissions_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllMissions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllMissions_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllMissions_argsStandardSchemeFactory implements SchemeFactory {
      public getAllMissions_argsStandardScheme getScheme() {
        return new getAllMissions_argsStandardScheme();
      }
    }

    private static class getAllMissions_argsStandardScheme extends StandardScheme<getAllMissions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllMissions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllMissions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllMissions_argsTupleSchemeFactory implements SchemeFactory {
      public getAllMissions_argsTupleScheme getScheme() {
        return new getAllMissions_argsTupleScheme();
      }
    }

    private static class getAllMissions_argsTupleScheme extends TupleScheme<getAllMissions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllMissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllMissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
      }
    }

  }

  public static class getAllMissions_result implements org.apache.thrift.TBase<getAllMissions_result, getAllMissions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllMissions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllMissions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllMissions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllMissions_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.MissionTag> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.MissionTag.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllMissions_result.class, metaDataMap);
    }

    public getAllMissions_result() {
    }

    public getAllMissions_result(
      List<com.afarcloud.thrift.MissionTag> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllMissions_result(getAllMissions_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.MissionTag> __this__success = new ArrayList<com.afarcloud.thrift.MissionTag>(other.success.size());
        for (com.afarcloud.thrift.MissionTag other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.MissionTag(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllMissions_result deepCopy() {
      return new getAllMissions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.MissionTag> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.MissionTag elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.MissionTag>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.MissionTag> getSuccess() {
      return this.success;
    }

    public getAllMissions_result setSuccess(List<com.afarcloud.thrift.MissionTag> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.MissionTag>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllMissions_result)
        return this.equals((getAllMissions_result)that);
      return false;
    }

    public boolean equals(getAllMissions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllMissions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllMissions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllMissions_resultStandardSchemeFactory implements SchemeFactory {
      public getAllMissions_resultStandardScheme getScheme() {
        return new getAllMissions_resultStandardScheme();
      }
    }

    private static class getAllMissions_resultStandardScheme extends StandardScheme<getAllMissions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllMissions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.MissionTag>(_list8.size);
                  com.afarcloud.thrift.MissionTag _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.afarcloud.thrift.MissionTag();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllMissions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.MissionTag _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllMissions_resultTupleSchemeFactory implements SchemeFactory {
      public getAllMissions_resultTupleScheme getScheme() {
        return new getAllMissions_resultTupleScheme();
      }
    }

    private static class getAllMissions_resultTupleScheme extends TupleScheme<getAllMissions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllMissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.MissionTag _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllMissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.MissionTag>(_list13.size);
            com.afarcloud.thrift.MissionTag _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.afarcloud.thrift.MissionTag();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOngoingMissions_args implements org.apache.thrift.TBase<getOngoingMissions_args, getOngoingMissions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOngoingMissions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOngoingMissions_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOngoingMissions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOngoingMissions_argsTupleSchemeFactory());
    }

    public int requestId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOngoingMissions_args.class, metaDataMap);
    }

    public getOngoingMissions_args() {
    }

    public getOngoingMissions_args(
      int requestId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOngoingMissions_args(getOngoingMissions_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
    }

    public getOngoingMissions_args deepCopy() {
      return new getOngoingMissions_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public getOngoingMissions_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOngoingMissions_args)
        return this.equals((getOngoingMissions_args)that);
      return false;
    }

    public boolean equals(getOngoingMissions_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOngoingMissions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOngoingMissions_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOngoingMissions_argsStandardSchemeFactory implements SchemeFactory {
      public getOngoingMissions_argsStandardScheme getScheme() {
        return new getOngoingMissions_argsStandardScheme();
      }
    }

    private static class getOngoingMissions_argsStandardScheme extends StandardScheme<getOngoingMissions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOngoingMissions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOngoingMissions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOngoingMissions_argsTupleSchemeFactory implements SchemeFactory {
      public getOngoingMissions_argsTupleScheme getScheme() {
        return new getOngoingMissions_argsTupleScheme();
      }
    }

    private static class getOngoingMissions_argsTupleScheme extends TupleScheme<getOngoingMissions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOngoingMissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOngoingMissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
      }
    }

  }

  public static class getOngoingMissions_result implements org.apache.thrift.TBase<getOngoingMissions_result, getOngoingMissions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOngoingMissions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOngoingMissions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOngoingMissions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOngoingMissions_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.MissionTag> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.MissionTag.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOngoingMissions_result.class, metaDataMap);
    }

    public getOngoingMissions_result() {
    }

    public getOngoingMissions_result(
      List<com.afarcloud.thrift.MissionTag> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOngoingMissions_result(getOngoingMissions_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.MissionTag> __this__success = new ArrayList<com.afarcloud.thrift.MissionTag>(other.success.size());
        for (com.afarcloud.thrift.MissionTag other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.MissionTag(other_element));
        }
        this.success = __this__success;
      }
    }

    public getOngoingMissions_result deepCopy() {
      return new getOngoingMissions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.MissionTag> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.MissionTag elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.MissionTag>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.MissionTag> getSuccess() {
      return this.success;
    }

    public getOngoingMissions_result setSuccess(List<com.afarcloud.thrift.MissionTag> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.MissionTag>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOngoingMissions_result)
        return this.equals((getOngoingMissions_result)that);
      return false;
    }

    public boolean equals(getOngoingMissions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOngoingMissions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOngoingMissions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOngoingMissions_resultStandardSchemeFactory implements SchemeFactory {
      public getOngoingMissions_resultStandardScheme getScheme() {
        return new getOngoingMissions_resultStandardScheme();
      }
    }

    private static class getOngoingMissions_resultStandardScheme extends StandardScheme<getOngoingMissions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOngoingMissions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.MissionTag>(_list16.size);
                  com.afarcloud.thrift.MissionTag _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.afarcloud.thrift.MissionTag();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOngoingMissions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.MissionTag _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOngoingMissions_resultTupleSchemeFactory implements SchemeFactory {
      public getOngoingMissions_resultTupleScheme getScheme() {
        return new getOngoingMissions_resultTupleScheme();
      }
    }

    private static class getOngoingMissions_resultTupleScheme extends TupleScheme<getOngoingMissions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOngoingMissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.MissionTag _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOngoingMissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.MissionTag>(_list21.size);
            com.afarcloud.thrift.MissionTag _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.afarcloud.thrift.MissionTag();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMissionById_args implements org.apache.thrift.TBase<getMissionById_args, getMissionById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMissionById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMissionById_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMissionById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMissionById_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int missionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      MISSION_ID((short)2, "missionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // MISSION_ID
            return MISSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __MISSIONID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMissionById_args.class, metaDataMap);
    }

    public getMissionById_args() {
    }

    public getMissionById_args(
      int requestId,
      int missionId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.missionId = missionId;
      setMissionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMissionById_args(getMissionById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.missionId = other.missionId;
    }

    public getMissionById_args deepCopy() {
      return new getMissionById_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setMissionIdIsSet(false);
      this.missionId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public getMissionById_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getMissionId() {
      return this.missionId;
    }

    public getMissionById_args setMissionId(int missionId) {
      this.missionId = missionId;
      setMissionIdIsSet(true);
      return this;
    }

    public void unsetMissionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return EncodingUtils.testBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    public void setMissionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case MISSION_ID:
        return Integer.valueOf(getMissionId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case MISSION_ID:
        return isSetMissionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMissionById_args)
        return this.equals((getMissionById_args)that);
      return false;
    }

    public boolean equals(getMissionById_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_missionId = true;
      boolean that_present_missionId = true;
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (this.missionId != that.missionId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_missionId = true;
      list.add(present_missionId);
      if (present_missionId)
        list.add(missionId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMissionById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMissionById_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("missionId:");
      sb.append(this.missionId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMissionById_argsStandardSchemeFactory implements SchemeFactory {
      public getMissionById_argsStandardScheme getScheme() {
        return new getMissionById_argsStandardScheme();
      }
    }

    private static class getMissionById_argsStandardScheme extends StandardScheme<getMissionById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMissionById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.missionId = iprot.readI32();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMissionById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
        oprot.writeI32(struct.missionId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMissionById_argsTupleSchemeFactory implements SchemeFactory {
      public getMissionById_argsTupleScheme getScheme() {
        return new getMissionById_argsTupleScheme();
      }
    }

    private static class getMissionById_argsTupleScheme extends TupleScheme<getMissionById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMissionById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetMissionId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetMissionId()) {
          oprot.writeI32(struct.missionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMissionById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.missionId = iprot.readI32();
          struct.setMissionIdIsSet(true);
        }
      }
    }

  }

  public static class getMissionById_result implements org.apache.thrift.TBase<getMissionById_result, getMissionById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMissionById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMissionById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMissionById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMissionById_resultTupleSchemeFactory());
    }

    public com.afarcloud.thrift.Mission success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Mission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMissionById_result.class, metaDataMap);
    }

    public getMissionById_result() {
    }

    public getMissionById_result(
      com.afarcloud.thrift.Mission success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMissionById_result(getMissionById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.afarcloud.thrift.Mission(other.success);
      }
    }

    public getMissionById_result deepCopy() {
      return new getMissionById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.afarcloud.thrift.Mission getSuccess() {
      return this.success;
    }

    public getMissionById_result setSuccess(com.afarcloud.thrift.Mission success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.afarcloud.thrift.Mission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMissionById_result)
        return this.equals((getMissionById_result)that);
      return false;
    }

    public boolean equals(getMissionById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMissionById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMissionById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMissionById_resultStandardSchemeFactory implements SchemeFactory {
      public getMissionById_resultStandardScheme getScheme() {
        return new getMissionById_resultStandardScheme();
      }
    }

    private static class getMissionById_resultStandardScheme extends StandardScheme<getMissionById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMissionById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.afarcloud.thrift.Mission();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMissionById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMissionById_resultTupleSchemeFactory implements SchemeFactory {
      public getMissionById_resultTupleScheme getScheme() {
        return new getMissionById_resultTupleScheme();
      }
    }

    private static class getMissionById_resultTupleScheme extends TupleScheme<getMissionById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMissionById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMissionById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.afarcloud.thrift.Mission();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVehicle_args implements org.apache.thrift.TBase<getVehicle_args, getVehicle_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVehicle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVehicle_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVehicle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVehicle_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int vid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      VID((short)2, "vid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // VID
            return VID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __VID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVehicle_args.class, metaDataMap);
    }

    public getVehicle_args() {
    }

    public getVehicle_args(
      int requestId,
      int vid)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.vid = vid;
      setVidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVehicle_args(getVehicle_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.vid = other.vid;
    }

    public getVehicle_args deepCopy() {
      return new getVehicle_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setVidIsSet(false);
      this.vid = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public getVehicle_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getVid() {
      return this.vid;
    }

    public getVehicle_args setVid(int vid) {
      this.vid = vid;
      setVidIsSet(true);
      return this;
    }

    public void unsetVid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
    }

    /** Returns true if field vid is set (has been assigned a value) and false otherwise */
    public boolean isSetVid() {
      return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
    }

    public void setVidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case VID:
        if (value == null) {
          unsetVid();
        } else {
          setVid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case VID:
        return Integer.valueOf(getVid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case VID:
        return isSetVid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVehicle_args)
        return this.equals((getVehicle_args)that);
      return false;
    }

    public boolean equals(getVehicle_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_vid = true;
      boolean that_present_vid = true;
      if (this_present_vid || that_present_vid) {
        if (!(this_present_vid && that_present_vid))
          return false;
        if (this.vid != that.vid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_vid = true;
      list.add(present_vid);
      if (present_vid)
        list.add(vid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVehicle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVid()).compareTo(other.isSetVid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, other.vid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVehicle_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vid:");
      sb.append(this.vid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVehicle_argsStandardSchemeFactory implements SchemeFactory {
      public getVehicle_argsStandardScheme getScheme() {
        return new getVehicle_argsStandardScheme();
      }
    }

    private static class getVehicle_argsStandardScheme extends StandardScheme<getVehicle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVehicle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vid = iprot.readI32();
                struct.setVidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVehicle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeI32(struct.vid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVehicle_argsTupleSchemeFactory implements SchemeFactory {
      public getVehicle_argsTupleScheme getScheme() {
        return new getVehicle_argsTupleScheme();
      }
    }

    private static class getVehicle_argsTupleScheme extends TupleScheme<getVehicle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVehicle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetVid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetVid()) {
          oprot.writeI32(struct.vid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVehicle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vid = iprot.readI32();
          struct.setVidIsSet(true);
        }
      }
    }

  }

  public static class getVehicle_result implements org.apache.thrift.TBase<getVehicle_result, getVehicle_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVehicle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVehicle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVehicle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVehicle_resultTupleSchemeFactory());
    }

    public com.afarcloud.thrift.Vehicle success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Vehicle.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVehicle_result.class, metaDataMap);
    }

    public getVehicle_result() {
    }

    public getVehicle_result(
      com.afarcloud.thrift.Vehicle success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVehicle_result(getVehicle_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.afarcloud.thrift.Vehicle(other.success);
      }
    }

    public getVehicle_result deepCopy() {
      return new getVehicle_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.afarcloud.thrift.Vehicle getSuccess() {
      return this.success;
    }

    public getVehicle_result setSuccess(com.afarcloud.thrift.Vehicle success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.afarcloud.thrift.Vehicle)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVehicle_result)
        return this.equals((getVehicle_result)that);
      return false;
    }

    public boolean equals(getVehicle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVehicle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVehicle_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVehicle_resultStandardSchemeFactory implements SchemeFactory {
      public getVehicle_resultStandardScheme getScheme() {
        return new getVehicle_resultStandardScheme();
      }
    }

    private static class getVehicle_resultStandardScheme extends StandardScheme<getVehicle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVehicle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.afarcloud.thrift.Vehicle();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVehicle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVehicle_resultTupleSchemeFactory implements SchemeFactory {
      public getVehicle_resultTupleScheme getScheme() {
        return new getVehicle_resultTupleScheme();
      }
    }

    private static class getVehicle_resultTupleScheme extends TupleScheme<getVehicle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVehicle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVehicle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.afarcloud.thrift.Vehicle();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPartfield_args implements org.apache.thrift.TBase<getPartfield_args, getPartfield_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPartfield_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartfield_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARTFIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partfieldId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartfield_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartfield_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int partfieldId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      PARTFIELD_ID((short)2, "partfieldId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // PARTFIELD_ID
            return PARTFIELD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __PARTFIELDID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTFIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("partfieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartfield_args.class, metaDataMap);
    }

    public getPartfield_args() {
    }

    public getPartfield_args(
      int requestId,
      int partfieldId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartfield_args(getPartfield_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.partfieldId = other.partfieldId;
    }

    public getPartfield_args deepCopy() {
      return new getPartfield_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setPartfieldIdIsSet(false);
      this.partfieldId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public getPartfield_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getPartfieldId() {
      return this.partfieldId;
    }

    public getPartfield_args setPartfieldId(int partfieldId) {
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      return this;
    }

    public void unsetPartfieldId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    /** Returns true if field partfieldId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartfieldId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    public void setPartfieldIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTFIELDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case PARTFIELD_ID:
        if (value == null) {
          unsetPartfieldId();
        } else {
          setPartfieldId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case PARTFIELD_ID:
        return Integer.valueOf(getPartfieldId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case PARTFIELD_ID:
        return isSetPartfieldId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartfield_args)
        return this.equals((getPartfield_args)that);
      return false;
    }

    public boolean equals(getPartfield_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_partfieldId = true;
      boolean that_present_partfieldId = true;
      if (this_present_partfieldId || that_present_partfieldId) {
        if (!(this_present_partfieldId && that_present_partfieldId))
          return false;
        if (this.partfieldId != that.partfieldId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_partfieldId = true;
      list.add(present_partfieldId);
      if (present_partfieldId)
        list.add(partfieldId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPartfield_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartfieldId()).compareTo(other.isSetPartfieldId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartfieldId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partfieldId, other.partfieldId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartfield_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partfieldId:");
      sb.append(this.partfieldId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartfield_argsStandardSchemeFactory implements SchemeFactory {
      public getPartfield_argsStandardScheme getScheme() {
        return new getPartfield_argsStandardScheme();
      }
    }

    private static class getPartfield_argsStandardScheme extends StandardScheme<getPartfield_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartfield_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTFIELD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partfieldId = iprot.readI32();
                struct.setPartfieldIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartfield_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTFIELD_ID_FIELD_DESC);
        oprot.writeI32(struct.partfieldId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartfield_argsTupleSchemeFactory implements SchemeFactory {
      public getPartfield_argsTupleScheme getScheme() {
        return new getPartfield_argsTupleScheme();
      }
    }

    private static class getPartfield_argsTupleScheme extends TupleScheme<getPartfield_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartfield_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetPartfieldId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetPartfieldId()) {
          oprot.writeI32(struct.partfieldId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartfield_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partfieldId = iprot.readI32();
          struct.setPartfieldIdIsSet(true);
        }
      }
    }

  }

  public static class getPartfield_result implements org.apache.thrift.TBase<getPartfield_result, getPartfield_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPartfield_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPartfield_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPartfield_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPartfield_resultTupleSchemeFactory());
    }

    public com.afarcloud.thrift.PartField success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.PartField.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPartfield_result.class, metaDataMap);
    }

    public getPartfield_result() {
    }

    public getPartfield_result(
      com.afarcloud.thrift.PartField success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPartfield_result(getPartfield_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.afarcloud.thrift.PartField(other.success);
      }
    }

    public getPartfield_result deepCopy() {
      return new getPartfield_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.afarcloud.thrift.PartField getSuccess() {
      return this.success;
    }

    public getPartfield_result setSuccess(com.afarcloud.thrift.PartField success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.afarcloud.thrift.PartField)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPartfield_result)
        return this.equals((getPartfield_result)that);
      return false;
    }

    public boolean equals(getPartfield_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPartfield_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPartfield_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPartfield_resultStandardSchemeFactory implements SchemeFactory {
      public getPartfield_resultStandardScheme getScheme() {
        return new getPartfield_resultStandardScheme();
      }
    }

    private static class getPartfield_resultStandardScheme extends StandardScheme<getPartfield_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPartfield_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.afarcloud.thrift.PartField();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPartfield_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPartfield_resultTupleSchemeFactory implements SchemeFactory {
      public getPartfield_resultTupleScheme getScheme() {
        return new getPartfield_resultTupleScheme();
      }
    }

    private static class getPartfield_resultTupleScheme extends TupleScheme<getPartfield_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPartfield_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPartfield_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.afarcloud.thrift.PartField();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllPartfields_args implements org.apache.thrift.TBase<getAllPartfields_args, getAllPartfields_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllPartfields_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllPartfields_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllPartfields_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllPartfields_argsTupleSchemeFactory());
    }

    public int requestId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllPartfields_args.class, metaDataMap);
    }

    public getAllPartfields_args() {
    }

    public getAllPartfields_args(
      int requestId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllPartfields_args(getAllPartfields_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
    }

    public getAllPartfields_args deepCopy() {
      return new getAllPartfields_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public getAllPartfields_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllPartfields_args)
        return this.equals((getAllPartfields_args)that);
      return false;
    }

    public boolean equals(getAllPartfields_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllPartfields_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllPartfields_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllPartfields_argsStandardSchemeFactory implements SchemeFactory {
      public getAllPartfields_argsStandardScheme getScheme() {
        return new getAllPartfields_argsStandardScheme();
      }
    }

    private static class getAllPartfields_argsStandardScheme extends StandardScheme<getAllPartfields_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllPartfields_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllPartfields_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllPartfields_argsTupleSchemeFactory implements SchemeFactory {
      public getAllPartfields_argsTupleScheme getScheme() {
        return new getAllPartfields_argsTupleScheme();
      }
    }

    private static class getAllPartfields_argsTupleScheme extends TupleScheme<getAllPartfields_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllPartfields_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllPartfields_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
      }
    }

  }

  public static class getAllPartfields_result implements org.apache.thrift.TBase<getAllPartfields_result, getAllPartfields_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllPartfields_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllPartfields_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllPartfields_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllPartfields_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.PartField> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.PartField.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllPartfields_result.class, metaDataMap);
    }

    public getAllPartfields_result() {
    }

    public getAllPartfields_result(
      List<com.afarcloud.thrift.PartField> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllPartfields_result(getAllPartfields_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.PartField> __this__success = new ArrayList<com.afarcloud.thrift.PartField>(other.success.size());
        for (com.afarcloud.thrift.PartField other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.PartField(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllPartfields_result deepCopy() {
      return new getAllPartfields_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.PartField> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.PartField elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.PartField>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.PartField> getSuccess() {
      return this.success;
    }

    public getAllPartfields_result setSuccess(List<com.afarcloud.thrift.PartField> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.PartField>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllPartfields_result)
        return this.equals((getAllPartfields_result)that);
      return false;
    }

    public boolean equals(getAllPartfields_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllPartfields_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllPartfields_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllPartfields_resultStandardSchemeFactory implements SchemeFactory {
      public getAllPartfields_resultStandardScheme getScheme() {
        return new getAllPartfields_resultStandardScheme();
      }
    }

    private static class getAllPartfields_resultStandardScheme extends StandardScheme<getAllPartfields_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllPartfields_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.PartField>(_list24.size);
                  com.afarcloud.thrift.PartField _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.afarcloud.thrift.PartField();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllPartfields_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.PartField _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllPartfields_resultTupleSchemeFactory implements SchemeFactory {
      public getAllPartfields_resultTupleScheme getScheme() {
        return new getAllPartfields_resultTupleScheme();
      }
    }

    private static class getAllPartfields_resultTupleScheme extends TupleScheme<getAllPartfields_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllPartfields_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.PartField _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllPartfields_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.PartField>(_list29.size);
            com.afarcloud.thrift.PartField _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.afarcloud.thrift.PartField();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataPF_args implements org.apache.thrift.TBase<querySensorLastDataPF_args, querySensorLastDataPF_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataPF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataPF_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARTFIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partfieldId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataPF_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataPF_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int partfieldId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      PARTFIELD_ID((short)2, "partfieldId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // PARTFIELD_ID
            return PARTFIELD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __PARTFIELDID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTFIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("partfieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataPF_args.class, metaDataMap);
    }

    public querySensorLastDataPF_args() {
    }

    public querySensorLastDataPF_args(
      int requestId,
      int partfieldId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataPF_args(querySensorLastDataPF_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.partfieldId = other.partfieldId;
    }

    public querySensorLastDataPF_args deepCopy() {
      return new querySensorLastDataPF_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setPartfieldIdIsSet(false);
      this.partfieldId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorLastDataPF_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getPartfieldId() {
      return this.partfieldId;
    }

    public querySensorLastDataPF_args setPartfieldId(int partfieldId) {
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      return this;
    }

    public void unsetPartfieldId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    /** Returns true if field partfieldId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartfieldId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    public void setPartfieldIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTFIELDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case PARTFIELD_ID:
        if (value == null) {
          unsetPartfieldId();
        } else {
          setPartfieldId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case PARTFIELD_ID:
        return Integer.valueOf(getPartfieldId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case PARTFIELD_ID:
        return isSetPartfieldId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataPF_args)
        return this.equals((querySensorLastDataPF_args)that);
      return false;
    }

    public boolean equals(querySensorLastDataPF_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_partfieldId = true;
      boolean that_present_partfieldId = true;
      if (this_present_partfieldId || that_present_partfieldId) {
        if (!(this_present_partfieldId && that_present_partfieldId))
          return false;
        if (this.partfieldId != that.partfieldId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_partfieldId = true;
      list.add(present_partfieldId);
      if (present_partfieldId)
        list.add(partfieldId);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataPF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartfieldId()).compareTo(other.isSetPartfieldId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartfieldId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partfieldId, other.partfieldId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataPF_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partfieldId:");
      sb.append(this.partfieldId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataPF_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataPF_argsStandardScheme getScheme() {
        return new querySensorLastDataPF_argsStandardScheme();
      }
    }

    private static class querySensorLastDataPF_argsStandardScheme extends StandardScheme<querySensorLastDataPF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataPF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTFIELD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partfieldId = iprot.readI32();
                struct.setPartfieldIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataPF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTFIELD_ID_FIELD_DESC);
        oprot.writeI32(struct.partfieldId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataPF_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataPF_argsTupleScheme getScheme() {
        return new querySensorLastDataPF_argsTupleScheme();
      }
    }

    private static class querySensorLastDataPF_argsTupleScheme extends TupleScheme<querySensorLastDataPF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataPF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetPartfieldId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetPartfieldId()) {
          oprot.writeI32(struct.partfieldId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataPF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partfieldId = iprot.readI32();
          struct.setPartfieldIdIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataPF_result implements org.apache.thrift.TBase<querySensorLastDataPF_result, querySensorLastDataPF_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataPF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataPF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataPF_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataPF_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataPF_result.class, metaDataMap);
    }

    public querySensorLastDataPF_result() {
    }

    public querySensorLastDataPF_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataPF_result(querySensorLastDataPF_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorLastDataPF_result deepCopy() {
      return new querySensorLastDataPF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorLastDataPF_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataPF_result)
        return this.equals((querySensorLastDataPF_result)that);
      return false;
    }

    public boolean equals(querySensorLastDataPF_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataPF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataPF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataPF_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataPF_resultStandardScheme getScheme() {
        return new querySensorLastDataPF_resultStandardScheme();
      }
    }

    private static class querySensorLastDataPF_resultStandardScheme extends StandardScheme<querySensorLastDataPF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataPF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list32.size);
                  com.afarcloud.thrift.SensorData _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new com.afarcloud.thrift.SensorData();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataPF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataPF_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataPF_resultTupleScheme getScheme() {
        return new querySensorLastDataPF_resultTupleScheme();
      }
    }

    private static class querySensorLastDataPF_resultTupleScheme extends TupleScheme<querySensorLastDataPF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataPF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataPF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list37.size);
            com.afarcloud.thrift.SensorData _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new com.afarcloud.thrift.SensorData();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataBySensorUid_args implements org.apache.thrift.TBase<querySensorLastDataBySensorUid_args, querySensorLastDataBySensorUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataBySensorUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataBySensorUid_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SENSOR_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorUid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataBySensorUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataBySensorUid_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public String sensorUid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      SENSOR_UID((short)2, "sensorUid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // SENSOR_UID
            return SENSOR_UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SENSOR_UID, new org.apache.thrift.meta_data.FieldMetaData("sensorUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataBySensorUid_args.class, metaDataMap);
    }

    public querySensorLastDataBySensorUid_args() {
    }

    public querySensorLastDataBySensorUid_args(
      int requestId,
      String sensorUid)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.sensorUid = sensorUid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataBySensorUid_args(querySensorLastDataBySensorUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetSensorUid()) {
        this.sensorUid = other.sensorUid;
      }
    }

    public querySensorLastDataBySensorUid_args deepCopy() {
      return new querySensorLastDataBySensorUid_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.sensorUid = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorLastDataBySensorUid_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public String getSensorUid() {
      return this.sensorUid;
    }

    public querySensorLastDataBySensorUid_args setSensorUid(String sensorUid) {
      this.sensorUid = sensorUid;
      return this;
    }

    public void unsetSensorUid() {
      this.sensorUid = null;
    }

    /** Returns true if field sensorUid is set (has been assigned a value) and false otherwise */
    public boolean isSetSensorUid() {
      return this.sensorUid != null;
    }

    public void setSensorUidIsSet(boolean value) {
      if (!value) {
        this.sensorUid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case SENSOR_UID:
        if (value == null) {
          unsetSensorUid();
        } else {
          setSensorUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case SENSOR_UID:
        return getSensorUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case SENSOR_UID:
        return isSetSensorUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataBySensorUid_args)
        return this.equals((querySensorLastDataBySensorUid_args)that);
      return false;
    }

    public boolean equals(querySensorLastDataBySensorUid_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_sensorUid = true && this.isSetSensorUid();
      boolean that_present_sensorUid = true && that.isSetSensorUid();
      if (this_present_sensorUid || that_present_sensorUid) {
        if (!(this_present_sensorUid && that_present_sensorUid))
          return false;
        if (!this.sensorUid.equals(that.sensorUid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_sensorUid = true && (isSetSensorUid());
      list.add(present_sensorUid);
      if (present_sensorUid)
        list.add(sensorUid);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataBySensorUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSensorUid()).compareTo(other.isSetSensorUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSensorUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorUid, other.sensorUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataBySensorUid_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sensorUid:");
      if (this.sensorUid == null) {
        sb.append("null");
      } else {
        sb.append(this.sensorUid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataBySensorUid_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorUid_argsStandardScheme getScheme() {
        return new querySensorLastDataBySensorUid_argsStandardScheme();
      }
    }

    private static class querySensorLastDataBySensorUid_argsStandardScheme extends StandardScheme<querySensorLastDataBySensorUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataBySensorUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SENSOR_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sensorUid = iprot.readString();
                struct.setSensorUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataBySensorUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.sensorUid != null) {
          oprot.writeFieldBegin(SENSOR_UID_FIELD_DESC);
          oprot.writeString(struct.sensorUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataBySensorUid_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorUid_argsTupleScheme getScheme() {
        return new querySensorLastDataBySensorUid_argsTupleScheme();
      }
    }

    private static class querySensorLastDataBySensorUid_argsTupleScheme extends TupleScheme<querySensorLastDataBySensorUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetSensorUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetSensorUid()) {
          oprot.writeString(struct.sensorUid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sensorUid = iprot.readString();
          struct.setSensorUidIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataBySensorUid_result implements org.apache.thrift.TBase<querySensorLastDataBySensorUid_result, querySensorLastDataBySensorUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataBySensorUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataBySensorUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataBySensorUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataBySensorUid_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataBySensorUid_result.class, metaDataMap);
    }

    public querySensorLastDataBySensorUid_result() {
    }

    public querySensorLastDataBySensorUid_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataBySensorUid_result(querySensorLastDataBySensorUid_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorLastDataBySensorUid_result deepCopy() {
      return new querySensorLastDataBySensorUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorLastDataBySensorUid_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataBySensorUid_result)
        return this.equals((querySensorLastDataBySensorUid_result)that);
      return false;
    }

    public boolean equals(querySensorLastDataBySensorUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataBySensorUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataBySensorUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataBySensorUid_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorUid_resultStandardScheme getScheme() {
        return new querySensorLastDataBySensorUid_resultStandardScheme();
      }
    }

    private static class querySensorLastDataBySensorUid_resultStandardScheme extends StandardScheme<querySensorLastDataBySensorUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataBySensorUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list40.size);
                  com.afarcloud.thrift.SensorData _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new com.afarcloud.thrift.SensorData();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataBySensorUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataBySensorUid_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorUid_resultTupleScheme getScheme() {
        return new querySensorLastDataBySensorUid_resultTupleScheme();
      }
    }

    private static class querySensorLastDataBySensorUid_resultTupleScheme extends TupleScheme<querySensorLastDataBySensorUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list45.size);
            com.afarcloud.thrift.SensorData _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new com.afarcloud.thrift.SensorData();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataBySensorTypePF_args implements org.apache.thrift.TBase<querySensorLastDataBySensorTypePF_args, querySensorLastDataBySensorTypePF_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataBySensorTypePF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataBySensorTypePF_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARTFIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partfieldId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SENSOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataBySensorTypePF_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataBySensorTypePF_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int partfieldId; // required
    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public com.afarcloud.thrift.SensorType sensorType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      PARTFIELD_ID((short)2, "partfieldId"),
      /**
       * 
       * @see com.afarcloud.thrift.SensorType
       */
      SENSOR_TYPE((short)3, "sensorType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // PARTFIELD_ID
            return PARTFIELD_ID;
          case 3: // SENSOR_TYPE
            return SENSOR_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __PARTFIELDID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTFIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("partfieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SENSOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sensorType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.afarcloud.thrift.SensorType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataBySensorTypePF_args.class, metaDataMap);
    }

    public querySensorLastDataBySensorTypePF_args() {
    }

    public querySensorLastDataBySensorTypePF_args(
      int requestId,
      int partfieldId,
      com.afarcloud.thrift.SensorType sensorType)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      this.sensorType = sensorType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataBySensorTypePF_args(querySensorLastDataBySensorTypePF_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.partfieldId = other.partfieldId;
      if (other.isSetSensorType()) {
        this.sensorType = other.sensorType;
      }
    }

    public querySensorLastDataBySensorTypePF_args deepCopy() {
      return new querySensorLastDataBySensorTypePF_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setPartfieldIdIsSet(false);
      this.partfieldId = 0;
      this.sensorType = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorLastDataBySensorTypePF_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getPartfieldId() {
      return this.partfieldId;
    }

    public querySensorLastDataBySensorTypePF_args setPartfieldId(int partfieldId) {
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      return this;
    }

    public void unsetPartfieldId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    /** Returns true if field partfieldId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartfieldId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    public void setPartfieldIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTFIELDID_ISSET_ID, value);
    }

    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public com.afarcloud.thrift.SensorType getSensorType() {
      return this.sensorType;
    }

    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public querySensorLastDataBySensorTypePF_args setSensorType(com.afarcloud.thrift.SensorType sensorType) {
      this.sensorType = sensorType;
      return this;
    }

    public void unsetSensorType() {
      this.sensorType = null;
    }

    /** Returns true if field sensorType is set (has been assigned a value) and false otherwise */
    public boolean isSetSensorType() {
      return this.sensorType != null;
    }

    public void setSensorTypeIsSet(boolean value) {
      if (!value) {
        this.sensorType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case PARTFIELD_ID:
        if (value == null) {
          unsetPartfieldId();
        } else {
          setPartfieldId((Integer)value);
        }
        break;

      case SENSOR_TYPE:
        if (value == null) {
          unsetSensorType();
        } else {
          setSensorType((com.afarcloud.thrift.SensorType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case PARTFIELD_ID:
        return Integer.valueOf(getPartfieldId());

      case SENSOR_TYPE:
        return getSensorType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case PARTFIELD_ID:
        return isSetPartfieldId();
      case SENSOR_TYPE:
        return isSetSensorType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataBySensorTypePF_args)
        return this.equals((querySensorLastDataBySensorTypePF_args)that);
      return false;
    }

    public boolean equals(querySensorLastDataBySensorTypePF_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_partfieldId = true;
      boolean that_present_partfieldId = true;
      if (this_present_partfieldId || that_present_partfieldId) {
        if (!(this_present_partfieldId && that_present_partfieldId))
          return false;
        if (this.partfieldId != that.partfieldId)
          return false;
      }

      boolean this_present_sensorType = true && this.isSetSensorType();
      boolean that_present_sensorType = true && that.isSetSensorType();
      if (this_present_sensorType || that_present_sensorType) {
        if (!(this_present_sensorType && that_present_sensorType))
          return false;
        if (!this.sensorType.equals(that.sensorType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_partfieldId = true;
      list.add(present_partfieldId);
      if (present_partfieldId)
        list.add(partfieldId);

      boolean present_sensorType = true && (isSetSensorType());
      list.add(present_sensorType);
      if (present_sensorType)
        list.add(sensorType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataBySensorTypePF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartfieldId()).compareTo(other.isSetPartfieldId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartfieldId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partfieldId, other.partfieldId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSensorType()).compareTo(other.isSetSensorType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSensorType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorType, other.sensorType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataBySensorTypePF_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partfieldId:");
      sb.append(this.partfieldId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sensorType:");
      if (this.sensorType == null) {
        sb.append("null");
      } else {
        sb.append(this.sensorType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataBySensorTypePF_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorTypePF_argsStandardScheme getScheme() {
        return new querySensorLastDataBySensorTypePF_argsStandardScheme();
      }
    }

    private static class querySensorLastDataBySensorTypePF_argsStandardScheme extends StandardScheme<querySensorLastDataBySensorTypePF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataBySensorTypePF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTFIELD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partfieldId = iprot.readI32();
                struct.setPartfieldIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SENSOR_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
                struct.setSensorTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataBySensorTypePF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTFIELD_ID_FIELD_DESC);
        oprot.writeI32(struct.partfieldId);
        oprot.writeFieldEnd();
        if (struct.sensorType != null) {
          oprot.writeFieldBegin(SENSOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.sensorType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataBySensorTypePF_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorTypePF_argsTupleScheme getScheme() {
        return new querySensorLastDataBySensorTypePF_argsTupleScheme();
      }
    }

    private static class querySensorLastDataBySensorTypePF_argsTupleScheme extends TupleScheme<querySensorLastDataBySensorTypePF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorTypePF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetPartfieldId()) {
          optionals.set(1);
        }
        if (struct.isSetSensorType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetPartfieldId()) {
          oprot.writeI32(struct.partfieldId);
        }
        if (struct.isSetSensorType()) {
          oprot.writeI32(struct.sensorType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorTypePF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partfieldId = iprot.readI32();
          struct.setPartfieldIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
          struct.setSensorTypeIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataBySensorTypePF_result implements org.apache.thrift.TBase<querySensorLastDataBySensorTypePF_result, querySensorLastDataBySensorTypePF_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataBySensorTypePF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataBySensorTypePF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataBySensorTypePF_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataBySensorTypePF_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataBySensorTypePF_result.class, metaDataMap);
    }

    public querySensorLastDataBySensorTypePF_result() {
    }

    public querySensorLastDataBySensorTypePF_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataBySensorTypePF_result(querySensorLastDataBySensorTypePF_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorLastDataBySensorTypePF_result deepCopy() {
      return new querySensorLastDataBySensorTypePF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorLastDataBySensorTypePF_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataBySensorTypePF_result)
        return this.equals((querySensorLastDataBySensorTypePF_result)that);
      return false;
    }

    public boolean equals(querySensorLastDataBySensorTypePF_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataBySensorTypePF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataBySensorTypePF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataBySensorTypePF_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorTypePF_resultStandardScheme getScheme() {
        return new querySensorLastDataBySensorTypePF_resultStandardScheme();
      }
    }

    private static class querySensorLastDataBySensorTypePF_resultStandardScheme extends StandardScheme<querySensorLastDataBySensorTypePF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataBySensorTypePF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list48.size);
                  com.afarcloud.thrift.SensorData _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new com.afarcloud.thrift.SensorData();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataBySensorTypePF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataBySensorTypePF_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorTypePF_resultTupleScheme getScheme() {
        return new querySensorLastDataBySensorTypePF_resultTupleScheme();
      }
    }

    private static class querySensorLastDataBySensorTypePF_resultTupleScheme extends TupleScheme<querySensorLastDataBySensorTypePF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorTypePF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorTypePF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list53.size);
            com.afarcloud.thrift.SensorData _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new com.afarcloud.thrift.SensorData();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataByObservationTypePF_args implements org.apache.thrift.TBase<querySensorLastDataByObservationTypePF_args, querySensorLastDataByObservationTypePF_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataByObservationTypePF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataByObservationTypePF_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARTFIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partfieldId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField OBSER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("obserType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataByObservationTypePF_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataByObservationTypePF_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int partfieldId; // required
    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public com.afarcloud.thrift.ObservationType obserType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      PARTFIELD_ID((short)2, "partfieldId"),
      /**
       * 
       * @see com.afarcloud.thrift.ObservationType
       */
      OBSER_TYPE((short)3, "obserType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // PARTFIELD_ID
            return PARTFIELD_ID;
          case 3: // OBSER_TYPE
            return OBSER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __PARTFIELDID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTFIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("partfieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OBSER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("obserType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.afarcloud.thrift.ObservationType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataByObservationTypePF_args.class, metaDataMap);
    }

    public querySensorLastDataByObservationTypePF_args() {
    }

    public querySensorLastDataByObservationTypePF_args(
      int requestId,
      int partfieldId,
      com.afarcloud.thrift.ObservationType obserType)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      this.obserType = obserType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataByObservationTypePF_args(querySensorLastDataByObservationTypePF_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.partfieldId = other.partfieldId;
      if (other.isSetObserType()) {
        this.obserType = other.obserType;
      }
    }

    public querySensorLastDataByObservationTypePF_args deepCopy() {
      return new querySensorLastDataByObservationTypePF_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setPartfieldIdIsSet(false);
      this.partfieldId = 0;
      this.obserType = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorLastDataByObservationTypePF_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getPartfieldId() {
      return this.partfieldId;
    }

    public querySensorLastDataByObservationTypePF_args setPartfieldId(int partfieldId) {
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      return this;
    }

    public void unsetPartfieldId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    /** Returns true if field partfieldId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartfieldId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    public void setPartfieldIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTFIELDID_ISSET_ID, value);
    }

    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public com.afarcloud.thrift.ObservationType getObserType() {
      return this.obserType;
    }

    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public querySensorLastDataByObservationTypePF_args setObserType(com.afarcloud.thrift.ObservationType obserType) {
      this.obserType = obserType;
      return this;
    }

    public void unsetObserType() {
      this.obserType = null;
    }

    /** Returns true if field obserType is set (has been assigned a value) and false otherwise */
    public boolean isSetObserType() {
      return this.obserType != null;
    }

    public void setObserTypeIsSet(boolean value) {
      if (!value) {
        this.obserType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case PARTFIELD_ID:
        if (value == null) {
          unsetPartfieldId();
        } else {
          setPartfieldId((Integer)value);
        }
        break;

      case OBSER_TYPE:
        if (value == null) {
          unsetObserType();
        } else {
          setObserType((com.afarcloud.thrift.ObservationType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case PARTFIELD_ID:
        return Integer.valueOf(getPartfieldId());

      case OBSER_TYPE:
        return getObserType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case PARTFIELD_ID:
        return isSetPartfieldId();
      case OBSER_TYPE:
        return isSetObserType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataByObservationTypePF_args)
        return this.equals((querySensorLastDataByObservationTypePF_args)that);
      return false;
    }

    public boolean equals(querySensorLastDataByObservationTypePF_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_partfieldId = true;
      boolean that_present_partfieldId = true;
      if (this_present_partfieldId || that_present_partfieldId) {
        if (!(this_present_partfieldId && that_present_partfieldId))
          return false;
        if (this.partfieldId != that.partfieldId)
          return false;
      }

      boolean this_present_obserType = true && this.isSetObserType();
      boolean that_present_obserType = true && that.isSetObserType();
      if (this_present_obserType || that_present_obserType) {
        if (!(this_present_obserType && that_present_obserType))
          return false;
        if (!this.obserType.equals(that.obserType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_partfieldId = true;
      list.add(present_partfieldId);
      if (present_partfieldId)
        list.add(partfieldId);

      boolean present_obserType = true && (isSetObserType());
      list.add(present_obserType);
      if (present_obserType)
        list.add(obserType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataByObservationTypePF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartfieldId()).compareTo(other.isSetPartfieldId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartfieldId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partfieldId, other.partfieldId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetObserType()).compareTo(other.isSetObserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obserType, other.obserType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataByObservationTypePF_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partfieldId:");
      sb.append(this.partfieldId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("obserType:");
      if (this.obserType == null) {
        sb.append("null");
      } else {
        sb.append(this.obserType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataByObservationTypePF_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataByObservationTypePF_argsStandardScheme getScheme() {
        return new querySensorLastDataByObservationTypePF_argsStandardScheme();
      }
    }

    private static class querySensorLastDataByObservationTypePF_argsStandardScheme extends StandardScheme<querySensorLastDataByObservationTypePF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataByObservationTypePF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTFIELD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partfieldId = iprot.readI32();
                struct.setPartfieldIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OBSER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.obserType = com.afarcloud.thrift.ObservationType.findByValue(iprot.readI32());
                struct.setObserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataByObservationTypePF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTFIELD_ID_FIELD_DESC);
        oprot.writeI32(struct.partfieldId);
        oprot.writeFieldEnd();
        if (struct.obserType != null) {
          oprot.writeFieldBegin(OBSER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.obserType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataByObservationTypePF_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataByObservationTypePF_argsTupleScheme getScheme() {
        return new querySensorLastDataByObservationTypePF_argsTupleScheme();
      }
    }

    private static class querySensorLastDataByObservationTypePF_argsTupleScheme extends TupleScheme<querySensorLastDataByObservationTypePF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataByObservationTypePF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetPartfieldId()) {
          optionals.set(1);
        }
        if (struct.isSetObserType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetPartfieldId()) {
          oprot.writeI32(struct.partfieldId);
        }
        if (struct.isSetObserType()) {
          oprot.writeI32(struct.obserType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataByObservationTypePF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partfieldId = iprot.readI32();
          struct.setPartfieldIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.obserType = com.afarcloud.thrift.ObservationType.findByValue(iprot.readI32());
          struct.setObserTypeIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataByObservationTypePF_result implements org.apache.thrift.TBase<querySensorLastDataByObservationTypePF_result, querySensorLastDataByObservationTypePF_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataByObservationTypePF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataByObservationTypePF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataByObservationTypePF_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataByObservationTypePF_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataByObservationTypePF_result.class, metaDataMap);
    }

    public querySensorLastDataByObservationTypePF_result() {
    }

    public querySensorLastDataByObservationTypePF_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataByObservationTypePF_result(querySensorLastDataByObservationTypePF_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorLastDataByObservationTypePF_result deepCopy() {
      return new querySensorLastDataByObservationTypePF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorLastDataByObservationTypePF_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataByObservationTypePF_result)
        return this.equals((querySensorLastDataByObservationTypePF_result)that);
      return false;
    }

    public boolean equals(querySensorLastDataByObservationTypePF_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataByObservationTypePF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataByObservationTypePF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataByObservationTypePF_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataByObservationTypePF_resultStandardScheme getScheme() {
        return new querySensorLastDataByObservationTypePF_resultStandardScheme();
      }
    }

    private static class querySensorLastDataByObservationTypePF_resultStandardScheme extends StandardScheme<querySensorLastDataByObservationTypePF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataByObservationTypePF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list56.size);
                  com.afarcloud.thrift.SensorData _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new com.afarcloud.thrift.SensorData();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataByObservationTypePF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataByObservationTypePF_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataByObservationTypePF_resultTupleScheme getScheme() {
        return new querySensorLastDataByObservationTypePF_resultTupleScheme();
      }
    }

    private static class querySensorLastDataByObservationTypePF_resultTupleScheme extends TupleScheme<querySensorLastDataByObservationTypePF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataByObservationTypePF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataByObservationTypePF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list61.size);
            com.afarcloud.thrift.SensorData _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new com.afarcloud.thrift.SensorData();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataC_args implements org.apache.thrift.TBase<querySensorLastDataC_args, querySensorLastDataC_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataC_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataC_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataC_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataC_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataC_args.class, metaDataMap);
    }

    public querySensorLastDataC_args() {
    }

    public querySensorLastDataC_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataC_args(querySensorLastDataC_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
    }

    public querySensorLastDataC_args deepCopy() {
      return new querySensorLastDataC_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorLastDataC_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public querySensorLastDataC_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public querySensorLastDataC_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataC_args)
        return this.equals((querySensorLastDataC_args)that);
      return false;
    }

    public boolean equals(querySensorLastDataC_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataC_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataC_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataC_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataC_argsStandardScheme getScheme() {
        return new querySensorLastDataC_argsStandardScheme();
      }
    }

    private static class querySensorLastDataC_argsStandardScheme extends StandardScheme<querySensorLastDataC_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataC_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataC_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataC_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataC_argsTupleScheme getScheme() {
        return new querySensorLastDataC_argsTupleScheme();
      }
    }

    private static class querySensorLastDataC_argsTupleScheme extends TupleScheme<querySensorLastDataC_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataC_result implements org.apache.thrift.TBase<querySensorLastDataC_result, querySensorLastDataC_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataC_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataC_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataC_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataC_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataC_result.class, metaDataMap);
    }

    public querySensorLastDataC_result() {
    }

    public querySensorLastDataC_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataC_result(querySensorLastDataC_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorLastDataC_result deepCopy() {
      return new querySensorLastDataC_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorLastDataC_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataC_result)
        return this.equals((querySensorLastDataC_result)that);
      return false;
    }

    public boolean equals(querySensorLastDataC_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataC_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataC_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataC_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataC_resultStandardScheme getScheme() {
        return new querySensorLastDataC_resultStandardScheme();
      }
    }

    private static class querySensorLastDataC_resultStandardScheme extends StandardScheme<querySensorLastDataC_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataC_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list64.size);
                  com.afarcloud.thrift.SensorData _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new com.afarcloud.thrift.SensorData();
                    _elem65.read(iprot);
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataC_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataC_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataC_resultTupleScheme getScheme() {
        return new querySensorLastDataC_resultTupleScheme();
      }
    }

    private static class querySensorLastDataC_resultTupleScheme extends TupleScheme<querySensorLastDataC_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list69.size);
            com.afarcloud.thrift.SensorData _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new com.afarcloud.thrift.SensorData();
              _elem70.read(iprot);
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataBySensorTypeC_args implements org.apache.thrift.TBase<querySensorLastDataBySensorTypeC_args, querySensorLastDataBySensorTypeC_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataBySensorTypeC_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataBySensorTypeC_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SENSOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorType", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataBySensorTypeC_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataBySensorTypeC_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required
    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public com.afarcloud.thrift.SensorType sensorType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius"),
      /**
       * 
       * @see com.afarcloud.thrift.SensorType
       */
      SENSOR_TYPE((short)4, "sensorType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          case 4: // SENSOR_TYPE
            return SENSOR_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SENSOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sensorType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.afarcloud.thrift.SensorType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataBySensorTypeC_args.class, metaDataMap);
    }

    public querySensorLastDataBySensorTypeC_args() {
    }

    public querySensorLastDataBySensorTypeC_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius,
      com.afarcloud.thrift.SensorType sensorType)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
      this.sensorType = sensorType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataBySensorTypeC_args(querySensorLastDataBySensorTypeC_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
      if (other.isSetSensorType()) {
        this.sensorType = other.sensorType;
      }
    }

    public querySensorLastDataBySensorTypeC_args deepCopy() {
      return new querySensorLastDataBySensorTypeC_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
      this.sensorType = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorLastDataBySensorTypeC_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public querySensorLastDataBySensorTypeC_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public querySensorLastDataBySensorTypeC_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public com.afarcloud.thrift.SensorType getSensorType() {
      return this.sensorType;
    }

    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public querySensorLastDataBySensorTypeC_args setSensorType(com.afarcloud.thrift.SensorType sensorType) {
      this.sensorType = sensorType;
      return this;
    }

    public void unsetSensorType() {
      this.sensorType = null;
    }

    /** Returns true if field sensorType is set (has been assigned a value) and false otherwise */
    public boolean isSetSensorType() {
      return this.sensorType != null;
    }

    public void setSensorTypeIsSet(boolean value) {
      if (!value) {
        this.sensorType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      case SENSOR_TYPE:
        if (value == null) {
          unsetSensorType();
        } else {
          setSensorType((com.afarcloud.thrift.SensorType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      case SENSOR_TYPE:
        return getSensorType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      case SENSOR_TYPE:
        return isSetSensorType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataBySensorTypeC_args)
        return this.equals((querySensorLastDataBySensorTypeC_args)that);
      return false;
    }

    public boolean equals(querySensorLastDataBySensorTypeC_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      boolean this_present_sensorType = true && this.isSetSensorType();
      boolean that_present_sensorType = true && that.isSetSensorType();
      if (this_present_sensorType || that_present_sensorType) {
        if (!(this_present_sensorType && that_present_sensorType))
          return false;
        if (!this.sensorType.equals(that.sensorType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      boolean present_sensorType = true && (isSetSensorType());
      list.add(present_sensorType);
      if (present_sensorType)
        list.add(sensorType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataBySensorTypeC_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSensorType()).compareTo(other.isSetSensorType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSensorType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorType, other.sensorType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataBySensorTypeC_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sensorType:");
      if (this.sensorType == null) {
        sb.append("null");
      } else {
        sb.append(this.sensorType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataBySensorTypeC_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorTypeC_argsStandardScheme getScheme() {
        return new querySensorLastDataBySensorTypeC_argsStandardScheme();
      }
    }

    private static class querySensorLastDataBySensorTypeC_argsStandardScheme extends StandardScheme<querySensorLastDataBySensorTypeC_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataBySensorTypeC_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SENSOR_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
                struct.setSensorTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataBySensorTypeC_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        if (struct.sensorType != null) {
          oprot.writeFieldBegin(SENSOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.sensorType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataBySensorTypeC_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorTypeC_argsTupleScheme getScheme() {
        return new querySensorLastDataBySensorTypeC_argsTupleScheme();
      }
    }

    private static class querySensorLastDataBySensorTypeC_argsTupleScheme extends TupleScheme<querySensorLastDataBySensorTypeC_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorTypeC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        if (struct.isSetSensorType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
        if (struct.isSetSensorType()) {
          oprot.writeI32(struct.sensorType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorTypeC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
          struct.setSensorTypeIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataBySensorTypeC_result implements org.apache.thrift.TBase<querySensorLastDataBySensorTypeC_result, querySensorLastDataBySensorTypeC_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataBySensorTypeC_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataBySensorTypeC_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataBySensorTypeC_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataBySensorTypeC_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataBySensorTypeC_result.class, metaDataMap);
    }

    public querySensorLastDataBySensorTypeC_result() {
    }

    public querySensorLastDataBySensorTypeC_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataBySensorTypeC_result(querySensorLastDataBySensorTypeC_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorLastDataBySensorTypeC_result deepCopy() {
      return new querySensorLastDataBySensorTypeC_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorLastDataBySensorTypeC_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataBySensorTypeC_result)
        return this.equals((querySensorLastDataBySensorTypeC_result)that);
      return false;
    }

    public boolean equals(querySensorLastDataBySensorTypeC_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataBySensorTypeC_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataBySensorTypeC_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataBySensorTypeC_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorTypeC_resultStandardScheme getScheme() {
        return new querySensorLastDataBySensorTypeC_resultStandardScheme();
      }
    }

    private static class querySensorLastDataBySensorTypeC_resultStandardScheme extends StandardScheme<querySensorLastDataBySensorTypeC_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataBySensorTypeC_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list72.size);
                  com.afarcloud.thrift.SensorData _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new com.afarcloud.thrift.SensorData();
                    _elem73.read(iprot);
                    struct.success.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataBySensorTypeC_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataBySensorTypeC_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataBySensorTypeC_resultTupleScheme getScheme() {
        return new querySensorLastDataBySensorTypeC_resultTupleScheme();
      }
    }

    private static class querySensorLastDataBySensorTypeC_resultTupleScheme extends TupleScheme<querySensorLastDataBySensorTypeC_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorTypeC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataBySensorTypeC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list77.size);
            com.afarcloud.thrift.SensorData _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new com.afarcloud.thrift.SensorData();
              _elem78.read(iprot);
              struct.success.add(_elem78);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataByObservationTypeC_args implements org.apache.thrift.TBase<querySensorLastDataByObservationTypeC_args, querySensorLastDataByObservationTypeC_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataByObservationTypeC_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataByObservationTypeC_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField OBSER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("obserType", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataByObservationTypeC_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataByObservationTypeC_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required
    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public com.afarcloud.thrift.ObservationType obserType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius"),
      /**
       * 
       * @see com.afarcloud.thrift.ObservationType
       */
      OBSER_TYPE((short)4, "obserType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          case 4: // OBSER_TYPE
            return OBSER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OBSER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("obserType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.afarcloud.thrift.ObservationType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataByObservationTypeC_args.class, metaDataMap);
    }

    public querySensorLastDataByObservationTypeC_args() {
    }

    public querySensorLastDataByObservationTypeC_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius,
      com.afarcloud.thrift.ObservationType obserType)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
      this.obserType = obserType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataByObservationTypeC_args(querySensorLastDataByObservationTypeC_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
      if (other.isSetObserType()) {
        this.obserType = other.obserType;
      }
    }

    public querySensorLastDataByObservationTypeC_args deepCopy() {
      return new querySensorLastDataByObservationTypeC_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
      this.obserType = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorLastDataByObservationTypeC_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public querySensorLastDataByObservationTypeC_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public querySensorLastDataByObservationTypeC_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public com.afarcloud.thrift.ObservationType getObserType() {
      return this.obserType;
    }

    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public querySensorLastDataByObservationTypeC_args setObserType(com.afarcloud.thrift.ObservationType obserType) {
      this.obserType = obserType;
      return this;
    }

    public void unsetObserType() {
      this.obserType = null;
    }

    /** Returns true if field obserType is set (has been assigned a value) and false otherwise */
    public boolean isSetObserType() {
      return this.obserType != null;
    }

    public void setObserTypeIsSet(boolean value) {
      if (!value) {
        this.obserType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      case OBSER_TYPE:
        if (value == null) {
          unsetObserType();
        } else {
          setObserType((com.afarcloud.thrift.ObservationType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      case OBSER_TYPE:
        return getObserType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      case OBSER_TYPE:
        return isSetObserType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataByObservationTypeC_args)
        return this.equals((querySensorLastDataByObservationTypeC_args)that);
      return false;
    }

    public boolean equals(querySensorLastDataByObservationTypeC_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      boolean this_present_obserType = true && this.isSetObserType();
      boolean that_present_obserType = true && that.isSetObserType();
      if (this_present_obserType || that_present_obserType) {
        if (!(this_present_obserType && that_present_obserType))
          return false;
        if (!this.obserType.equals(that.obserType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      boolean present_obserType = true && (isSetObserType());
      list.add(present_obserType);
      if (present_obserType)
        list.add(obserType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataByObservationTypeC_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetObserType()).compareTo(other.isSetObserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obserType, other.obserType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataByObservationTypeC_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      if (!first) sb.append(", ");
      sb.append("obserType:");
      if (this.obserType == null) {
        sb.append("null");
      } else {
        sb.append(this.obserType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataByObservationTypeC_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataByObservationTypeC_argsStandardScheme getScheme() {
        return new querySensorLastDataByObservationTypeC_argsStandardScheme();
      }
    }

    private static class querySensorLastDataByObservationTypeC_argsStandardScheme extends StandardScheme<querySensorLastDataByObservationTypeC_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataByObservationTypeC_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OBSER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.obserType = com.afarcloud.thrift.ObservationType.findByValue(iprot.readI32());
                struct.setObserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataByObservationTypeC_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        if (struct.obserType != null) {
          oprot.writeFieldBegin(OBSER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.obserType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataByObservationTypeC_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataByObservationTypeC_argsTupleScheme getScheme() {
        return new querySensorLastDataByObservationTypeC_argsTupleScheme();
      }
    }

    private static class querySensorLastDataByObservationTypeC_argsTupleScheme extends TupleScheme<querySensorLastDataByObservationTypeC_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataByObservationTypeC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        if (struct.isSetObserType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
        if (struct.isSetObserType()) {
          oprot.writeI32(struct.obserType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataByObservationTypeC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.obserType = com.afarcloud.thrift.ObservationType.findByValue(iprot.readI32());
          struct.setObserTypeIsSet(true);
        }
      }
    }

  }

  public static class querySensorLastDataByObservationTypeC_result implements org.apache.thrift.TBase<querySensorLastDataByObservationTypeC_result, querySensorLastDataByObservationTypeC_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorLastDataByObservationTypeC_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorLastDataByObservationTypeC_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorLastDataByObservationTypeC_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorLastDataByObservationTypeC_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorLastDataByObservationTypeC_result.class, metaDataMap);
    }

    public querySensorLastDataByObservationTypeC_result() {
    }

    public querySensorLastDataByObservationTypeC_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorLastDataByObservationTypeC_result(querySensorLastDataByObservationTypeC_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorLastDataByObservationTypeC_result deepCopy() {
      return new querySensorLastDataByObservationTypeC_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorLastDataByObservationTypeC_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorLastDataByObservationTypeC_result)
        return this.equals((querySensorLastDataByObservationTypeC_result)that);
      return false;
    }

    public boolean equals(querySensorLastDataByObservationTypeC_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorLastDataByObservationTypeC_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorLastDataByObservationTypeC_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorLastDataByObservationTypeC_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorLastDataByObservationTypeC_resultStandardScheme getScheme() {
        return new querySensorLastDataByObservationTypeC_resultStandardScheme();
      }
    }

    private static class querySensorLastDataByObservationTypeC_resultStandardScheme extends StandardScheme<querySensorLastDataByObservationTypeC_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorLastDataByObservationTypeC_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list80.size);
                  com.afarcloud.thrift.SensorData _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new com.afarcloud.thrift.SensorData();
                    _elem81.read(iprot);
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorLastDataByObservationTypeC_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorLastDataByObservationTypeC_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorLastDataByObservationTypeC_resultTupleScheme getScheme() {
        return new querySensorLastDataByObservationTypeC_resultTupleScheme();
      }
    }

    private static class querySensorLastDataByObservationTypeC_resultTupleScheme extends TupleScheme<querySensorLastDataByObservationTypeC_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataByObservationTypeC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorLastDataByObservationTypeC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list85.size);
            com.afarcloud.thrift.SensorData _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = new com.afarcloud.thrift.SensorData();
              _elem86.read(iprot);
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCollarLastDataPF_args implements org.apache.thrift.TBase<queryCollarLastDataPF_args, queryCollarLastDataPF_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarLastDataPF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarLastDataPF_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARTFIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partfieldId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarLastDataPF_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarLastDataPF_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int partfieldId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      PARTFIELD_ID((short)2, "partfieldId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // PARTFIELD_ID
            return PARTFIELD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __PARTFIELDID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTFIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("partfieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarLastDataPF_args.class, metaDataMap);
    }

    public queryCollarLastDataPF_args() {
    }

    public queryCollarLastDataPF_args(
      int requestId,
      int partfieldId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarLastDataPF_args(queryCollarLastDataPF_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.partfieldId = other.partfieldId;
    }

    public queryCollarLastDataPF_args deepCopy() {
      return new queryCollarLastDataPF_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setPartfieldIdIsSet(false);
      this.partfieldId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryCollarLastDataPF_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getPartfieldId() {
      return this.partfieldId;
    }

    public queryCollarLastDataPF_args setPartfieldId(int partfieldId) {
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      return this;
    }

    public void unsetPartfieldId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    /** Returns true if field partfieldId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartfieldId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    public void setPartfieldIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTFIELDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case PARTFIELD_ID:
        if (value == null) {
          unsetPartfieldId();
        } else {
          setPartfieldId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case PARTFIELD_ID:
        return Integer.valueOf(getPartfieldId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case PARTFIELD_ID:
        return isSetPartfieldId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarLastDataPF_args)
        return this.equals((queryCollarLastDataPF_args)that);
      return false;
    }

    public boolean equals(queryCollarLastDataPF_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_partfieldId = true;
      boolean that_present_partfieldId = true;
      if (this_present_partfieldId || that_present_partfieldId) {
        if (!(this_present_partfieldId && that_present_partfieldId))
          return false;
        if (this.partfieldId != that.partfieldId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_partfieldId = true;
      list.add(present_partfieldId);
      if (present_partfieldId)
        list.add(partfieldId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarLastDataPF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartfieldId()).compareTo(other.isSetPartfieldId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartfieldId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partfieldId, other.partfieldId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarLastDataPF_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partfieldId:");
      sb.append(this.partfieldId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarLastDataPF_argsStandardSchemeFactory implements SchemeFactory {
      public queryCollarLastDataPF_argsStandardScheme getScheme() {
        return new queryCollarLastDataPF_argsStandardScheme();
      }
    }

    private static class queryCollarLastDataPF_argsStandardScheme extends StandardScheme<queryCollarLastDataPF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarLastDataPF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTFIELD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partfieldId = iprot.readI32();
                struct.setPartfieldIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarLastDataPF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTFIELD_ID_FIELD_DESC);
        oprot.writeI32(struct.partfieldId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarLastDataPF_argsTupleSchemeFactory implements SchemeFactory {
      public queryCollarLastDataPF_argsTupleScheme getScheme() {
        return new queryCollarLastDataPF_argsTupleScheme();
      }
    }

    private static class queryCollarLastDataPF_argsTupleScheme extends TupleScheme<queryCollarLastDataPF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataPF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetPartfieldId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetPartfieldId()) {
          oprot.writeI32(struct.partfieldId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataPF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partfieldId = iprot.readI32();
          struct.setPartfieldIdIsSet(true);
        }
      }
    }

  }

  public static class queryCollarLastDataPF_result implements org.apache.thrift.TBase<queryCollarLastDataPF_result, queryCollarLastDataPF_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarLastDataPF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarLastDataPF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarLastDataPF_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarLastDataPF_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.CollarData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.CollarData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarLastDataPF_result.class, metaDataMap);
    }

    public queryCollarLastDataPF_result() {
    }

    public queryCollarLastDataPF_result(
      List<com.afarcloud.thrift.CollarData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarLastDataPF_result(queryCollarLastDataPF_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.CollarData> __this__success = new ArrayList<com.afarcloud.thrift.CollarData>(other.success.size());
        for (com.afarcloud.thrift.CollarData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.CollarData(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCollarLastDataPF_result deepCopy() {
      return new queryCollarLastDataPF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.CollarData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.CollarData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.CollarData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.CollarData> getSuccess() {
      return this.success;
    }

    public queryCollarLastDataPF_result setSuccess(List<com.afarcloud.thrift.CollarData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.CollarData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarLastDataPF_result)
        return this.equals((queryCollarLastDataPF_result)that);
      return false;
    }

    public boolean equals(queryCollarLastDataPF_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarLastDataPF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarLastDataPF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarLastDataPF_resultStandardSchemeFactory implements SchemeFactory {
      public queryCollarLastDataPF_resultStandardScheme getScheme() {
        return new queryCollarLastDataPF_resultStandardScheme();
      }
    }

    private static class queryCollarLastDataPF_resultStandardScheme extends StandardScheme<queryCollarLastDataPF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarLastDataPF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list88.size);
                  com.afarcloud.thrift.CollarData _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = new com.afarcloud.thrift.CollarData();
                    _elem89.read(iprot);
                    struct.success.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarLastDataPF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.CollarData _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarLastDataPF_resultTupleSchemeFactory implements SchemeFactory {
      public queryCollarLastDataPF_resultTupleScheme getScheme() {
        return new queryCollarLastDataPF_resultTupleScheme();
      }
    }

    private static class queryCollarLastDataPF_resultTupleScheme extends TupleScheme<queryCollarLastDataPF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataPF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.CollarData _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataPF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list93.size);
            com.afarcloud.thrift.CollarData _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = new com.afarcloud.thrift.CollarData();
              _elem94.read(iprot);
              struct.success.add(_elem94);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCollarLastDataC_args implements org.apache.thrift.TBase<queryCollarLastDataC_args, queryCollarLastDataC_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarLastDataC_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarLastDataC_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarLastDataC_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarLastDataC_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarLastDataC_args.class, metaDataMap);
    }

    public queryCollarLastDataC_args() {
    }

    public queryCollarLastDataC_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarLastDataC_args(queryCollarLastDataC_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
    }

    public queryCollarLastDataC_args deepCopy() {
      return new queryCollarLastDataC_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryCollarLastDataC_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public queryCollarLastDataC_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public queryCollarLastDataC_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarLastDataC_args)
        return this.equals((queryCollarLastDataC_args)that);
      return false;
    }

    public boolean equals(queryCollarLastDataC_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarLastDataC_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarLastDataC_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarLastDataC_argsStandardSchemeFactory implements SchemeFactory {
      public queryCollarLastDataC_argsStandardScheme getScheme() {
        return new queryCollarLastDataC_argsStandardScheme();
      }
    }

    private static class queryCollarLastDataC_argsStandardScheme extends StandardScheme<queryCollarLastDataC_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarLastDataC_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarLastDataC_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarLastDataC_argsTupleSchemeFactory implements SchemeFactory {
      public queryCollarLastDataC_argsTupleScheme getScheme() {
        return new queryCollarLastDataC_argsTupleScheme();
      }
    }

    private static class queryCollarLastDataC_argsTupleScheme extends TupleScheme<queryCollarLastDataC_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
      }
    }

  }

  public static class queryCollarLastDataC_result implements org.apache.thrift.TBase<queryCollarLastDataC_result, queryCollarLastDataC_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarLastDataC_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarLastDataC_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarLastDataC_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarLastDataC_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.CollarData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.CollarData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarLastDataC_result.class, metaDataMap);
    }

    public queryCollarLastDataC_result() {
    }

    public queryCollarLastDataC_result(
      List<com.afarcloud.thrift.CollarData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarLastDataC_result(queryCollarLastDataC_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.CollarData> __this__success = new ArrayList<com.afarcloud.thrift.CollarData>(other.success.size());
        for (com.afarcloud.thrift.CollarData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.CollarData(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCollarLastDataC_result deepCopy() {
      return new queryCollarLastDataC_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.CollarData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.CollarData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.CollarData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.CollarData> getSuccess() {
      return this.success;
    }

    public queryCollarLastDataC_result setSuccess(List<com.afarcloud.thrift.CollarData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.CollarData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarLastDataC_result)
        return this.equals((queryCollarLastDataC_result)that);
      return false;
    }

    public boolean equals(queryCollarLastDataC_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarLastDataC_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarLastDataC_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarLastDataC_resultStandardSchemeFactory implements SchemeFactory {
      public queryCollarLastDataC_resultStandardScheme getScheme() {
        return new queryCollarLastDataC_resultStandardScheme();
      }
    }

    private static class queryCollarLastDataC_resultStandardScheme extends StandardScheme<queryCollarLastDataC_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarLastDataC_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list96.size);
                  com.afarcloud.thrift.CollarData _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new com.afarcloud.thrift.CollarData();
                    _elem97.read(iprot);
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarLastDataC_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.CollarData _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarLastDataC_resultTupleSchemeFactory implements SchemeFactory {
      public queryCollarLastDataC_resultTupleScheme getScheme() {
        return new queryCollarLastDataC_resultTupleScheme();
      }
    }

    private static class queryCollarLastDataC_resultTupleScheme extends TupleScheme<queryCollarLastDataC_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.CollarData _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list101.size);
            com.afarcloud.thrift.CollarData _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new com.afarcloud.thrift.CollarData();
              _elem102.read(iprot);
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCollarLastDataByCollarUid_args implements org.apache.thrift.TBase<queryCollarLastDataByCollarUid_args, queryCollarLastDataByCollarUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarLastDataByCollarUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarLastDataByCollarUid_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COLLAR_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("collarUid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarLastDataByCollarUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarLastDataByCollarUid_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public String collarUid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      COLLAR_UID((short)2, "collarUid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // COLLAR_UID
            return COLLAR_UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COLLAR_UID, new org.apache.thrift.meta_data.FieldMetaData("collarUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarLastDataByCollarUid_args.class, metaDataMap);
    }

    public queryCollarLastDataByCollarUid_args() {
    }

    public queryCollarLastDataByCollarUid_args(
      int requestId,
      String collarUid)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.collarUid = collarUid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarLastDataByCollarUid_args(queryCollarLastDataByCollarUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetCollarUid()) {
        this.collarUid = other.collarUid;
      }
    }

    public queryCollarLastDataByCollarUid_args deepCopy() {
      return new queryCollarLastDataByCollarUid_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.collarUid = null;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryCollarLastDataByCollarUid_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public String getCollarUid() {
      return this.collarUid;
    }

    public queryCollarLastDataByCollarUid_args setCollarUid(String collarUid) {
      this.collarUid = collarUid;
      return this;
    }

    public void unsetCollarUid() {
      this.collarUid = null;
    }

    /** Returns true if field collarUid is set (has been assigned a value) and false otherwise */
    public boolean isSetCollarUid() {
      return this.collarUid != null;
    }

    public void setCollarUidIsSet(boolean value) {
      if (!value) {
        this.collarUid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case COLLAR_UID:
        if (value == null) {
          unsetCollarUid();
        } else {
          setCollarUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case COLLAR_UID:
        return getCollarUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case COLLAR_UID:
        return isSetCollarUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarLastDataByCollarUid_args)
        return this.equals((queryCollarLastDataByCollarUid_args)that);
      return false;
    }

    public boolean equals(queryCollarLastDataByCollarUid_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_collarUid = true && this.isSetCollarUid();
      boolean that_present_collarUid = true && that.isSetCollarUid();
      if (this_present_collarUid || that_present_collarUid) {
        if (!(this_present_collarUid && that_present_collarUid))
          return false;
        if (!this.collarUid.equals(that.collarUid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_collarUid = true && (isSetCollarUid());
      list.add(present_collarUid);
      if (present_collarUid)
        list.add(collarUid);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarLastDataByCollarUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCollarUid()).compareTo(other.isSetCollarUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollarUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collarUid, other.collarUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarLastDataByCollarUid_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("collarUid:");
      if (this.collarUid == null) {
        sb.append("null");
      } else {
        sb.append(this.collarUid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarLastDataByCollarUid_argsStandardSchemeFactory implements SchemeFactory {
      public queryCollarLastDataByCollarUid_argsStandardScheme getScheme() {
        return new queryCollarLastDataByCollarUid_argsStandardScheme();
      }
    }

    private static class queryCollarLastDataByCollarUid_argsStandardScheme extends StandardScheme<queryCollarLastDataByCollarUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarLastDataByCollarUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLLAR_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collarUid = iprot.readString();
                struct.setCollarUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarLastDataByCollarUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.collarUid != null) {
          oprot.writeFieldBegin(COLLAR_UID_FIELD_DESC);
          oprot.writeString(struct.collarUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarLastDataByCollarUid_argsTupleSchemeFactory implements SchemeFactory {
      public queryCollarLastDataByCollarUid_argsTupleScheme getScheme() {
        return new queryCollarLastDataByCollarUid_argsTupleScheme();
      }
    }

    private static class queryCollarLastDataByCollarUid_argsTupleScheme extends TupleScheme<queryCollarLastDataByCollarUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataByCollarUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetCollarUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetCollarUid()) {
          oprot.writeString(struct.collarUid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataByCollarUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.collarUid = iprot.readString();
          struct.setCollarUidIsSet(true);
        }
      }
    }

  }

  public static class queryCollarLastDataByCollarUid_result implements org.apache.thrift.TBase<queryCollarLastDataByCollarUid_result, queryCollarLastDataByCollarUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarLastDataByCollarUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarLastDataByCollarUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarLastDataByCollarUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarLastDataByCollarUid_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.CollarData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.CollarData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarLastDataByCollarUid_result.class, metaDataMap);
    }

    public queryCollarLastDataByCollarUid_result() {
    }

    public queryCollarLastDataByCollarUid_result(
      List<com.afarcloud.thrift.CollarData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarLastDataByCollarUid_result(queryCollarLastDataByCollarUid_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.CollarData> __this__success = new ArrayList<com.afarcloud.thrift.CollarData>(other.success.size());
        for (com.afarcloud.thrift.CollarData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.CollarData(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCollarLastDataByCollarUid_result deepCopy() {
      return new queryCollarLastDataByCollarUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.CollarData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.CollarData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.CollarData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.CollarData> getSuccess() {
      return this.success;
    }

    public queryCollarLastDataByCollarUid_result setSuccess(List<com.afarcloud.thrift.CollarData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.CollarData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarLastDataByCollarUid_result)
        return this.equals((queryCollarLastDataByCollarUid_result)that);
      return false;
    }

    public boolean equals(queryCollarLastDataByCollarUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarLastDataByCollarUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarLastDataByCollarUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarLastDataByCollarUid_resultStandardSchemeFactory implements SchemeFactory {
      public queryCollarLastDataByCollarUid_resultStandardScheme getScheme() {
        return new queryCollarLastDataByCollarUid_resultStandardScheme();
      }
    }

    private static class queryCollarLastDataByCollarUid_resultStandardScheme extends StandardScheme<queryCollarLastDataByCollarUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarLastDataByCollarUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list104.size);
                  com.afarcloud.thrift.CollarData _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new com.afarcloud.thrift.CollarData();
                    _elem105.read(iprot);
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarLastDataByCollarUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.CollarData _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarLastDataByCollarUid_resultTupleSchemeFactory implements SchemeFactory {
      public queryCollarLastDataByCollarUid_resultTupleScheme getScheme() {
        return new queryCollarLastDataByCollarUid_resultTupleScheme();
      }
    }

    private static class queryCollarLastDataByCollarUid_resultTupleScheme extends TupleScheme<queryCollarLastDataByCollarUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataByCollarUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.CollarData _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarLastDataByCollarUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list109.size);
            com.afarcloud.thrift.CollarData _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new com.afarcloud.thrift.CollarData();
              _elem110.read(iprot);
              struct.success.add(_elem110);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleLastStateVectorPF_args implements org.apache.thrift.TBase<queryVehicleLastStateVectorPF_args, queryVehicleLastStateVectorPF_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleLastStateVectorPF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleLastStateVectorPF_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARTFIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partfieldId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleLastStateVectorPF_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleLastStateVectorPF_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int partfieldId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      PARTFIELD_ID((short)2, "partfieldId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // PARTFIELD_ID
            return PARTFIELD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __PARTFIELDID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTFIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("partfieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleLastStateVectorPF_args.class, metaDataMap);
    }

    public queryVehicleLastStateVectorPF_args() {
    }

    public queryVehicleLastStateVectorPF_args(
      int requestId,
      int partfieldId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleLastStateVectorPF_args(queryVehicleLastStateVectorPF_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.partfieldId = other.partfieldId;
    }

    public queryVehicleLastStateVectorPF_args deepCopy() {
      return new queryVehicleLastStateVectorPF_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setPartfieldIdIsSet(false);
      this.partfieldId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryVehicleLastStateVectorPF_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getPartfieldId() {
      return this.partfieldId;
    }

    public queryVehicleLastStateVectorPF_args setPartfieldId(int partfieldId) {
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      return this;
    }

    public void unsetPartfieldId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    /** Returns true if field partfieldId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartfieldId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    public void setPartfieldIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTFIELDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case PARTFIELD_ID:
        if (value == null) {
          unsetPartfieldId();
        } else {
          setPartfieldId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case PARTFIELD_ID:
        return Integer.valueOf(getPartfieldId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case PARTFIELD_ID:
        return isSetPartfieldId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleLastStateVectorPF_args)
        return this.equals((queryVehicleLastStateVectorPF_args)that);
      return false;
    }

    public boolean equals(queryVehicleLastStateVectorPF_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_partfieldId = true;
      boolean that_present_partfieldId = true;
      if (this_present_partfieldId || that_present_partfieldId) {
        if (!(this_present_partfieldId && that_present_partfieldId))
          return false;
        if (this.partfieldId != that.partfieldId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_partfieldId = true;
      list.add(present_partfieldId);
      if (present_partfieldId)
        list.add(partfieldId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleLastStateVectorPF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartfieldId()).compareTo(other.isSetPartfieldId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartfieldId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partfieldId, other.partfieldId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleLastStateVectorPF_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partfieldId:");
      sb.append(this.partfieldId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleLastStateVectorPF_argsStandardSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorPF_argsStandardScheme getScheme() {
        return new queryVehicleLastStateVectorPF_argsStandardScheme();
      }
    }

    private static class queryVehicleLastStateVectorPF_argsStandardScheme extends StandardScheme<queryVehicleLastStateVectorPF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleLastStateVectorPF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTFIELD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partfieldId = iprot.readI32();
                struct.setPartfieldIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleLastStateVectorPF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTFIELD_ID_FIELD_DESC);
        oprot.writeI32(struct.partfieldId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleLastStateVectorPF_argsTupleSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorPF_argsTupleScheme getScheme() {
        return new queryVehicleLastStateVectorPF_argsTupleScheme();
      }
    }

    private static class queryVehicleLastStateVectorPF_argsTupleScheme extends TupleScheme<queryVehicleLastStateVectorPF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorPF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetPartfieldId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetPartfieldId()) {
          oprot.writeI32(struct.partfieldId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorPF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partfieldId = iprot.readI32();
          struct.setPartfieldIdIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleLastStateVectorPF_result implements org.apache.thrift.TBase<queryVehicleLastStateVectorPF_result, queryVehicleLastStateVectorPF_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleLastStateVectorPF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleLastStateVectorPF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleLastStateVectorPF_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleLastStateVectorPF_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.StateVector> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.StateVector.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleLastStateVectorPF_result.class, metaDataMap);
    }

    public queryVehicleLastStateVectorPF_result() {
    }

    public queryVehicleLastStateVectorPF_result(
      List<com.afarcloud.thrift.StateVector> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleLastStateVectorPF_result(queryVehicleLastStateVectorPF_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.StateVector> __this__success = new ArrayList<com.afarcloud.thrift.StateVector>(other.success.size());
        for (com.afarcloud.thrift.StateVector other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.StateVector(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryVehicleLastStateVectorPF_result deepCopy() {
      return new queryVehicleLastStateVectorPF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.StateVector> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.StateVector elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.StateVector>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.StateVector> getSuccess() {
      return this.success;
    }

    public queryVehicleLastStateVectorPF_result setSuccess(List<com.afarcloud.thrift.StateVector> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.StateVector>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleLastStateVectorPF_result)
        return this.equals((queryVehicleLastStateVectorPF_result)that);
      return false;
    }

    public boolean equals(queryVehicleLastStateVectorPF_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleLastStateVectorPF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleLastStateVectorPF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleLastStateVectorPF_resultStandardSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorPF_resultStandardScheme getScheme() {
        return new queryVehicleLastStateVectorPF_resultStandardScheme();
      }
    }

    private static class queryVehicleLastStateVectorPF_resultStandardScheme extends StandardScheme<queryVehicleLastStateVectorPF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleLastStateVectorPF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list112.size);
                  com.afarcloud.thrift.StateVector _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new com.afarcloud.thrift.StateVector();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleLastStateVectorPF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.StateVector _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleLastStateVectorPF_resultTupleSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorPF_resultTupleScheme getScheme() {
        return new queryVehicleLastStateVectorPF_resultTupleScheme();
      }
    }

    private static class queryVehicleLastStateVectorPF_resultTupleScheme extends TupleScheme<queryVehicleLastStateVectorPF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorPF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.StateVector _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorPF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list117.size);
            com.afarcloud.thrift.StateVector _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new com.afarcloud.thrift.StateVector();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleLastStateVectorC_args implements org.apache.thrift.TBase<queryVehicleLastStateVectorC_args, queryVehicleLastStateVectorC_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleLastStateVectorC_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleLastStateVectorC_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleLastStateVectorC_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleLastStateVectorC_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleLastStateVectorC_args.class, metaDataMap);
    }

    public queryVehicleLastStateVectorC_args() {
    }

    public queryVehicleLastStateVectorC_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleLastStateVectorC_args(queryVehicleLastStateVectorC_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
    }

    public queryVehicleLastStateVectorC_args deepCopy() {
      return new queryVehicleLastStateVectorC_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryVehicleLastStateVectorC_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public queryVehicleLastStateVectorC_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public queryVehicleLastStateVectorC_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleLastStateVectorC_args)
        return this.equals((queryVehicleLastStateVectorC_args)that);
      return false;
    }

    public boolean equals(queryVehicleLastStateVectorC_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleLastStateVectorC_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleLastStateVectorC_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleLastStateVectorC_argsStandardSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorC_argsStandardScheme getScheme() {
        return new queryVehicleLastStateVectorC_argsStandardScheme();
      }
    }

    private static class queryVehicleLastStateVectorC_argsStandardScheme extends StandardScheme<queryVehicleLastStateVectorC_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleLastStateVectorC_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleLastStateVectorC_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleLastStateVectorC_argsTupleSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorC_argsTupleScheme getScheme() {
        return new queryVehicleLastStateVectorC_argsTupleScheme();
      }
    }

    private static class queryVehicleLastStateVectorC_argsTupleScheme extends TupleScheme<queryVehicleLastStateVectorC_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleLastStateVectorC_result implements org.apache.thrift.TBase<queryVehicleLastStateVectorC_result, queryVehicleLastStateVectorC_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleLastStateVectorC_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleLastStateVectorC_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleLastStateVectorC_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleLastStateVectorC_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.StateVector> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.StateVector.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleLastStateVectorC_result.class, metaDataMap);
    }

    public queryVehicleLastStateVectorC_result() {
    }

    public queryVehicleLastStateVectorC_result(
      List<com.afarcloud.thrift.StateVector> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleLastStateVectorC_result(queryVehicleLastStateVectorC_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.StateVector> __this__success = new ArrayList<com.afarcloud.thrift.StateVector>(other.success.size());
        for (com.afarcloud.thrift.StateVector other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.StateVector(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryVehicleLastStateVectorC_result deepCopy() {
      return new queryVehicleLastStateVectorC_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.StateVector> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.StateVector elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.StateVector>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.StateVector> getSuccess() {
      return this.success;
    }

    public queryVehicleLastStateVectorC_result setSuccess(List<com.afarcloud.thrift.StateVector> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.StateVector>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleLastStateVectorC_result)
        return this.equals((queryVehicleLastStateVectorC_result)that);
      return false;
    }

    public boolean equals(queryVehicleLastStateVectorC_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleLastStateVectorC_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleLastStateVectorC_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleLastStateVectorC_resultStandardSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorC_resultStandardScheme getScheme() {
        return new queryVehicleLastStateVectorC_resultStandardScheme();
      }
    }

    private static class queryVehicleLastStateVectorC_resultStandardScheme extends StandardScheme<queryVehicleLastStateVectorC_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleLastStateVectorC_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list120.size);
                  com.afarcloud.thrift.StateVector _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new com.afarcloud.thrift.StateVector();
                    _elem121.read(iprot);
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleLastStateVectorC_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.StateVector _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleLastStateVectorC_resultTupleSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorC_resultTupleScheme getScheme() {
        return new queryVehicleLastStateVectorC_resultTupleScheme();
      }
    }

    private static class queryVehicleLastStateVectorC_resultTupleScheme extends TupleScheme<queryVehicleLastStateVectorC_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.StateVector _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list125.size);
            com.afarcloud.thrift.StateVector _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new com.afarcloud.thrift.StateVector();
              _elem126.read(iprot);
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleLastStateVectorByVehicleId_args implements org.apache.thrift.TBase<queryVehicleLastStateVectorByVehicleId_args, queryVehicleLastStateVectorByVehicleId_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleLastStateVectorByVehicleId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleLastStateVectorByVehicleId_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VEHICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleLastStateVectorByVehicleId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleLastStateVectorByVehicleId_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int vehicleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      VEHICLE_ID((short)2, "vehicleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // VEHICLE_ID
            return VEHICLE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __VEHICLEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VEHICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("vehicleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleLastStateVectorByVehicleId_args.class, metaDataMap);
    }

    public queryVehicleLastStateVectorByVehicleId_args() {
    }

    public queryVehicleLastStateVectorByVehicleId_args(
      int requestId,
      int vehicleId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleLastStateVectorByVehicleId_args(queryVehicleLastStateVectorByVehicleId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.vehicleId = other.vehicleId;
    }

    public queryVehicleLastStateVectorByVehicleId_args deepCopy() {
      return new queryVehicleLastStateVectorByVehicleId_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setVehicleIdIsSet(false);
      this.vehicleId = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryVehicleLastStateVectorByVehicleId_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getVehicleId() {
      return this.vehicleId;
    }

    public queryVehicleLastStateVectorByVehicleId_args setVehicleId(int vehicleId) {
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      return this;
    }

    public void unsetVehicleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    /** Returns true if field vehicleId is set (has been assigned a value) and false otherwise */
    public boolean isSetVehicleId() {
      return EncodingUtils.testBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    public void setVehicleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case VEHICLE_ID:
        if (value == null) {
          unsetVehicleId();
        } else {
          setVehicleId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case VEHICLE_ID:
        return Integer.valueOf(getVehicleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case VEHICLE_ID:
        return isSetVehicleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleLastStateVectorByVehicleId_args)
        return this.equals((queryVehicleLastStateVectorByVehicleId_args)that);
      return false;
    }

    public boolean equals(queryVehicleLastStateVectorByVehicleId_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_vehicleId = true;
      boolean that_present_vehicleId = true;
      if (this_present_vehicleId || that_present_vehicleId) {
        if (!(this_present_vehicleId && that_present_vehicleId))
          return false;
        if (this.vehicleId != that.vehicleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_vehicleId = true;
      list.add(present_vehicleId);
      if (present_vehicleId)
        list.add(vehicleId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleLastStateVectorByVehicleId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVehicleId()).compareTo(other.isSetVehicleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVehicleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleId, other.vehicleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleLastStateVectorByVehicleId_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vehicleId:");
      sb.append(this.vehicleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleLastStateVectorByVehicleId_argsStandardSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorByVehicleId_argsStandardScheme getScheme() {
        return new queryVehicleLastStateVectorByVehicleId_argsStandardScheme();
      }
    }

    private static class queryVehicleLastStateVectorByVehicleId_argsStandardScheme extends StandardScheme<queryVehicleLastStateVectorByVehicleId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleLastStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VEHICLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vehicleId = iprot.readI32();
                struct.setVehicleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleLastStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VEHICLE_ID_FIELD_DESC);
        oprot.writeI32(struct.vehicleId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleLastStateVectorByVehicleId_argsTupleSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorByVehicleId_argsTupleScheme getScheme() {
        return new queryVehicleLastStateVectorByVehicleId_argsTupleScheme();
      }
    }

    private static class queryVehicleLastStateVectorByVehicleId_argsTupleScheme extends TupleScheme<queryVehicleLastStateVectorByVehicleId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetVehicleId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetVehicleId()) {
          oprot.writeI32(struct.vehicleId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vehicleId = iprot.readI32();
          struct.setVehicleIdIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleLastStateVectorByVehicleId_result implements org.apache.thrift.TBase<queryVehicleLastStateVectorByVehicleId_result, queryVehicleLastStateVectorByVehicleId_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleLastStateVectorByVehicleId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleLastStateVectorByVehicleId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleLastStateVectorByVehicleId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleLastStateVectorByVehicleId_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.StateVector> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.StateVector.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleLastStateVectorByVehicleId_result.class, metaDataMap);
    }

    public queryVehicleLastStateVectorByVehicleId_result() {
    }

    public queryVehicleLastStateVectorByVehicleId_result(
      List<com.afarcloud.thrift.StateVector> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleLastStateVectorByVehicleId_result(queryVehicleLastStateVectorByVehicleId_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.StateVector> __this__success = new ArrayList<com.afarcloud.thrift.StateVector>(other.success.size());
        for (com.afarcloud.thrift.StateVector other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.StateVector(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryVehicleLastStateVectorByVehicleId_result deepCopy() {
      return new queryVehicleLastStateVectorByVehicleId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.StateVector> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.StateVector elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.StateVector>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.StateVector> getSuccess() {
      return this.success;
    }

    public queryVehicleLastStateVectorByVehicleId_result setSuccess(List<com.afarcloud.thrift.StateVector> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.StateVector>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleLastStateVectorByVehicleId_result)
        return this.equals((queryVehicleLastStateVectorByVehicleId_result)that);
      return false;
    }

    public boolean equals(queryVehicleLastStateVectorByVehicleId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleLastStateVectorByVehicleId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleLastStateVectorByVehicleId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleLastStateVectorByVehicleId_resultStandardSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorByVehicleId_resultStandardScheme getScheme() {
        return new queryVehicleLastStateVectorByVehicleId_resultStandardScheme();
      }
    }

    private static class queryVehicleLastStateVectorByVehicleId_resultStandardScheme extends StandardScheme<queryVehicleLastStateVectorByVehicleId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleLastStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list128.size);
                  com.afarcloud.thrift.StateVector _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = new com.afarcloud.thrift.StateVector();
                    _elem129.read(iprot);
                    struct.success.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleLastStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.StateVector _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleLastStateVectorByVehicleId_resultTupleSchemeFactory implements SchemeFactory {
      public queryVehicleLastStateVectorByVehicleId_resultTupleScheme getScheme() {
        return new queryVehicleLastStateVectorByVehicleId_resultTupleScheme();
      }
    }

    private static class queryVehicleLastStateVectorByVehicleId_resultTupleScheme extends TupleScheme<queryVehicleLastStateVectorByVehicleId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.StateVector _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleLastStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list133.size);
            com.afarcloud.thrift.StateVector _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = new com.afarcloud.thrift.StateVector();
              _elem134.read(iprot);
              struct.success.add(_elem134);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryDetectedStuffOnTheFarm_args implements org.apache.thrift.TBase<queryDetectedStuffOnTheFarm_args, queryDetectedStuffOnTheFarm_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryDetectedStuffOnTheFarm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDetectedStuffOnTheFarm_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryDetectedStuffOnTheFarm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryDetectedStuffOnTheFarm_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      START_TIME((short)2, "startTime"),
      END_TIME((short)3, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // START_TIME
            return START_TIME;
          case 3: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __STARTTIME_ISSET_ID = 1;
    private static final int __ENDTIME_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDetectedStuffOnTheFarm_args.class, metaDataMap);
    }

    public queryDetectedStuffOnTheFarm_args() {
    }

    public queryDetectedStuffOnTheFarm_args(
      int requestId,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryDetectedStuffOnTheFarm_args(queryDetectedStuffOnTheFarm_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public queryDetectedStuffOnTheFarm_args deepCopy() {
      return new queryDetectedStuffOnTheFarm_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryDetectedStuffOnTheFarm_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public queryDetectedStuffOnTheFarm_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public queryDetectedStuffOnTheFarm_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryDetectedStuffOnTheFarm_args)
        return this.equals((queryDetectedStuffOnTheFarm_args)that);
      return false;
    }

    public boolean equals(queryDetectedStuffOnTheFarm_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryDetectedStuffOnTheFarm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryDetectedStuffOnTheFarm_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryDetectedStuffOnTheFarm_argsStandardSchemeFactory implements SchemeFactory {
      public queryDetectedStuffOnTheFarm_argsStandardScheme getScheme() {
        return new queryDetectedStuffOnTheFarm_argsStandardScheme();
      }
    }

    private static class queryDetectedStuffOnTheFarm_argsStandardScheme extends StandardScheme<queryDetectedStuffOnTheFarm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryDetectedStuffOnTheFarm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryDetectedStuffOnTheFarm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryDetectedStuffOnTheFarm_argsTupleSchemeFactory implements SchemeFactory {
      public queryDetectedStuffOnTheFarm_argsTupleScheme getScheme() {
        return new queryDetectedStuffOnTheFarm_argsTupleScheme();
      }
    }

    private static class queryDetectedStuffOnTheFarm_argsTupleScheme extends TupleScheme<queryDetectedStuffOnTheFarm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryDetectedStuffOnTheFarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetStartTime()) {
          optionals.set(1);
        }
        if (struct.isSetEndTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryDetectedStuffOnTheFarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class queryDetectedStuffOnTheFarm_result implements org.apache.thrift.TBase<queryDetectedStuffOnTheFarm_result, queryDetectedStuffOnTheFarm_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryDetectedStuffOnTheFarm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDetectedStuffOnTheFarm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryDetectedStuffOnTheFarm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryDetectedStuffOnTheFarm_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.DetectionRegion> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.DetectionRegion.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDetectedStuffOnTheFarm_result.class, metaDataMap);
    }

    public queryDetectedStuffOnTheFarm_result() {
    }

    public queryDetectedStuffOnTheFarm_result(
      List<com.afarcloud.thrift.DetectionRegion> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryDetectedStuffOnTheFarm_result(queryDetectedStuffOnTheFarm_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.DetectionRegion> __this__success = new ArrayList<com.afarcloud.thrift.DetectionRegion>(other.success.size());
        for (com.afarcloud.thrift.DetectionRegion other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.DetectionRegion(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryDetectedStuffOnTheFarm_result deepCopy() {
      return new queryDetectedStuffOnTheFarm_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.DetectionRegion> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.DetectionRegion elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.DetectionRegion>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.DetectionRegion> getSuccess() {
      return this.success;
    }

    public queryDetectedStuffOnTheFarm_result setSuccess(List<com.afarcloud.thrift.DetectionRegion> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.DetectionRegion>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryDetectedStuffOnTheFarm_result)
        return this.equals((queryDetectedStuffOnTheFarm_result)that);
      return false;
    }

    public boolean equals(queryDetectedStuffOnTheFarm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryDetectedStuffOnTheFarm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryDetectedStuffOnTheFarm_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryDetectedStuffOnTheFarm_resultStandardSchemeFactory implements SchemeFactory {
      public queryDetectedStuffOnTheFarm_resultStandardScheme getScheme() {
        return new queryDetectedStuffOnTheFarm_resultStandardScheme();
      }
    }

    private static class queryDetectedStuffOnTheFarm_resultStandardScheme extends StandardScheme<queryDetectedStuffOnTheFarm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryDetectedStuffOnTheFarm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.DetectionRegion>(_list136.size);
                  com.afarcloud.thrift.DetectionRegion _elem137;
                  for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                  {
                    _elem137 = new com.afarcloud.thrift.DetectionRegion();
                    _elem137.read(iprot);
                    struct.success.add(_elem137);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryDetectedStuffOnTheFarm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.DetectionRegion _iter139 : struct.success)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryDetectedStuffOnTheFarm_resultTupleSchemeFactory implements SchemeFactory {
      public queryDetectedStuffOnTheFarm_resultTupleScheme getScheme() {
        return new queryDetectedStuffOnTheFarm_resultTupleScheme();
      }
    }

    private static class queryDetectedStuffOnTheFarm_resultTupleScheme extends TupleScheme<queryDetectedStuffOnTheFarm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryDetectedStuffOnTheFarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.DetectionRegion _iter140 : struct.success)
            {
              _iter140.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryDetectedStuffOnTheFarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.DetectionRegion>(_list141.size);
            com.afarcloud.thrift.DetectionRegion _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = new com.afarcloud.thrift.DetectionRegion();
              _elem142.read(iprot);
              struct.success.add(_elem142);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataPF_args implements org.apache.thrift.TBase<querySensorHistoricalDataPF_args, querySensorHistoricalDataPF_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataPF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataPF_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARTFIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partfieldId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataPF_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataPF_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int partfieldId; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      PARTFIELD_ID((short)2, "partfieldId"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // PARTFIELD_ID
            return PARTFIELD_ID;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __PARTFIELDID_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTFIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("partfieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataPF_args.class, metaDataMap);
    }

    public querySensorHistoricalDataPF_args() {
    }

    public querySensorHistoricalDataPF_args(
      int requestId,
      int partfieldId,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataPF_args(querySensorHistoricalDataPF_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.partfieldId = other.partfieldId;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public querySensorHistoricalDataPF_args deepCopy() {
      return new querySensorHistoricalDataPF_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setPartfieldIdIsSet(false);
      this.partfieldId = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorHistoricalDataPF_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getPartfieldId() {
      return this.partfieldId;
    }

    public querySensorHistoricalDataPF_args setPartfieldId(int partfieldId) {
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      return this;
    }

    public void unsetPartfieldId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    /** Returns true if field partfieldId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartfieldId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    public void setPartfieldIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTFIELDID_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public querySensorHistoricalDataPF_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public querySensorHistoricalDataPF_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case PARTFIELD_ID:
        if (value == null) {
          unsetPartfieldId();
        } else {
          setPartfieldId((Integer)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case PARTFIELD_ID:
        return Integer.valueOf(getPartfieldId());

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case PARTFIELD_ID:
        return isSetPartfieldId();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataPF_args)
        return this.equals((querySensorHistoricalDataPF_args)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataPF_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_partfieldId = true;
      boolean that_present_partfieldId = true;
      if (this_present_partfieldId || that_present_partfieldId) {
        if (!(this_present_partfieldId && that_present_partfieldId))
          return false;
        if (this.partfieldId != that.partfieldId)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_partfieldId = true;
      list.add(present_partfieldId);
      if (present_partfieldId)
        list.add(partfieldId);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataPF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartfieldId()).compareTo(other.isSetPartfieldId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartfieldId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partfieldId, other.partfieldId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataPF_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partfieldId:");
      sb.append(this.partfieldId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataPF_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataPF_argsStandardScheme getScheme() {
        return new querySensorHistoricalDataPF_argsStandardScheme();
      }
    }

    private static class querySensorHistoricalDataPF_argsStandardScheme extends StandardScheme<querySensorHistoricalDataPF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataPF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTFIELD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partfieldId = iprot.readI32();
                struct.setPartfieldIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataPF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTFIELD_ID_FIELD_DESC);
        oprot.writeI32(struct.partfieldId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataPF_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataPF_argsTupleScheme getScheme() {
        return new querySensorHistoricalDataPF_argsTupleScheme();
      }
    }

    private static class querySensorHistoricalDataPF_argsTupleScheme extends TupleScheme<querySensorHistoricalDataPF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataPF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetPartfieldId()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetPartfieldId()) {
          oprot.writeI32(struct.partfieldId);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataPF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partfieldId = iprot.readI32();
          struct.setPartfieldIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataPF_result implements org.apache.thrift.TBase<querySensorHistoricalDataPF_result, querySensorHistoricalDataPF_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataPF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataPF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataPF_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataPF_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataPF_result.class, metaDataMap);
    }

    public querySensorHistoricalDataPF_result() {
    }

    public querySensorHistoricalDataPF_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataPF_result(querySensorHistoricalDataPF_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorHistoricalDataPF_result deepCopy() {
      return new querySensorHistoricalDataPF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorHistoricalDataPF_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataPF_result)
        return this.equals((querySensorHistoricalDataPF_result)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataPF_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataPF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataPF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataPF_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataPF_resultStandardScheme getScheme() {
        return new querySensorHistoricalDataPF_resultStandardScheme();
      }
    }

    private static class querySensorHistoricalDataPF_resultStandardScheme extends StandardScheme<querySensorHistoricalDataPF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataPF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list144.size);
                  com.afarcloud.thrift.SensorData _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new com.afarcloud.thrift.SensorData();
                    _elem145.read(iprot);
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataPF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataPF_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataPF_resultTupleScheme getScheme() {
        return new querySensorHistoricalDataPF_resultTupleScheme();
      }
    }

    private static class querySensorHistoricalDataPF_resultTupleScheme extends TupleScheme<querySensorHistoricalDataPF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataPF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataPF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list149.size);
            com.afarcloud.thrift.SensorData _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = new com.afarcloud.thrift.SensorData();
              _elem150.read(iprot);
              struct.success.add(_elem150);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataBySensorUid_args implements org.apache.thrift.TBase<querySensorHistoricalDataBySensorUid_args, querySensorHistoricalDataBySensorUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataBySensorUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataBySensorUid_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SENSOR_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorUid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataBySensorUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataBySensorUid_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public String sensorUid; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      SENSOR_UID((short)2, "sensorUid"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // SENSOR_UID
            return SENSOR_UID;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __STARTTIME_ISSET_ID = 1;
    private static final int __ENDTIME_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SENSOR_UID, new org.apache.thrift.meta_data.FieldMetaData("sensorUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataBySensorUid_args.class, metaDataMap);
    }

    public querySensorHistoricalDataBySensorUid_args() {
    }

    public querySensorHistoricalDataBySensorUid_args(
      int requestId,
      String sensorUid,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.sensorUid = sensorUid;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataBySensorUid_args(querySensorHistoricalDataBySensorUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetSensorUid()) {
        this.sensorUid = other.sensorUid;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public querySensorHistoricalDataBySensorUid_args deepCopy() {
      return new querySensorHistoricalDataBySensorUid_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.sensorUid = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorHistoricalDataBySensorUid_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public String getSensorUid() {
      return this.sensorUid;
    }

    public querySensorHistoricalDataBySensorUid_args setSensorUid(String sensorUid) {
      this.sensorUid = sensorUid;
      return this;
    }

    public void unsetSensorUid() {
      this.sensorUid = null;
    }

    /** Returns true if field sensorUid is set (has been assigned a value) and false otherwise */
    public boolean isSetSensorUid() {
      return this.sensorUid != null;
    }

    public void setSensorUidIsSet(boolean value) {
      if (!value) {
        this.sensorUid = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public querySensorHistoricalDataBySensorUid_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public querySensorHistoricalDataBySensorUid_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case SENSOR_UID:
        if (value == null) {
          unsetSensorUid();
        } else {
          setSensorUid((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case SENSOR_UID:
        return getSensorUid();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case SENSOR_UID:
        return isSetSensorUid();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataBySensorUid_args)
        return this.equals((querySensorHistoricalDataBySensorUid_args)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataBySensorUid_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_sensorUid = true && this.isSetSensorUid();
      boolean that_present_sensorUid = true && that.isSetSensorUid();
      if (this_present_sensorUid || that_present_sensorUid) {
        if (!(this_present_sensorUid && that_present_sensorUid))
          return false;
        if (!this.sensorUid.equals(that.sensorUid))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_sensorUid = true && (isSetSensorUid());
      list.add(present_sensorUid);
      if (present_sensorUid)
        list.add(sensorUid);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataBySensorUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSensorUid()).compareTo(other.isSetSensorUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSensorUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorUid, other.sensorUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataBySensorUid_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sensorUid:");
      if (this.sensorUid == null) {
        sb.append("null");
      } else {
        sb.append(this.sensorUid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataBySensorUid_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorUid_argsStandardScheme getScheme() {
        return new querySensorHistoricalDataBySensorUid_argsStandardScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorUid_argsStandardScheme extends StandardScheme<querySensorHistoricalDataBySensorUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataBySensorUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SENSOR_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sensorUid = iprot.readString();
                struct.setSensorUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataBySensorUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.sensorUid != null) {
          oprot.writeFieldBegin(SENSOR_UID_FIELD_DESC);
          oprot.writeString(struct.sensorUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataBySensorUid_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorUid_argsTupleScheme getScheme() {
        return new querySensorHistoricalDataBySensorUid_argsTupleScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorUid_argsTupleScheme extends TupleScheme<querySensorHistoricalDataBySensorUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetSensorUid()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetSensorUid()) {
          oprot.writeString(struct.sensorUid);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sensorUid = iprot.readString();
          struct.setSensorUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataBySensorUid_result implements org.apache.thrift.TBase<querySensorHistoricalDataBySensorUid_result, querySensorHistoricalDataBySensorUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataBySensorUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataBySensorUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataBySensorUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataBySensorUid_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataBySensorUid_result.class, metaDataMap);
    }

    public querySensorHistoricalDataBySensorUid_result() {
    }

    public querySensorHistoricalDataBySensorUid_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataBySensorUid_result(querySensorHistoricalDataBySensorUid_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorHistoricalDataBySensorUid_result deepCopy() {
      return new querySensorHistoricalDataBySensorUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorHistoricalDataBySensorUid_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataBySensorUid_result)
        return this.equals((querySensorHistoricalDataBySensorUid_result)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataBySensorUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataBySensorUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataBySensorUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataBySensorUid_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorUid_resultStandardScheme getScheme() {
        return new querySensorHistoricalDataBySensorUid_resultStandardScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorUid_resultStandardScheme extends StandardScheme<querySensorHistoricalDataBySensorUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataBySensorUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list152.size);
                  com.afarcloud.thrift.SensorData _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = new com.afarcloud.thrift.SensorData();
                    _elem153.read(iprot);
                    struct.success.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataBySensorUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter155 : struct.success)
            {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataBySensorUid_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorUid_resultTupleScheme getScheme() {
        return new querySensorHistoricalDataBySensorUid_resultTupleScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorUid_resultTupleScheme extends TupleScheme<querySensorHistoricalDataBySensorUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter156 : struct.success)
            {
              _iter156.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list157.size);
            com.afarcloud.thrift.SensorData _elem158;
            for (int _i159 = 0; _i159 < _list157.size; ++_i159)
            {
              _elem158 = new com.afarcloud.thrift.SensorData();
              _elem158.read(iprot);
              struct.success.add(_elem158);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataBySensorTypePF_args implements org.apache.thrift.TBase<querySensorHistoricalDataBySensorTypePF_args, querySensorHistoricalDataBySensorTypePF_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataBySensorTypePF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataBySensorTypePF_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARTFIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partfieldId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SENSOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataBySensorTypePF_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataBySensorTypePF_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int partfieldId; // required
    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public com.afarcloud.thrift.SensorType sensorType; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      PARTFIELD_ID((short)2, "partfieldId"),
      /**
       * 
       * @see com.afarcloud.thrift.SensorType
       */
      SENSOR_TYPE((short)3, "sensorType"),
      START_TIME((short)4, "startTime"),
      END_TIME((short)5, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // PARTFIELD_ID
            return PARTFIELD_ID;
          case 3: // SENSOR_TYPE
            return SENSOR_TYPE;
          case 4: // START_TIME
            return START_TIME;
          case 5: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __PARTFIELDID_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTFIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("partfieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SENSOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sensorType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.afarcloud.thrift.SensorType.class)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataBySensorTypePF_args.class, metaDataMap);
    }

    public querySensorHistoricalDataBySensorTypePF_args() {
    }

    public querySensorHistoricalDataBySensorTypePF_args(
      int requestId,
      int partfieldId,
      com.afarcloud.thrift.SensorType sensorType,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      this.sensorType = sensorType;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataBySensorTypePF_args(querySensorHistoricalDataBySensorTypePF_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.partfieldId = other.partfieldId;
      if (other.isSetSensorType()) {
        this.sensorType = other.sensorType;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public querySensorHistoricalDataBySensorTypePF_args deepCopy() {
      return new querySensorHistoricalDataBySensorTypePF_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setPartfieldIdIsSet(false);
      this.partfieldId = 0;
      this.sensorType = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorHistoricalDataBySensorTypePF_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getPartfieldId() {
      return this.partfieldId;
    }

    public querySensorHistoricalDataBySensorTypePF_args setPartfieldId(int partfieldId) {
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      return this;
    }

    public void unsetPartfieldId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    /** Returns true if field partfieldId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartfieldId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    public void setPartfieldIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTFIELDID_ISSET_ID, value);
    }

    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public com.afarcloud.thrift.SensorType getSensorType() {
      return this.sensorType;
    }

    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public querySensorHistoricalDataBySensorTypePF_args setSensorType(com.afarcloud.thrift.SensorType sensorType) {
      this.sensorType = sensorType;
      return this;
    }

    public void unsetSensorType() {
      this.sensorType = null;
    }

    /** Returns true if field sensorType is set (has been assigned a value) and false otherwise */
    public boolean isSetSensorType() {
      return this.sensorType != null;
    }

    public void setSensorTypeIsSet(boolean value) {
      if (!value) {
        this.sensorType = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public querySensorHistoricalDataBySensorTypePF_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public querySensorHistoricalDataBySensorTypePF_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case PARTFIELD_ID:
        if (value == null) {
          unsetPartfieldId();
        } else {
          setPartfieldId((Integer)value);
        }
        break;

      case SENSOR_TYPE:
        if (value == null) {
          unsetSensorType();
        } else {
          setSensorType((com.afarcloud.thrift.SensorType)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case PARTFIELD_ID:
        return Integer.valueOf(getPartfieldId());

      case SENSOR_TYPE:
        return getSensorType();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case PARTFIELD_ID:
        return isSetPartfieldId();
      case SENSOR_TYPE:
        return isSetSensorType();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataBySensorTypePF_args)
        return this.equals((querySensorHistoricalDataBySensorTypePF_args)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataBySensorTypePF_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_partfieldId = true;
      boolean that_present_partfieldId = true;
      if (this_present_partfieldId || that_present_partfieldId) {
        if (!(this_present_partfieldId && that_present_partfieldId))
          return false;
        if (this.partfieldId != that.partfieldId)
          return false;
      }

      boolean this_present_sensorType = true && this.isSetSensorType();
      boolean that_present_sensorType = true && that.isSetSensorType();
      if (this_present_sensorType || that_present_sensorType) {
        if (!(this_present_sensorType && that_present_sensorType))
          return false;
        if (!this.sensorType.equals(that.sensorType))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_partfieldId = true;
      list.add(present_partfieldId);
      if (present_partfieldId)
        list.add(partfieldId);

      boolean present_sensorType = true && (isSetSensorType());
      list.add(present_sensorType);
      if (present_sensorType)
        list.add(sensorType.getValue());

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataBySensorTypePF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartfieldId()).compareTo(other.isSetPartfieldId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartfieldId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partfieldId, other.partfieldId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSensorType()).compareTo(other.isSetSensorType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSensorType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorType, other.sensorType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataBySensorTypePF_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partfieldId:");
      sb.append(this.partfieldId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sensorType:");
      if (this.sensorType == null) {
        sb.append("null");
      } else {
        sb.append(this.sensorType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataBySensorTypePF_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorTypePF_argsStandardScheme getScheme() {
        return new querySensorHistoricalDataBySensorTypePF_argsStandardScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorTypePF_argsStandardScheme extends StandardScheme<querySensorHistoricalDataBySensorTypePF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataBySensorTypePF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTFIELD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partfieldId = iprot.readI32();
                struct.setPartfieldIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SENSOR_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
                struct.setSensorTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataBySensorTypePF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTFIELD_ID_FIELD_DESC);
        oprot.writeI32(struct.partfieldId);
        oprot.writeFieldEnd();
        if (struct.sensorType != null) {
          oprot.writeFieldBegin(SENSOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.sensorType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataBySensorTypePF_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorTypePF_argsTupleScheme getScheme() {
        return new querySensorHistoricalDataBySensorTypePF_argsTupleScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorTypePF_argsTupleScheme extends TupleScheme<querySensorHistoricalDataBySensorTypePF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorTypePF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetPartfieldId()) {
          optionals.set(1);
        }
        if (struct.isSetSensorType()) {
          optionals.set(2);
        }
        if (struct.isSetStartTime()) {
          optionals.set(3);
        }
        if (struct.isSetEndTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetPartfieldId()) {
          oprot.writeI32(struct.partfieldId);
        }
        if (struct.isSetSensorType()) {
          oprot.writeI32(struct.sensorType.getValue());
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorTypePF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partfieldId = iprot.readI32();
          struct.setPartfieldIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
          struct.setSensorTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataBySensorTypePF_result implements org.apache.thrift.TBase<querySensorHistoricalDataBySensorTypePF_result, querySensorHistoricalDataBySensorTypePF_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataBySensorTypePF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataBySensorTypePF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataBySensorTypePF_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataBySensorTypePF_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataBySensorTypePF_result.class, metaDataMap);
    }

    public querySensorHistoricalDataBySensorTypePF_result() {
    }

    public querySensorHistoricalDataBySensorTypePF_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataBySensorTypePF_result(querySensorHistoricalDataBySensorTypePF_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorHistoricalDataBySensorTypePF_result deepCopy() {
      return new querySensorHistoricalDataBySensorTypePF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorHistoricalDataBySensorTypePF_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataBySensorTypePF_result)
        return this.equals((querySensorHistoricalDataBySensorTypePF_result)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataBySensorTypePF_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataBySensorTypePF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataBySensorTypePF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataBySensorTypePF_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorTypePF_resultStandardScheme getScheme() {
        return new querySensorHistoricalDataBySensorTypePF_resultStandardScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorTypePF_resultStandardScheme extends StandardScheme<querySensorHistoricalDataBySensorTypePF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataBySensorTypePF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list160.size);
                  com.afarcloud.thrift.SensorData _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = new com.afarcloud.thrift.SensorData();
                    _elem161.read(iprot);
                    struct.success.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataBySensorTypePF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter163 : struct.success)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataBySensorTypePF_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorTypePF_resultTupleScheme getScheme() {
        return new querySensorHistoricalDataBySensorTypePF_resultTupleScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorTypePF_resultTupleScheme extends TupleScheme<querySensorHistoricalDataBySensorTypePF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorTypePF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter164 : struct.success)
            {
              _iter164.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorTypePF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list165.size);
            com.afarcloud.thrift.SensorData _elem166;
            for (int _i167 = 0; _i167 < _list165.size; ++_i167)
            {
              _elem166 = new com.afarcloud.thrift.SensorData();
              _elem166.read(iprot);
              struct.success.add(_elem166);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataByObservationTypePF_args implements org.apache.thrift.TBase<querySensorHistoricalDataByObservationTypePF_args, querySensorHistoricalDataByObservationTypePF_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataByObservationTypePF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataByObservationTypePF_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARTFIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partfieldId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField OBSER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("obserType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataByObservationTypePF_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataByObservationTypePF_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int partfieldId; // required
    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public com.afarcloud.thrift.ObservationType obserType; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      PARTFIELD_ID((short)2, "partfieldId"),
      /**
       * 
       * @see com.afarcloud.thrift.ObservationType
       */
      OBSER_TYPE((short)3, "obserType"),
      START_TIME((short)4, "startTime"),
      END_TIME((short)5, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // PARTFIELD_ID
            return PARTFIELD_ID;
          case 3: // OBSER_TYPE
            return OBSER_TYPE;
          case 4: // START_TIME
            return START_TIME;
          case 5: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __PARTFIELDID_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTFIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("partfieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OBSER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("obserType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.afarcloud.thrift.ObservationType.class)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataByObservationTypePF_args.class, metaDataMap);
    }

    public querySensorHistoricalDataByObservationTypePF_args() {
    }

    public querySensorHistoricalDataByObservationTypePF_args(
      int requestId,
      int partfieldId,
      com.afarcloud.thrift.ObservationType obserType,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      this.obserType = obserType;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataByObservationTypePF_args(querySensorHistoricalDataByObservationTypePF_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.partfieldId = other.partfieldId;
      if (other.isSetObserType()) {
        this.obserType = other.obserType;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public querySensorHistoricalDataByObservationTypePF_args deepCopy() {
      return new querySensorHistoricalDataByObservationTypePF_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setPartfieldIdIsSet(false);
      this.partfieldId = 0;
      this.obserType = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorHistoricalDataByObservationTypePF_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getPartfieldId() {
      return this.partfieldId;
    }

    public querySensorHistoricalDataByObservationTypePF_args setPartfieldId(int partfieldId) {
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      return this;
    }

    public void unsetPartfieldId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    /** Returns true if field partfieldId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartfieldId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    public void setPartfieldIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTFIELDID_ISSET_ID, value);
    }

    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public com.afarcloud.thrift.ObservationType getObserType() {
      return this.obserType;
    }

    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public querySensorHistoricalDataByObservationTypePF_args setObserType(com.afarcloud.thrift.ObservationType obserType) {
      this.obserType = obserType;
      return this;
    }

    public void unsetObserType() {
      this.obserType = null;
    }

    /** Returns true if field obserType is set (has been assigned a value) and false otherwise */
    public boolean isSetObserType() {
      return this.obserType != null;
    }

    public void setObserTypeIsSet(boolean value) {
      if (!value) {
        this.obserType = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public querySensorHistoricalDataByObservationTypePF_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public querySensorHistoricalDataByObservationTypePF_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case PARTFIELD_ID:
        if (value == null) {
          unsetPartfieldId();
        } else {
          setPartfieldId((Integer)value);
        }
        break;

      case OBSER_TYPE:
        if (value == null) {
          unsetObserType();
        } else {
          setObserType((com.afarcloud.thrift.ObservationType)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case PARTFIELD_ID:
        return Integer.valueOf(getPartfieldId());

      case OBSER_TYPE:
        return getObserType();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case PARTFIELD_ID:
        return isSetPartfieldId();
      case OBSER_TYPE:
        return isSetObserType();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataByObservationTypePF_args)
        return this.equals((querySensorHistoricalDataByObservationTypePF_args)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataByObservationTypePF_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_partfieldId = true;
      boolean that_present_partfieldId = true;
      if (this_present_partfieldId || that_present_partfieldId) {
        if (!(this_present_partfieldId && that_present_partfieldId))
          return false;
        if (this.partfieldId != that.partfieldId)
          return false;
      }

      boolean this_present_obserType = true && this.isSetObserType();
      boolean that_present_obserType = true && that.isSetObserType();
      if (this_present_obserType || that_present_obserType) {
        if (!(this_present_obserType && that_present_obserType))
          return false;
        if (!this.obserType.equals(that.obserType))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_partfieldId = true;
      list.add(present_partfieldId);
      if (present_partfieldId)
        list.add(partfieldId);

      boolean present_obserType = true && (isSetObserType());
      list.add(present_obserType);
      if (present_obserType)
        list.add(obserType.getValue());

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataByObservationTypePF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartfieldId()).compareTo(other.isSetPartfieldId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartfieldId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partfieldId, other.partfieldId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetObserType()).compareTo(other.isSetObserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obserType, other.obserType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataByObservationTypePF_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partfieldId:");
      sb.append(this.partfieldId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("obserType:");
      if (this.obserType == null) {
        sb.append("null");
      } else {
        sb.append(this.obserType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataByObservationTypePF_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataByObservationTypePF_argsStandardScheme getScheme() {
        return new querySensorHistoricalDataByObservationTypePF_argsStandardScheme();
      }
    }

    private static class querySensorHistoricalDataByObservationTypePF_argsStandardScheme extends StandardScheme<querySensorHistoricalDataByObservationTypePF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataByObservationTypePF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTFIELD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partfieldId = iprot.readI32();
                struct.setPartfieldIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OBSER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.obserType = com.afarcloud.thrift.ObservationType.findByValue(iprot.readI32());
                struct.setObserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataByObservationTypePF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTFIELD_ID_FIELD_DESC);
        oprot.writeI32(struct.partfieldId);
        oprot.writeFieldEnd();
        if (struct.obserType != null) {
          oprot.writeFieldBegin(OBSER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.obserType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataByObservationTypePF_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataByObservationTypePF_argsTupleScheme getScheme() {
        return new querySensorHistoricalDataByObservationTypePF_argsTupleScheme();
      }
    }

    private static class querySensorHistoricalDataByObservationTypePF_argsTupleScheme extends TupleScheme<querySensorHistoricalDataByObservationTypePF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataByObservationTypePF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetPartfieldId()) {
          optionals.set(1);
        }
        if (struct.isSetObserType()) {
          optionals.set(2);
        }
        if (struct.isSetStartTime()) {
          optionals.set(3);
        }
        if (struct.isSetEndTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetPartfieldId()) {
          oprot.writeI32(struct.partfieldId);
        }
        if (struct.isSetObserType()) {
          oprot.writeI32(struct.obserType.getValue());
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataByObservationTypePF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partfieldId = iprot.readI32();
          struct.setPartfieldIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.obserType = com.afarcloud.thrift.ObservationType.findByValue(iprot.readI32());
          struct.setObserTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataByObservationTypePF_result implements org.apache.thrift.TBase<querySensorHistoricalDataByObservationTypePF_result, querySensorHistoricalDataByObservationTypePF_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataByObservationTypePF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataByObservationTypePF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataByObservationTypePF_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataByObservationTypePF_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataByObservationTypePF_result.class, metaDataMap);
    }

    public querySensorHistoricalDataByObservationTypePF_result() {
    }

    public querySensorHistoricalDataByObservationTypePF_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataByObservationTypePF_result(querySensorHistoricalDataByObservationTypePF_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorHistoricalDataByObservationTypePF_result deepCopy() {
      return new querySensorHistoricalDataByObservationTypePF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorHistoricalDataByObservationTypePF_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataByObservationTypePF_result)
        return this.equals((querySensorHistoricalDataByObservationTypePF_result)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataByObservationTypePF_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataByObservationTypePF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataByObservationTypePF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataByObservationTypePF_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataByObservationTypePF_resultStandardScheme getScheme() {
        return new querySensorHistoricalDataByObservationTypePF_resultStandardScheme();
      }
    }

    private static class querySensorHistoricalDataByObservationTypePF_resultStandardScheme extends StandardScheme<querySensorHistoricalDataByObservationTypePF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataByObservationTypePF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list168.size);
                  com.afarcloud.thrift.SensorData _elem169;
                  for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                  {
                    _elem169 = new com.afarcloud.thrift.SensorData();
                    _elem169.read(iprot);
                    struct.success.add(_elem169);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataByObservationTypePF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter171 : struct.success)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataByObservationTypePF_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataByObservationTypePF_resultTupleScheme getScheme() {
        return new querySensorHistoricalDataByObservationTypePF_resultTupleScheme();
      }
    }

    private static class querySensorHistoricalDataByObservationTypePF_resultTupleScheme extends TupleScheme<querySensorHistoricalDataByObservationTypePF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataByObservationTypePF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter172 : struct.success)
            {
              _iter172.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataByObservationTypePF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list173.size);
            com.afarcloud.thrift.SensorData _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = new com.afarcloud.thrift.SensorData();
              _elem174.read(iprot);
              struct.success.add(_elem174);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataC_args implements org.apache.thrift.TBase<querySensorHistoricalDataC_args, querySensorHistoricalDataC_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataC_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataC_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataC_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataC_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius"),
      START_TIME((short)4, "startTime"),
      END_TIME((short)5, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          case 4: // START_TIME
            return START_TIME;
          case 5: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataC_args.class, metaDataMap);
    }

    public querySensorHistoricalDataC_args() {
    }

    public querySensorHistoricalDataC_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataC_args(querySensorHistoricalDataC_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public querySensorHistoricalDataC_args deepCopy() {
      return new querySensorHistoricalDataC_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorHistoricalDataC_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public querySensorHistoricalDataC_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public querySensorHistoricalDataC_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public querySensorHistoricalDataC_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public querySensorHistoricalDataC_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataC_args)
        return this.equals((querySensorHistoricalDataC_args)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataC_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataC_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataC_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataC_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataC_argsStandardScheme getScheme() {
        return new querySensorHistoricalDataC_argsStandardScheme();
      }
    }

    private static class querySensorHistoricalDataC_argsStandardScheme extends StandardScheme<querySensorHistoricalDataC_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataC_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataC_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataC_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataC_argsTupleScheme getScheme() {
        return new querySensorHistoricalDataC_argsTupleScheme();
      }
    }

    private static class querySensorHistoricalDataC_argsTupleScheme extends TupleScheme<querySensorHistoricalDataC_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        if (struct.isSetStartTime()) {
          optionals.set(3);
        }
        if (struct.isSetEndTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataC_result implements org.apache.thrift.TBase<querySensorHistoricalDataC_result, querySensorHistoricalDataC_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataC_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataC_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataC_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataC_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataC_result.class, metaDataMap);
    }

    public querySensorHistoricalDataC_result() {
    }

    public querySensorHistoricalDataC_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataC_result(querySensorHistoricalDataC_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorHistoricalDataC_result deepCopy() {
      return new querySensorHistoricalDataC_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorHistoricalDataC_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataC_result)
        return this.equals((querySensorHistoricalDataC_result)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataC_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataC_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataC_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataC_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataC_resultStandardScheme getScheme() {
        return new querySensorHistoricalDataC_resultStandardScheme();
      }
    }

    private static class querySensorHistoricalDataC_resultStandardScheme extends StandardScheme<querySensorHistoricalDataC_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataC_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list176.size);
                  com.afarcloud.thrift.SensorData _elem177;
                  for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                  {
                    _elem177 = new com.afarcloud.thrift.SensorData();
                    _elem177.read(iprot);
                    struct.success.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataC_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter179 : struct.success)
            {
              _iter179.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataC_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataC_resultTupleScheme getScheme() {
        return new querySensorHistoricalDataC_resultTupleScheme();
      }
    }

    private static class querySensorHistoricalDataC_resultTupleScheme extends TupleScheme<querySensorHistoricalDataC_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter180 : struct.success)
            {
              _iter180.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list181.size);
            com.afarcloud.thrift.SensorData _elem182;
            for (int _i183 = 0; _i183 < _list181.size; ++_i183)
            {
              _elem182 = new com.afarcloud.thrift.SensorData();
              _elem182.read(iprot);
              struct.success.add(_elem182);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataBySensorTypeC_args implements org.apache.thrift.TBase<querySensorHistoricalDataBySensorTypeC_args, querySensorHistoricalDataBySensorTypeC_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataBySensorTypeC_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataBySensorTypeC_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SENSOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorType", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataBySensorTypeC_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataBySensorTypeC_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required
    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public com.afarcloud.thrift.SensorType sensorType; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius"),
      /**
       * 
       * @see com.afarcloud.thrift.SensorType
       */
      SENSOR_TYPE((short)4, "sensorType"),
      START_TIME((short)5, "startTime"),
      END_TIME((short)6, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          case 4: // SENSOR_TYPE
            return SENSOR_TYPE;
          case 5: // START_TIME
            return START_TIME;
          case 6: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SENSOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sensorType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.afarcloud.thrift.SensorType.class)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataBySensorTypeC_args.class, metaDataMap);
    }

    public querySensorHistoricalDataBySensorTypeC_args() {
    }

    public querySensorHistoricalDataBySensorTypeC_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius,
      com.afarcloud.thrift.SensorType sensorType,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
      this.sensorType = sensorType;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataBySensorTypeC_args(querySensorHistoricalDataBySensorTypeC_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
      if (other.isSetSensorType()) {
        this.sensorType = other.sensorType;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public querySensorHistoricalDataBySensorTypeC_args deepCopy() {
      return new querySensorHistoricalDataBySensorTypeC_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
      this.sensorType = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorHistoricalDataBySensorTypeC_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public querySensorHistoricalDataBySensorTypeC_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public querySensorHistoricalDataBySensorTypeC_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public com.afarcloud.thrift.SensorType getSensorType() {
      return this.sensorType;
    }

    /**
     * 
     * @see com.afarcloud.thrift.SensorType
     */
    public querySensorHistoricalDataBySensorTypeC_args setSensorType(com.afarcloud.thrift.SensorType sensorType) {
      this.sensorType = sensorType;
      return this;
    }

    public void unsetSensorType() {
      this.sensorType = null;
    }

    /** Returns true if field sensorType is set (has been assigned a value) and false otherwise */
    public boolean isSetSensorType() {
      return this.sensorType != null;
    }

    public void setSensorTypeIsSet(boolean value) {
      if (!value) {
        this.sensorType = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public querySensorHistoricalDataBySensorTypeC_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public querySensorHistoricalDataBySensorTypeC_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      case SENSOR_TYPE:
        if (value == null) {
          unsetSensorType();
        } else {
          setSensorType((com.afarcloud.thrift.SensorType)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      case SENSOR_TYPE:
        return getSensorType();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      case SENSOR_TYPE:
        return isSetSensorType();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataBySensorTypeC_args)
        return this.equals((querySensorHistoricalDataBySensorTypeC_args)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataBySensorTypeC_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      boolean this_present_sensorType = true && this.isSetSensorType();
      boolean that_present_sensorType = true && that.isSetSensorType();
      if (this_present_sensorType || that_present_sensorType) {
        if (!(this_present_sensorType && that_present_sensorType))
          return false;
        if (!this.sensorType.equals(that.sensorType))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      boolean present_sensorType = true && (isSetSensorType());
      list.add(present_sensorType);
      if (present_sensorType)
        list.add(sensorType.getValue());

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataBySensorTypeC_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSensorType()).compareTo(other.isSetSensorType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSensorType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorType, other.sensorType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataBySensorTypeC_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sensorType:");
      if (this.sensorType == null) {
        sb.append("null");
      } else {
        sb.append(this.sensorType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataBySensorTypeC_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorTypeC_argsStandardScheme getScheme() {
        return new querySensorHistoricalDataBySensorTypeC_argsStandardScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorTypeC_argsStandardScheme extends StandardScheme<querySensorHistoricalDataBySensorTypeC_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataBySensorTypeC_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SENSOR_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
                struct.setSensorTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataBySensorTypeC_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        if (struct.sensorType != null) {
          oprot.writeFieldBegin(SENSOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.sensorType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataBySensorTypeC_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorTypeC_argsTupleScheme getScheme() {
        return new querySensorHistoricalDataBySensorTypeC_argsTupleScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorTypeC_argsTupleScheme extends TupleScheme<querySensorHistoricalDataBySensorTypeC_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorTypeC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        if (struct.isSetSensorType()) {
          optionals.set(3);
        }
        if (struct.isSetStartTime()) {
          optionals.set(4);
        }
        if (struct.isSetEndTime()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
        if (struct.isSetSensorType()) {
          oprot.writeI32(struct.sensorType.getValue());
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorTypeC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sensorType = com.afarcloud.thrift.SensorType.findByValue(iprot.readI32());
          struct.setSensorTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataBySensorTypeC_result implements org.apache.thrift.TBase<querySensorHistoricalDataBySensorTypeC_result, querySensorHistoricalDataBySensorTypeC_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataBySensorTypeC_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataBySensorTypeC_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataBySensorTypeC_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataBySensorTypeC_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataBySensorTypeC_result.class, metaDataMap);
    }

    public querySensorHistoricalDataBySensorTypeC_result() {
    }

    public querySensorHistoricalDataBySensorTypeC_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataBySensorTypeC_result(querySensorHistoricalDataBySensorTypeC_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorHistoricalDataBySensorTypeC_result deepCopy() {
      return new querySensorHistoricalDataBySensorTypeC_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorHistoricalDataBySensorTypeC_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataBySensorTypeC_result)
        return this.equals((querySensorHistoricalDataBySensorTypeC_result)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataBySensorTypeC_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataBySensorTypeC_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataBySensorTypeC_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataBySensorTypeC_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorTypeC_resultStandardScheme getScheme() {
        return new querySensorHistoricalDataBySensorTypeC_resultStandardScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorTypeC_resultStandardScheme extends StandardScheme<querySensorHistoricalDataBySensorTypeC_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataBySensorTypeC_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list184.size);
                  com.afarcloud.thrift.SensorData _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = new com.afarcloud.thrift.SensorData();
                    _elem185.read(iprot);
                    struct.success.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataBySensorTypeC_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter187 : struct.success)
            {
              _iter187.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataBySensorTypeC_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataBySensorTypeC_resultTupleScheme getScheme() {
        return new querySensorHistoricalDataBySensorTypeC_resultTupleScheme();
      }
    }

    private static class querySensorHistoricalDataBySensorTypeC_resultTupleScheme extends TupleScheme<querySensorHistoricalDataBySensorTypeC_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorTypeC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter188 : struct.success)
            {
              _iter188.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataBySensorTypeC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list189.size);
            com.afarcloud.thrift.SensorData _elem190;
            for (int _i191 = 0; _i191 < _list189.size; ++_i191)
            {
              _elem190 = new com.afarcloud.thrift.SensorData();
              _elem190.read(iprot);
              struct.success.add(_elem190);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataByObservationTypeC_args implements org.apache.thrift.TBase<querySensorHistoricalDataByObservationTypeC_args, querySensorHistoricalDataByObservationTypeC_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataByObservationTypeC_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataByObservationTypeC_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField OBSER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("obserType", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataByObservationTypeC_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataByObservationTypeC_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required
    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public com.afarcloud.thrift.ObservationType obserType; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius"),
      /**
       * 
       * @see com.afarcloud.thrift.ObservationType
       */
      OBSER_TYPE((short)4, "obserType"),
      START_TIME((short)5, "startTime"),
      END_TIME((short)6, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          case 4: // OBSER_TYPE
            return OBSER_TYPE;
          case 5: // START_TIME
            return START_TIME;
          case 6: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OBSER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("obserType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.afarcloud.thrift.ObservationType.class)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataByObservationTypeC_args.class, metaDataMap);
    }

    public querySensorHistoricalDataByObservationTypeC_args() {
    }

    public querySensorHistoricalDataByObservationTypeC_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius,
      com.afarcloud.thrift.ObservationType obserType,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
      this.obserType = obserType;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataByObservationTypeC_args(querySensorHistoricalDataByObservationTypeC_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
      if (other.isSetObserType()) {
        this.obserType = other.obserType;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public querySensorHistoricalDataByObservationTypeC_args deepCopy() {
      return new querySensorHistoricalDataByObservationTypeC_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
      this.obserType = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public querySensorHistoricalDataByObservationTypeC_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public querySensorHistoricalDataByObservationTypeC_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public querySensorHistoricalDataByObservationTypeC_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public com.afarcloud.thrift.ObservationType getObserType() {
      return this.obserType;
    }

    /**
     * 
     * @see com.afarcloud.thrift.ObservationType
     */
    public querySensorHistoricalDataByObservationTypeC_args setObserType(com.afarcloud.thrift.ObservationType obserType) {
      this.obserType = obserType;
      return this;
    }

    public void unsetObserType() {
      this.obserType = null;
    }

    /** Returns true if field obserType is set (has been assigned a value) and false otherwise */
    public boolean isSetObserType() {
      return this.obserType != null;
    }

    public void setObserTypeIsSet(boolean value) {
      if (!value) {
        this.obserType = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public querySensorHistoricalDataByObservationTypeC_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public querySensorHistoricalDataByObservationTypeC_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      case OBSER_TYPE:
        if (value == null) {
          unsetObserType();
        } else {
          setObserType((com.afarcloud.thrift.ObservationType)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      case OBSER_TYPE:
        return getObserType();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      case OBSER_TYPE:
        return isSetObserType();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataByObservationTypeC_args)
        return this.equals((querySensorHistoricalDataByObservationTypeC_args)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataByObservationTypeC_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      boolean this_present_obserType = true && this.isSetObserType();
      boolean that_present_obserType = true && that.isSetObserType();
      if (this_present_obserType || that_present_obserType) {
        if (!(this_present_obserType && that_present_obserType))
          return false;
        if (!this.obserType.equals(that.obserType))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      boolean present_obserType = true && (isSetObserType());
      list.add(present_obserType);
      if (present_obserType)
        list.add(obserType.getValue());

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataByObservationTypeC_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetObserType()).compareTo(other.isSetObserType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObserType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obserType, other.obserType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataByObservationTypeC_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      if (!first) sb.append(", ");
      sb.append("obserType:");
      if (this.obserType == null) {
        sb.append("null");
      } else {
        sb.append(this.obserType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataByObservationTypeC_argsStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataByObservationTypeC_argsStandardScheme getScheme() {
        return new querySensorHistoricalDataByObservationTypeC_argsStandardScheme();
      }
    }

    private static class querySensorHistoricalDataByObservationTypeC_argsStandardScheme extends StandardScheme<querySensorHistoricalDataByObservationTypeC_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataByObservationTypeC_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OBSER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.obserType = com.afarcloud.thrift.ObservationType.findByValue(iprot.readI32());
                struct.setObserTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataByObservationTypeC_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        if (struct.obserType != null) {
          oprot.writeFieldBegin(OBSER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.obserType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataByObservationTypeC_argsTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataByObservationTypeC_argsTupleScheme getScheme() {
        return new querySensorHistoricalDataByObservationTypeC_argsTupleScheme();
      }
    }

    private static class querySensorHistoricalDataByObservationTypeC_argsTupleScheme extends TupleScheme<querySensorHistoricalDataByObservationTypeC_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataByObservationTypeC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        if (struct.isSetObserType()) {
          optionals.set(3);
        }
        if (struct.isSetStartTime()) {
          optionals.set(4);
        }
        if (struct.isSetEndTime()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
        if (struct.isSetObserType()) {
          oprot.writeI32(struct.obserType.getValue());
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataByObservationTypeC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.obserType = com.afarcloud.thrift.ObservationType.findByValue(iprot.readI32());
          struct.setObserTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class querySensorHistoricalDataByObservationTypeC_result implements org.apache.thrift.TBase<querySensorHistoricalDataByObservationTypeC_result, querySensorHistoricalDataByObservationTypeC_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySensorHistoricalDataByObservationTypeC_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySensorHistoricalDataByObservationTypeC_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new querySensorHistoricalDataByObservationTypeC_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new querySensorHistoricalDataByObservationTypeC_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.SensorData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.SensorData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySensorHistoricalDataByObservationTypeC_result.class, metaDataMap);
    }

    public querySensorHistoricalDataByObservationTypeC_result() {
    }

    public querySensorHistoricalDataByObservationTypeC_result(
      List<com.afarcloud.thrift.SensorData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySensorHistoricalDataByObservationTypeC_result(querySensorHistoricalDataByObservationTypeC_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.SensorData> __this__success = new ArrayList<com.afarcloud.thrift.SensorData>(other.success.size());
        for (com.afarcloud.thrift.SensorData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.SensorData(other_element));
        }
        this.success = __this__success;
      }
    }

    public querySensorHistoricalDataByObservationTypeC_result deepCopy() {
      return new querySensorHistoricalDataByObservationTypeC_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.SensorData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.SensorData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.SensorData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.SensorData> getSuccess() {
      return this.success;
    }

    public querySensorHistoricalDataByObservationTypeC_result setSuccess(List<com.afarcloud.thrift.SensorData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.SensorData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof querySensorHistoricalDataByObservationTypeC_result)
        return this.equals((querySensorHistoricalDataByObservationTypeC_result)that);
      return false;
    }

    public boolean equals(querySensorHistoricalDataByObservationTypeC_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(querySensorHistoricalDataByObservationTypeC_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("querySensorHistoricalDataByObservationTypeC_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySensorHistoricalDataByObservationTypeC_resultStandardSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataByObservationTypeC_resultStandardScheme getScheme() {
        return new querySensorHistoricalDataByObservationTypeC_resultStandardScheme();
      }
    }

    private static class querySensorHistoricalDataByObservationTypeC_resultStandardScheme extends StandardScheme<querySensorHistoricalDataByObservationTypeC_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySensorHistoricalDataByObservationTypeC_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list192.size);
                  com.afarcloud.thrift.SensorData _elem193;
                  for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                  {
                    _elem193 = new com.afarcloud.thrift.SensorData();
                    _elem193.read(iprot);
                    struct.success.add(_elem193);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySensorHistoricalDataByObservationTypeC_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.SensorData _iter195 : struct.success)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySensorHistoricalDataByObservationTypeC_resultTupleSchemeFactory implements SchemeFactory {
      public querySensorHistoricalDataByObservationTypeC_resultTupleScheme getScheme() {
        return new querySensorHistoricalDataByObservationTypeC_resultTupleScheme();
      }
    }

    private static class querySensorHistoricalDataByObservationTypeC_resultTupleScheme extends TupleScheme<querySensorHistoricalDataByObservationTypeC_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataByObservationTypeC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.SensorData _iter196 : struct.success)
            {
              _iter196.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySensorHistoricalDataByObservationTypeC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.SensorData>(_list197.size);
            com.afarcloud.thrift.SensorData _elem198;
            for (int _i199 = 0; _i199 < _list197.size; ++_i199)
            {
              _elem198 = new com.afarcloud.thrift.SensorData();
              _elem198.read(iprot);
              struct.success.add(_elem198);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCollarHistoricalDataPF_args implements org.apache.thrift.TBase<queryCollarHistoricalDataPF_args, queryCollarHistoricalDataPF_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarHistoricalDataPF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarHistoricalDataPF_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARTFIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partfieldId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarHistoricalDataPF_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarHistoricalDataPF_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int partfieldId; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      PARTFIELD_ID((short)2, "partfieldId"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // PARTFIELD_ID
            return PARTFIELD_ID;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __PARTFIELDID_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTFIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("partfieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarHistoricalDataPF_args.class, metaDataMap);
    }

    public queryCollarHistoricalDataPF_args() {
    }

    public queryCollarHistoricalDataPF_args(
      int requestId,
      int partfieldId,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarHistoricalDataPF_args(queryCollarHistoricalDataPF_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.partfieldId = other.partfieldId;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public queryCollarHistoricalDataPF_args deepCopy() {
      return new queryCollarHistoricalDataPF_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setPartfieldIdIsSet(false);
      this.partfieldId = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryCollarHistoricalDataPF_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getPartfieldId() {
      return this.partfieldId;
    }

    public queryCollarHistoricalDataPF_args setPartfieldId(int partfieldId) {
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      return this;
    }

    public void unsetPartfieldId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    /** Returns true if field partfieldId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartfieldId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    public void setPartfieldIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTFIELDID_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public queryCollarHistoricalDataPF_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public queryCollarHistoricalDataPF_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case PARTFIELD_ID:
        if (value == null) {
          unsetPartfieldId();
        } else {
          setPartfieldId((Integer)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case PARTFIELD_ID:
        return Integer.valueOf(getPartfieldId());

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case PARTFIELD_ID:
        return isSetPartfieldId();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarHistoricalDataPF_args)
        return this.equals((queryCollarHistoricalDataPF_args)that);
      return false;
    }

    public boolean equals(queryCollarHistoricalDataPF_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_partfieldId = true;
      boolean that_present_partfieldId = true;
      if (this_present_partfieldId || that_present_partfieldId) {
        if (!(this_present_partfieldId && that_present_partfieldId))
          return false;
        if (this.partfieldId != that.partfieldId)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_partfieldId = true;
      list.add(present_partfieldId);
      if (present_partfieldId)
        list.add(partfieldId);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarHistoricalDataPF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartfieldId()).compareTo(other.isSetPartfieldId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartfieldId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partfieldId, other.partfieldId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarHistoricalDataPF_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partfieldId:");
      sb.append(this.partfieldId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarHistoricalDataPF_argsStandardSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataPF_argsStandardScheme getScheme() {
        return new queryCollarHistoricalDataPF_argsStandardScheme();
      }
    }

    private static class queryCollarHistoricalDataPF_argsStandardScheme extends StandardScheme<queryCollarHistoricalDataPF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarHistoricalDataPF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTFIELD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partfieldId = iprot.readI32();
                struct.setPartfieldIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarHistoricalDataPF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTFIELD_ID_FIELD_DESC);
        oprot.writeI32(struct.partfieldId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarHistoricalDataPF_argsTupleSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataPF_argsTupleScheme getScheme() {
        return new queryCollarHistoricalDataPF_argsTupleScheme();
      }
    }

    private static class queryCollarHistoricalDataPF_argsTupleScheme extends TupleScheme<queryCollarHistoricalDataPF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataPF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetPartfieldId()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetPartfieldId()) {
          oprot.writeI32(struct.partfieldId);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataPF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partfieldId = iprot.readI32();
          struct.setPartfieldIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class queryCollarHistoricalDataPF_result implements org.apache.thrift.TBase<queryCollarHistoricalDataPF_result, queryCollarHistoricalDataPF_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarHistoricalDataPF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarHistoricalDataPF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarHistoricalDataPF_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarHistoricalDataPF_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.CollarData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.CollarData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarHistoricalDataPF_result.class, metaDataMap);
    }

    public queryCollarHistoricalDataPF_result() {
    }

    public queryCollarHistoricalDataPF_result(
      List<com.afarcloud.thrift.CollarData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarHistoricalDataPF_result(queryCollarHistoricalDataPF_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.CollarData> __this__success = new ArrayList<com.afarcloud.thrift.CollarData>(other.success.size());
        for (com.afarcloud.thrift.CollarData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.CollarData(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCollarHistoricalDataPF_result deepCopy() {
      return new queryCollarHistoricalDataPF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.CollarData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.CollarData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.CollarData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.CollarData> getSuccess() {
      return this.success;
    }

    public queryCollarHistoricalDataPF_result setSuccess(List<com.afarcloud.thrift.CollarData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.CollarData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarHistoricalDataPF_result)
        return this.equals((queryCollarHistoricalDataPF_result)that);
      return false;
    }

    public boolean equals(queryCollarHistoricalDataPF_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarHistoricalDataPF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarHistoricalDataPF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarHistoricalDataPF_resultStandardSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataPF_resultStandardScheme getScheme() {
        return new queryCollarHistoricalDataPF_resultStandardScheme();
      }
    }

    private static class queryCollarHistoricalDataPF_resultStandardScheme extends StandardScheme<queryCollarHistoricalDataPF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarHistoricalDataPF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list200.size);
                  com.afarcloud.thrift.CollarData _elem201;
                  for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                  {
                    _elem201 = new com.afarcloud.thrift.CollarData();
                    _elem201.read(iprot);
                    struct.success.add(_elem201);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarHistoricalDataPF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.CollarData _iter203 : struct.success)
            {
              _iter203.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarHistoricalDataPF_resultTupleSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataPF_resultTupleScheme getScheme() {
        return new queryCollarHistoricalDataPF_resultTupleScheme();
      }
    }

    private static class queryCollarHistoricalDataPF_resultTupleScheme extends TupleScheme<queryCollarHistoricalDataPF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataPF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.CollarData _iter204 : struct.success)
            {
              _iter204.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataPF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list205.size);
            com.afarcloud.thrift.CollarData _elem206;
            for (int _i207 = 0; _i207 < _list205.size; ++_i207)
            {
              _elem206 = new com.afarcloud.thrift.CollarData();
              _elem206.read(iprot);
              struct.success.add(_elem206);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCollarHistoricalDataC_args implements org.apache.thrift.TBase<queryCollarHistoricalDataC_args, queryCollarHistoricalDataC_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarHistoricalDataC_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarHistoricalDataC_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarHistoricalDataC_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarHistoricalDataC_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius"),
      START_TIME((short)4, "startTime"),
      END_TIME((short)5, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          case 4: // START_TIME
            return START_TIME;
          case 5: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarHistoricalDataC_args.class, metaDataMap);
    }

    public queryCollarHistoricalDataC_args() {
    }

    public queryCollarHistoricalDataC_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarHistoricalDataC_args(queryCollarHistoricalDataC_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public queryCollarHistoricalDataC_args deepCopy() {
      return new queryCollarHistoricalDataC_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryCollarHistoricalDataC_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public queryCollarHistoricalDataC_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public queryCollarHistoricalDataC_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public queryCollarHistoricalDataC_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public queryCollarHistoricalDataC_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarHistoricalDataC_args)
        return this.equals((queryCollarHistoricalDataC_args)that);
      return false;
    }

    public boolean equals(queryCollarHistoricalDataC_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarHistoricalDataC_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarHistoricalDataC_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarHistoricalDataC_argsStandardSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataC_argsStandardScheme getScheme() {
        return new queryCollarHistoricalDataC_argsStandardScheme();
      }
    }

    private static class queryCollarHistoricalDataC_argsStandardScheme extends StandardScheme<queryCollarHistoricalDataC_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarHistoricalDataC_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarHistoricalDataC_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarHistoricalDataC_argsTupleSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataC_argsTupleScheme getScheme() {
        return new queryCollarHistoricalDataC_argsTupleScheme();
      }
    }

    private static class queryCollarHistoricalDataC_argsTupleScheme extends TupleScheme<queryCollarHistoricalDataC_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        if (struct.isSetStartTime()) {
          optionals.set(3);
        }
        if (struct.isSetEndTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class queryCollarHistoricalDataC_result implements org.apache.thrift.TBase<queryCollarHistoricalDataC_result, queryCollarHistoricalDataC_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarHistoricalDataC_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarHistoricalDataC_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarHistoricalDataC_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarHistoricalDataC_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.CollarData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.CollarData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarHistoricalDataC_result.class, metaDataMap);
    }

    public queryCollarHistoricalDataC_result() {
    }

    public queryCollarHistoricalDataC_result(
      List<com.afarcloud.thrift.CollarData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarHistoricalDataC_result(queryCollarHistoricalDataC_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.CollarData> __this__success = new ArrayList<com.afarcloud.thrift.CollarData>(other.success.size());
        for (com.afarcloud.thrift.CollarData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.CollarData(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCollarHistoricalDataC_result deepCopy() {
      return new queryCollarHistoricalDataC_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.CollarData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.CollarData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.CollarData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.CollarData> getSuccess() {
      return this.success;
    }

    public queryCollarHistoricalDataC_result setSuccess(List<com.afarcloud.thrift.CollarData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.CollarData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarHistoricalDataC_result)
        return this.equals((queryCollarHistoricalDataC_result)that);
      return false;
    }

    public boolean equals(queryCollarHistoricalDataC_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarHistoricalDataC_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarHistoricalDataC_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarHistoricalDataC_resultStandardSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataC_resultStandardScheme getScheme() {
        return new queryCollarHistoricalDataC_resultStandardScheme();
      }
    }

    private static class queryCollarHistoricalDataC_resultStandardScheme extends StandardScheme<queryCollarHistoricalDataC_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarHistoricalDataC_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list208.size);
                  com.afarcloud.thrift.CollarData _elem209;
                  for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                  {
                    _elem209 = new com.afarcloud.thrift.CollarData();
                    _elem209.read(iprot);
                    struct.success.add(_elem209);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarHistoricalDataC_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.CollarData _iter211 : struct.success)
            {
              _iter211.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarHistoricalDataC_resultTupleSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataC_resultTupleScheme getScheme() {
        return new queryCollarHistoricalDataC_resultTupleScheme();
      }
    }

    private static class queryCollarHistoricalDataC_resultTupleScheme extends TupleScheme<queryCollarHistoricalDataC_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.CollarData _iter212 : struct.success)
            {
              _iter212.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list213.size);
            com.afarcloud.thrift.CollarData _elem214;
            for (int _i215 = 0; _i215 < _list213.size; ++_i215)
            {
              _elem214 = new com.afarcloud.thrift.CollarData();
              _elem214.read(iprot);
              struct.success.add(_elem214);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryCollarHistoricalDataByCollarUid_args implements org.apache.thrift.TBase<queryCollarHistoricalDataByCollarUid_args, queryCollarHistoricalDataByCollarUid_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarHistoricalDataByCollarUid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarHistoricalDataByCollarUid_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COLLAR_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("collarUid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarHistoricalDataByCollarUid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarHistoricalDataByCollarUid_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public String collarUid; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      COLLAR_UID((short)2, "collarUid"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // COLLAR_UID
            return COLLAR_UID;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __STARTTIME_ISSET_ID = 1;
    private static final int __ENDTIME_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COLLAR_UID, new org.apache.thrift.meta_data.FieldMetaData("collarUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarHistoricalDataByCollarUid_args.class, metaDataMap);
    }

    public queryCollarHistoricalDataByCollarUid_args() {
    }

    public queryCollarHistoricalDataByCollarUid_args(
      int requestId,
      String collarUid,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.collarUid = collarUid;
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarHistoricalDataByCollarUid_args(queryCollarHistoricalDataByCollarUid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetCollarUid()) {
        this.collarUid = other.collarUid;
      }
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public queryCollarHistoricalDataByCollarUid_args deepCopy() {
      return new queryCollarHistoricalDataByCollarUid_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.collarUid = null;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryCollarHistoricalDataByCollarUid_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public String getCollarUid() {
      return this.collarUid;
    }

    public queryCollarHistoricalDataByCollarUid_args setCollarUid(String collarUid) {
      this.collarUid = collarUid;
      return this;
    }

    public void unsetCollarUid() {
      this.collarUid = null;
    }

    /** Returns true if field collarUid is set (has been assigned a value) and false otherwise */
    public boolean isSetCollarUid() {
      return this.collarUid != null;
    }

    public void setCollarUidIsSet(boolean value) {
      if (!value) {
        this.collarUid = null;
      }
    }

    public long getStartTime() {
      return this.startTime;
    }

    public queryCollarHistoricalDataByCollarUid_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public queryCollarHistoricalDataByCollarUid_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case COLLAR_UID:
        if (value == null) {
          unsetCollarUid();
        } else {
          setCollarUid((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case COLLAR_UID:
        return getCollarUid();

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case COLLAR_UID:
        return isSetCollarUid();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarHistoricalDataByCollarUid_args)
        return this.equals((queryCollarHistoricalDataByCollarUid_args)that);
      return false;
    }

    public boolean equals(queryCollarHistoricalDataByCollarUid_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_collarUid = true && this.isSetCollarUid();
      boolean that_present_collarUid = true && that.isSetCollarUid();
      if (this_present_collarUid || that_present_collarUid) {
        if (!(this_present_collarUid && that_present_collarUid))
          return false;
        if (!this.collarUid.equals(that.collarUid))
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_collarUid = true && (isSetCollarUid());
      list.add(present_collarUid);
      if (present_collarUid)
        list.add(collarUid);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarHistoricalDataByCollarUid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCollarUid()).compareTo(other.isSetCollarUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCollarUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collarUid, other.collarUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarHistoricalDataByCollarUid_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("collarUid:");
      if (this.collarUid == null) {
        sb.append("null");
      } else {
        sb.append(this.collarUid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarHistoricalDataByCollarUid_argsStandardSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataByCollarUid_argsStandardScheme getScheme() {
        return new queryCollarHistoricalDataByCollarUid_argsStandardScheme();
      }
    }

    private static class queryCollarHistoricalDataByCollarUid_argsStandardScheme extends StandardScheme<queryCollarHistoricalDataByCollarUid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarHistoricalDataByCollarUid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLLAR_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.collarUid = iprot.readString();
                struct.setCollarUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarHistoricalDataByCollarUid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.collarUid != null) {
          oprot.writeFieldBegin(COLLAR_UID_FIELD_DESC);
          oprot.writeString(struct.collarUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarHistoricalDataByCollarUid_argsTupleSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataByCollarUid_argsTupleScheme getScheme() {
        return new queryCollarHistoricalDataByCollarUid_argsTupleScheme();
      }
    }

    private static class queryCollarHistoricalDataByCollarUid_argsTupleScheme extends TupleScheme<queryCollarHistoricalDataByCollarUid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataByCollarUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetCollarUid()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetCollarUid()) {
          oprot.writeString(struct.collarUid);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataByCollarUid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.collarUid = iprot.readString();
          struct.setCollarUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class queryCollarHistoricalDataByCollarUid_result implements org.apache.thrift.TBase<queryCollarHistoricalDataByCollarUid_result, queryCollarHistoricalDataByCollarUid_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCollarHistoricalDataByCollarUid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCollarHistoricalDataByCollarUid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCollarHistoricalDataByCollarUid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCollarHistoricalDataByCollarUid_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.CollarData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.CollarData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCollarHistoricalDataByCollarUid_result.class, metaDataMap);
    }

    public queryCollarHistoricalDataByCollarUid_result() {
    }

    public queryCollarHistoricalDataByCollarUid_result(
      List<com.afarcloud.thrift.CollarData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCollarHistoricalDataByCollarUid_result(queryCollarHistoricalDataByCollarUid_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.CollarData> __this__success = new ArrayList<com.afarcloud.thrift.CollarData>(other.success.size());
        for (com.afarcloud.thrift.CollarData other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.CollarData(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryCollarHistoricalDataByCollarUid_result deepCopy() {
      return new queryCollarHistoricalDataByCollarUid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.CollarData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.CollarData elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.CollarData>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.CollarData> getSuccess() {
      return this.success;
    }

    public queryCollarHistoricalDataByCollarUid_result setSuccess(List<com.afarcloud.thrift.CollarData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.CollarData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCollarHistoricalDataByCollarUid_result)
        return this.equals((queryCollarHistoricalDataByCollarUid_result)that);
      return false;
    }

    public boolean equals(queryCollarHistoricalDataByCollarUid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCollarHistoricalDataByCollarUid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCollarHistoricalDataByCollarUid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCollarHistoricalDataByCollarUid_resultStandardSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataByCollarUid_resultStandardScheme getScheme() {
        return new queryCollarHistoricalDataByCollarUid_resultStandardScheme();
      }
    }

    private static class queryCollarHistoricalDataByCollarUid_resultStandardScheme extends StandardScheme<queryCollarHistoricalDataByCollarUid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCollarHistoricalDataByCollarUid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list216.size);
                  com.afarcloud.thrift.CollarData _elem217;
                  for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                  {
                    _elem217 = new com.afarcloud.thrift.CollarData();
                    _elem217.read(iprot);
                    struct.success.add(_elem217);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCollarHistoricalDataByCollarUid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.CollarData _iter219 : struct.success)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCollarHistoricalDataByCollarUid_resultTupleSchemeFactory implements SchemeFactory {
      public queryCollarHistoricalDataByCollarUid_resultTupleScheme getScheme() {
        return new queryCollarHistoricalDataByCollarUid_resultTupleScheme();
      }
    }

    private static class queryCollarHistoricalDataByCollarUid_resultTupleScheme extends TupleScheme<queryCollarHistoricalDataByCollarUid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataByCollarUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.CollarData _iter220 : struct.success)
            {
              _iter220.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCollarHistoricalDataByCollarUid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.CollarData>(_list221.size);
            com.afarcloud.thrift.CollarData _elem222;
            for (int _i223 = 0; _i223 < _list221.size; ++_i223)
            {
              _elem222 = new com.afarcloud.thrift.CollarData();
              _elem222.read(iprot);
              struct.success.add(_elem222);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleHistoricalStateVectorsPF_args implements org.apache.thrift.TBase<queryVehicleHistoricalStateVectorsPF_args, queryVehicleHistoricalStateVectorsPF_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleHistoricalStateVectorsPF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleHistoricalStateVectorsPF_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PARTFIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partfieldId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleHistoricalStateVectorsPF_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleHistoricalStateVectorsPF_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int partfieldId; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      PARTFIELD_ID((short)2, "partfieldId"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // PARTFIELD_ID
            return PARTFIELD_ID;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __PARTFIELDID_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARTFIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("partfieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleHistoricalStateVectorsPF_args.class, metaDataMap);
    }

    public queryVehicleHistoricalStateVectorsPF_args() {
    }

    public queryVehicleHistoricalStateVectorsPF_args(
      int requestId,
      int partfieldId,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleHistoricalStateVectorsPF_args(queryVehicleHistoricalStateVectorsPF_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.partfieldId = other.partfieldId;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public queryVehicleHistoricalStateVectorsPF_args deepCopy() {
      return new queryVehicleHistoricalStateVectorsPF_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setPartfieldIdIsSet(false);
      this.partfieldId = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryVehicleHistoricalStateVectorsPF_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getPartfieldId() {
      return this.partfieldId;
    }

    public queryVehicleHistoricalStateVectorsPF_args setPartfieldId(int partfieldId) {
      this.partfieldId = partfieldId;
      setPartfieldIdIsSet(true);
      return this;
    }

    public void unsetPartfieldId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    /** Returns true if field partfieldId is set (has been assigned a value) and false otherwise */
    public boolean isSetPartfieldId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
    }

    public void setPartfieldIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTFIELDID_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public queryVehicleHistoricalStateVectorsPF_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public queryVehicleHistoricalStateVectorsPF_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case PARTFIELD_ID:
        if (value == null) {
          unsetPartfieldId();
        } else {
          setPartfieldId((Integer)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case PARTFIELD_ID:
        return Integer.valueOf(getPartfieldId());

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case PARTFIELD_ID:
        return isSetPartfieldId();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleHistoricalStateVectorsPF_args)
        return this.equals((queryVehicleHistoricalStateVectorsPF_args)that);
      return false;
    }

    public boolean equals(queryVehicleHistoricalStateVectorsPF_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_partfieldId = true;
      boolean that_present_partfieldId = true;
      if (this_present_partfieldId || that_present_partfieldId) {
        if (!(this_present_partfieldId && that_present_partfieldId))
          return false;
        if (this.partfieldId != that.partfieldId)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_partfieldId = true;
      list.add(present_partfieldId);
      if (present_partfieldId)
        list.add(partfieldId);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleHistoricalStateVectorsPF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartfieldId()).compareTo(other.isSetPartfieldId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartfieldId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partfieldId, other.partfieldId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleHistoricalStateVectorsPF_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("partfieldId:");
      sb.append(this.partfieldId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleHistoricalStateVectorsPF_argsStandardSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorsPF_argsStandardScheme getScheme() {
        return new queryVehicleHistoricalStateVectorsPF_argsStandardScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorsPF_argsStandardScheme extends StandardScheme<queryVehicleHistoricalStateVectorsPF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleHistoricalStateVectorsPF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTFIELD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partfieldId = iprot.readI32();
                struct.setPartfieldIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleHistoricalStateVectorsPF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARTFIELD_ID_FIELD_DESC);
        oprot.writeI32(struct.partfieldId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleHistoricalStateVectorsPF_argsTupleSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorsPF_argsTupleScheme getScheme() {
        return new queryVehicleHistoricalStateVectorsPF_argsTupleScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorsPF_argsTupleScheme extends TupleScheme<queryVehicleHistoricalStateVectorsPF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorsPF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetPartfieldId()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetPartfieldId()) {
          oprot.writeI32(struct.partfieldId);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorsPF_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partfieldId = iprot.readI32();
          struct.setPartfieldIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleHistoricalStateVectorsPF_result implements org.apache.thrift.TBase<queryVehicleHistoricalStateVectorsPF_result, queryVehicleHistoricalStateVectorsPF_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleHistoricalStateVectorsPF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleHistoricalStateVectorsPF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleHistoricalStateVectorsPF_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleHistoricalStateVectorsPF_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.StateVector> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.StateVector.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleHistoricalStateVectorsPF_result.class, metaDataMap);
    }

    public queryVehicleHistoricalStateVectorsPF_result() {
    }

    public queryVehicleHistoricalStateVectorsPF_result(
      List<com.afarcloud.thrift.StateVector> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleHistoricalStateVectorsPF_result(queryVehicleHistoricalStateVectorsPF_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.StateVector> __this__success = new ArrayList<com.afarcloud.thrift.StateVector>(other.success.size());
        for (com.afarcloud.thrift.StateVector other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.StateVector(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryVehicleHistoricalStateVectorsPF_result deepCopy() {
      return new queryVehicleHistoricalStateVectorsPF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.StateVector> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.StateVector elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.StateVector>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.StateVector> getSuccess() {
      return this.success;
    }

    public queryVehicleHistoricalStateVectorsPF_result setSuccess(List<com.afarcloud.thrift.StateVector> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.StateVector>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleHistoricalStateVectorsPF_result)
        return this.equals((queryVehicleHistoricalStateVectorsPF_result)that);
      return false;
    }

    public boolean equals(queryVehicleHistoricalStateVectorsPF_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleHistoricalStateVectorsPF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleHistoricalStateVectorsPF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleHistoricalStateVectorsPF_resultStandardSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorsPF_resultStandardScheme getScheme() {
        return new queryVehicleHistoricalStateVectorsPF_resultStandardScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorsPF_resultStandardScheme extends StandardScheme<queryVehicleHistoricalStateVectorsPF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleHistoricalStateVectorsPF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list224 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list224.size);
                  com.afarcloud.thrift.StateVector _elem225;
                  for (int _i226 = 0; _i226 < _list224.size; ++_i226)
                  {
                    _elem225 = new com.afarcloud.thrift.StateVector();
                    _elem225.read(iprot);
                    struct.success.add(_elem225);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleHistoricalStateVectorsPF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.StateVector _iter227 : struct.success)
            {
              _iter227.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleHistoricalStateVectorsPF_resultTupleSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorsPF_resultTupleScheme getScheme() {
        return new queryVehicleHistoricalStateVectorsPF_resultTupleScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorsPF_resultTupleScheme extends TupleScheme<queryVehicleHistoricalStateVectorsPF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorsPF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.StateVector _iter228 : struct.success)
            {
              _iter228.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorsPF_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list229.size);
            com.afarcloud.thrift.StateVector _elem230;
            for (int _i231 = 0; _i231 < _list229.size; ++_i231)
            {
              _elem230 = new com.afarcloud.thrift.StateVector();
              _elem230.read(iprot);
              struct.success.add(_elem230);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleHistoricalStateVectorsC_args implements org.apache.thrift.TBase<queryVehicleHistoricalStateVectorsC_args, queryVehicleHistoricalStateVectorsC_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleHistoricalStateVectorsC_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleHistoricalStateVectorsC_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REGION_CENTRE_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCentre", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("radius", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleHistoricalStateVectorsC_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleHistoricalStateVectorsC_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public com.afarcloud.thrift.Position regionCentre; // required
    public int radius; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      REGION_CENTRE((short)2, "regionCentre"),
      RADIUS((short)3, "radius"),
      START_TIME((short)4, "startTime"),
      END_TIME((short)5, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // REGION_CENTRE
            return REGION_CENTRE;
          case 3: // RADIUS
            return RADIUS;
          case 4: // START_TIME
            return START_TIME;
          case 5: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __RADIUS_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REGION_CENTRE, new org.apache.thrift.meta_data.FieldMetaData("regionCentre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.Position.class)));
      tmpMap.put(_Fields.RADIUS, new org.apache.thrift.meta_data.FieldMetaData("radius", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleHistoricalStateVectorsC_args.class, metaDataMap);
    }

    public queryVehicleHistoricalStateVectorsC_args() {
    }

    public queryVehicleHistoricalStateVectorsC_args(
      int requestId,
      com.afarcloud.thrift.Position regionCentre,
      int radius,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.regionCentre = regionCentre;
      this.radius = radius;
      setRadiusIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleHistoricalStateVectorsC_args(queryVehicleHistoricalStateVectorsC_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      if (other.isSetRegionCentre()) {
        this.regionCentre = new com.afarcloud.thrift.Position(other.regionCentre);
      }
      this.radius = other.radius;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public queryVehicleHistoricalStateVectorsC_args deepCopy() {
      return new queryVehicleHistoricalStateVectorsC_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      this.regionCentre = null;
      setRadiusIsSet(false);
      this.radius = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryVehicleHistoricalStateVectorsC_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public com.afarcloud.thrift.Position getRegionCentre() {
      return this.regionCentre;
    }

    public queryVehicleHistoricalStateVectorsC_args setRegionCentre(com.afarcloud.thrift.Position regionCentre) {
      this.regionCentre = regionCentre;
      return this;
    }

    public void unsetRegionCentre() {
      this.regionCentre = null;
    }

    /** Returns true if field regionCentre is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionCentre() {
      return this.regionCentre != null;
    }

    public void setRegionCentreIsSet(boolean value) {
      if (!value) {
        this.regionCentre = null;
      }
    }

    public int getRadius() {
      return this.radius;
    }

    public queryVehicleHistoricalStateVectorsC_args setRadius(int radius) {
      this.radius = radius;
      setRadiusIsSet(true);
      return this;
    }

    public void unsetRadius() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    /** Returns true if field radius is set (has been assigned a value) and false otherwise */
    public boolean isSetRadius() {
      return EncodingUtils.testBit(__isset_bitfield, __RADIUS_ISSET_ID);
    }

    public void setRadiusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public queryVehicleHistoricalStateVectorsC_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public queryVehicleHistoricalStateVectorsC_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case REGION_CENTRE:
        if (value == null) {
          unsetRegionCentre();
        } else {
          setRegionCentre((com.afarcloud.thrift.Position)value);
        }
        break;

      case RADIUS:
        if (value == null) {
          unsetRadius();
        } else {
          setRadius((Integer)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case REGION_CENTRE:
        return getRegionCentre();

      case RADIUS:
        return Integer.valueOf(getRadius());

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case REGION_CENTRE:
        return isSetRegionCentre();
      case RADIUS:
        return isSetRadius();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleHistoricalStateVectorsC_args)
        return this.equals((queryVehicleHistoricalStateVectorsC_args)that);
      return false;
    }

    public boolean equals(queryVehicleHistoricalStateVectorsC_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_regionCentre = true && this.isSetRegionCentre();
      boolean that_present_regionCentre = true && that.isSetRegionCentre();
      if (this_present_regionCentre || that_present_regionCentre) {
        if (!(this_present_regionCentre && that_present_regionCentre))
          return false;
        if (!this.regionCentre.equals(that.regionCentre))
          return false;
      }

      boolean this_present_radius = true;
      boolean that_present_radius = true;
      if (this_present_radius || that_present_radius) {
        if (!(this_present_radius && that_present_radius))
          return false;
        if (this.radius != that.radius)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_regionCentre = true && (isSetRegionCentre());
      list.add(present_regionCentre);
      if (present_regionCentre)
        list.add(regionCentre);

      boolean present_radius = true;
      list.add(present_radius);
      if (present_radius)
        list.add(radius);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleHistoricalStateVectorsC_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegionCentre()).compareTo(other.isSetRegionCentre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionCentre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCentre, other.regionCentre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRadius()).compareTo(other.isSetRadius());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRadius()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius, other.radius);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleHistoricalStateVectorsC_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionCentre:");
      if (this.regionCentre == null) {
        sb.append("null");
      } else {
        sb.append(this.regionCentre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("radius:");
      sb.append(this.radius);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (regionCentre != null) {
        regionCentre.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleHistoricalStateVectorsC_argsStandardSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorsC_argsStandardScheme getScheme() {
        return new queryVehicleHistoricalStateVectorsC_argsStandardScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorsC_argsStandardScheme extends StandardScheme<queryVehicleHistoricalStateVectorsC_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleHistoricalStateVectorsC_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGION_CENTRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.regionCentre = new com.afarcloud.thrift.Position();
                struct.regionCentre.read(iprot);
                struct.setRegionCentreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RADIUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.radius = iprot.readI32();
                struct.setRadiusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleHistoricalStateVectorsC_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.regionCentre != null) {
          oprot.writeFieldBegin(REGION_CENTRE_FIELD_DESC);
          struct.regionCentre.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RADIUS_FIELD_DESC);
        oprot.writeI32(struct.radius);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleHistoricalStateVectorsC_argsTupleSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorsC_argsTupleScheme getScheme() {
        return new queryVehicleHistoricalStateVectorsC_argsTupleScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorsC_argsTupleScheme extends TupleScheme<queryVehicleHistoricalStateVectorsC_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorsC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetRegionCentre()) {
          optionals.set(1);
        }
        if (struct.isSetRadius()) {
          optionals.set(2);
        }
        if (struct.isSetStartTime()) {
          optionals.set(3);
        }
        if (struct.isSetEndTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetRegionCentre()) {
          struct.regionCentre.write(oprot);
        }
        if (struct.isSetRadius()) {
          oprot.writeI32(struct.radius);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorsC_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.regionCentre = new com.afarcloud.thrift.Position();
          struct.regionCentre.read(iprot);
          struct.setRegionCentreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.radius = iprot.readI32();
          struct.setRadiusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleHistoricalStateVectorsC_result implements org.apache.thrift.TBase<queryVehicleHistoricalStateVectorsC_result, queryVehicleHistoricalStateVectorsC_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleHistoricalStateVectorsC_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleHistoricalStateVectorsC_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleHistoricalStateVectorsC_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleHistoricalStateVectorsC_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.StateVector> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.StateVector.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleHistoricalStateVectorsC_result.class, metaDataMap);
    }

    public queryVehicleHistoricalStateVectorsC_result() {
    }

    public queryVehicleHistoricalStateVectorsC_result(
      List<com.afarcloud.thrift.StateVector> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleHistoricalStateVectorsC_result(queryVehicleHistoricalStateVectorsC_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.StateVector> __this__success = new ArrayList<com.afarcloud.thrift.StateVector>(other.success.size());
        for (com.afarcloud.thrift.StateVector other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.StateVector(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryVehicleHistoricalStateVectorsC_result deepCopy() {
      return new queryVehicleHistoricalStateVectorsC_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.StateVector> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.StateVector elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.StateVector>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.StateVector> getSuccess() {
      return this.success;
    }

    public queryVehicleHistoricalStateVectorsC_result setSuccess(List<com.afarcloud.thrift.StateVector> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.StateVector>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleHistoricalStateVectorsC_result)
        return this.equals((queryVehicleHistoricalStateVectorsC_result)that);
      return false;
    }

    public boolean equals(queryVehicleHistoricalStateVectorsC_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleHistoricalStateVectorsC_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleHistoricalStateVectorsC_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleHistoricalStateVectorsC_resultStandardSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorsC_resultStandardScheme getScheme() {
        return new queryVehicleHistoricalStateVectorsC_resultStandardScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorsC_resultStandardScheme extends StandardScheme<queryVehicleHistoricalStateVectorsC_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleHistoricalStateVectorsC_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list232.size);
                  com.afarcloud.thrift.StateVector _elem233;
                  for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                  {
                    _elem233 = new com.afarcloud.thrift.StateVector();
                    _elem233.read(iprot);
                    struct.success.add(_elem233);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleHistoricalStateVectorsC_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.StateVector _iter235 : struct.success)
            {
              _iter235.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleHistoricalStateVectorsC_resultTupleSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorsC_resultTupleScheme getScheme() {
        return new queryVehicleHistoricalStateVectorsC_resultTupleScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorsC_resultTupleScheme extends TupleScheme<queryVehicleHistoricalStateVectorsC_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorsC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.StateVector _iter236 : struct.success)
            {
              _iter236.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorsC_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list237.size);
            com.afarcloud.thrift.StateVector _elem238;
            for (int _i239 = 0; _i239 < _list237.size; ++_i239)
            {
              _elem238 = new com.afarcloud.thrift.StateVector();
              _elem238.read(iprot);
              struct.success.add(_elem238);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleHistoricalStateVectorByVehicleId_args implements org.apache.thrift.TBase<queryVehicleHistoricalStateVectorByVehicleId_args, queryVehicleHistoricalStateVectorByVehicleId_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleHistoricalStateVectorByVehicleId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleHistoricalStateVectorByVehicleId_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VEHICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleHistoricalStateVectorByVehicleId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleHistoricalStateVectorByVehicleId_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int vehicleId; // required
    public long startTime; // required
    public long endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      VEHICLE_ID((short)2, "vehicleId"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // VEHICLE_ID
            return VEHICLE_ID;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __VEHICLEID_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VEHICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("vehicleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleHistoricalStateVectorByVehicleId_args.class, metaDataMap);
    }

    public queryVehicleHistoricalStateVectorByVehicleId_args() {
    }

    public queryVehicleHistoricalStateVectorByVehicleId_args(
      int requestId,
      int vehicleId,
      long startTime,
      long endTime)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleHistoricalStateVectorByVehicleId_args(queryVehicleHistoricalStateVectorByVehicleId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.vehicleId = other.vehicleId;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
    }

    public queryVehicleHistoricalStateVectorByVehicleId_args deepCopy() {
      return new queryVehicleHistoricalStateVectorByVehicleId_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setVehicleIdIsSet(false);
      this.vehicleId = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public queryVehicleHistoricalStateVectorByVehicleId_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getVehicleId() {
      return this.vehicleId;
    }

    public queryVehicleHistoricalStateVectorByVehicleId_args setVehicleId(int vehicleId) {
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      return this;
    }

    public void unsetVehicleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    /** Returns true if field vehicleId is set (has been assigned a value) and false otherwise */
    public boolean isSetVehicleId() {
      return EncodingUtils.testBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    public void setVehicleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLEID_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public queryVehicleHistoricalStateVectorByVehicleId_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public queryVehicleHistoricalStateVectorByVehicleId_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case VEHICLE_ID:
        if (value == null) {
          unsetVehicleId();
        } else {
          setVehicleId((Integer)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case VEHICLE_ID:
        return Integer.valueOf(getVehicleId());

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case VEHICLE_ID:
        return isSetVehicleId();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleHistoricalStateVectorByVehicleId_args)
        return this.equals((queryVehicleHistoricalStateVectorByVehicleId_args)that);
      return false;
    }

    public boolean equals(queryVehicleHistoricalStateVectorByVehicleId_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_vehicleId = true;
      boolean that_present_vehicleId = true;
      if (this_present_vehicleId || that_present_vehicleId) {
        if (!(this_present_vehicleId && that_present_vehicleId))
          return false;
        if (this.vehicleId != that.vehicleId)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_vehicleId = true;
      list.add(present_vehicleId);
      if (present_vehicleId)
        list.add(vehicleId);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleHistoricalStateVectorByVehicleId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVehicleId()).compareTo(other.isSetVehicleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVehicleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleId, other.vehicleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleHistoricalStateVectorByVehicleId_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vehicleId:");
      sb.append(this.vehicleId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_argsStandardSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorByVehicleId_argsStandardScheme getScheme() {
        return new queryVehicleHistoricalStateVectorByVehicleId_argsStandardScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_argsStandardScheme extends StandardScheme<queryVehicleHistoricalStateVectorByVehicleId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleHistoricalStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VEHICLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vehicleId = iprot.readI32();
                struct.setVehicleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleHistoricalStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VEHICLE_ID_FIELD_DESC);
        oprot.writeI32(struct.vehicleId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_argsTupleSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorByVehicleId_argsTupleScheme getScheme() {
        return new queryVehicleHistoricalStateVectorByVehicleId_argsTupleScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_argsTupleScheme extends TupleScheme<queryVehicleHistoricalStateVectorByVehicleId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetVehicleId()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetVehicleId()) {
          oprot.writeI32(struct.vehicleId);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorByVehicleId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vehicleId = iprot.readI32();
          struct.setVehicleIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class queryVehicleHistoricalStateVectorByVehicleId_result implements org.apache.thrift.TBase<queryVehicleHistoricalStateVectorByVehicleId_result, queryVehicleHistoricalStateVectorByVehicleId_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryVehicleHistoricalStateVectorByVehicleId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVehicleHistoricalStateVectorByVehicleId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVehicleHistoricalStateVectorByVehicleId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVehicleHistoricalStateVectorByVehicleId_resultTupleSchemeFactory());
    }

    public List<com.afarcloud.thrift.StateVector> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.afarcloud.thrift.StateVector.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVehicleHistoricalStateVectorByVehicleId_result.class, metaDataMap);
    }

    public queryVehicleHistoricalStateVectorByVehicleId_result() {
    }

    public queryVehicleHistoricalStateVectorByVehicleId_result(
      List<com.afarcloud.thrift.StateVector> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVehicleHistoricalStateVectorByVehicleId_result(queryVehicleHistoricalStateVectorByVehicleId_result other) {
      if (other.isSetSuccess()) {
        List<com.afarcloud.thrift.StateVector> __this__success = new ArrayList<com.afarcloud.thrift.StateVector>(other.success.size());
        for (com.afarcloud.thrift.StateVector other_element : other.success) {
          __this__success.add(new com.afarcloud.thrift.StateVector(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryVehicleHistoricalStateVectorByVehicleId_result deepCopy() {
      return new queryVehicleHistoricalStateVectorByVehicleId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.afarcloud.thrift.StateVector> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.afarcloud.thrift.StateVector elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.afarcloud.thrift.StateVector>();
      }
      this.success.add(elem);
    }

    public List<com.afarcloud.thrift.StateVector> getSuccess() {
      return this.success;
    }

    public queryVehicleHistoricalStateVectorByVehicleId_result setSuccess(List<com.afarcloud.thrift.StateVector> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.afarcloud.thrift.StateVector>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVehicleHistoricalStateVectorByVehicleId_result)
        return this.equals((queryVehicleHistoricalStateVectorByVehicleId_result)that);
      return false;
    }

    public boolean equals(queryVehicleHistoricalStateVectorByVehicleId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVehicleHistoricalStateVectorByVehicleId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVehicleHistoricalStateVectorByVehicleId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_resultStandardSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorByVehicleId_resultStandardScheme getScheme() {
        return new queryVehicleHistoricalStateVectorByVehicleId_resultStandardScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_resultStandardScheme extends StandardScheme<queryVehicleHistoricalStateVectorByVehicleId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVehicleHistoricalStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list240 = iprot.readListBegin();
                  struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list240.size);
                  com.afarcloud.thrift.StateVector _elem241;
                  for (int _i242 = 0; _i242 < _list240.size; ++_i242)
                  {
                    _elem241 = new com.afarcloud.thrift.StateVector();
                    _elem241.read(iprot);
                    struct.success.add(_elem241);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVehicleHistoricalStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.afarcloud.thrift.StateVector _iter243 : struct.success)
            {
              _iter243.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_resultTupleSchemeFactory implements SchemeFactory {
      public queryVehicleHistoricalStateVectorByVehicleId_resultTupleScheme getScheme() {
        return new queryVehicleHistoricalStateVectorByVehicleId_resultTupleScheme();
      }
    }

    private static class queryVehicleHistoricalStateVectorByVehicleId_resultTupleScheme extends TupleScheme<queryVehicleHistoricalStateVectorByVehicleId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.afarcloud.thrift.StateVector _iter244 : struct.success)
            {
              _iter244.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVehicleHistoricalStateVectorByVehicleId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list245 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.afarcloud.thrift.StateVector>(_list245.size);
            com.afarcloud.thrift.StateVector _elem246;
            for (int _i247 = 0; _i247 < _list245.size; ++_i247)
            {
              _elem246 = new com.afarcloud.thrift.StateVector();
              _elem246.read(iprot);
              struct.success.add(_elem246);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class storeEvent_args implements org.apache.thrift.TBase<storeEvent_args, storeEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeEvent_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VEHICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SUBTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("subtype", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TIME_REFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeReference", org.apache.thrift.protocol.TType.I64, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeEvent_argsTupleSchemeFactory());
    }

    public int requestId; // required
    public int missionId; // required
    public int vehicleId; // required
    public int subtype; // required
    public String description; // required
    public long timeReference; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      MISSION_ID((short)2, "missionId"),
      VEHICLE_ID((short)3, "vehicleId"),
      SUBTYPE((short)4, "subtype"),
      DESCRIPTION((short)5, "description"),
      TIME_REFERENCE((short)6, "timeReference");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 2: // MISSION_ID
            return MISSION_ID;
          case 3: // VEHICLE_ID
            return VEHICLE_ID;
          case 4: // SUBTYPE
            return SUBTYPE;
          case 5: // DESCRIPTION
            return DESCRIPTION;
          case 6: // TIME_REFERENCE
            return TIME_REFERENCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __MISSIONID_ISSET_ID = 1;
    private static final int __VEHICLEID_ISSET_ID = 2;
    private static final int __SUBTYPE_ISSET_ID = 3;
    private static final int __TIMEREFERENCE_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VEHICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("vehicleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SUBTYPE, new org.apache.thrift.meta_data.FieldMetaData("subtype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME_REFERENCE, new org.apache.thrift.meta_data.FieldMetaData("timeReference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeEvent_args.class, metaDataMap);
    }

    public storeEvent_args() {
    }

    public storeEvent_args(
      int requestId,
      int missionId,
      int vehicleId,
      int subtype,
      String description,
      long timeReference)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.missionId = missionId;
      setMissionIdIsSet(true);
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      this.subtype = subtype;
      setSubtypeIsSet(true);
      this.description = description;
      this.timeReference = timeReference;
      setTimeReferenceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeEvent_args(storeEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.missionId = other.missionId;
      this.vehicleId = other.vehicleId;
      this.subtype = other.subtype;
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      this.timeReference = other.timeReference;
    }

    public storeEvent_args deepCopy() {
      return new storeEvent_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setMissionIdIsSet(false);
      this.missionId = 0;
      setVehicleIdIsSet(false);
      this.vehicleId = 0;
      setSubtypeIsSet(false);
      this.subtype = 0;
      this.description = null;
      setTimeReferenceIsSet(false);
      this.timeReference = 0;
    }

    public int getRequestId() {
      return this.requestId;
    }

    public storeEvent_args setRequestId(int requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public int getMissionId() {
      return this.missionId;
    }

    public storeEvent_args setMissionId(int missionId) {
      this.missionId = missionId;
      setMissionIdIsSet(true);
      return this;
    }

    public void unsetMissionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return EncodingUtils.testBit(__isset_bitfield, __MISSIONID_ISSET_ID);
    }

    public void setMissionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MISSIONID_ISSET_ID, value);
    }

    public int getVehicleId() {
      return this.vehicleId;
    }

    public storeEvent_args setVehicleId(int vehicleId) {
      this.vehicleId = vehicleId;
      setVehicleIdIsSet(true);
      return this;
    }

    public void unsetVehicleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    /** Returns true if field vehicleId is set (has been assigned a value) and false otherwise */
    public boolean isSetVehicleId() {
      return EncodingUtils.testBit(__isset_bitfield, __VEHICLEID_ISSET_ID);
    }

    public void setVehicleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VEHICLEID_ISSET_ID, value);
    }

    public int getSubtype() {
      return this.subtype;
    }

    public storeEvent_args setSubtype(int subtype) {
      this.subtype = subtype;
      setSubtypeIsSet(true);
      return this;
    }

    public void unsetSubtype() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTYPE_ISSET_ID);
    }

    /** Returns true if field subtype is set (has been assigned a value) and false otherwise */
    public boolean isSetSubtype() {
      return EncodingUtils.testBit(__isset_bitfield, __SUBTYPE_ISSET_ID);
    }

    public void setSubtypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTYPE_ISSET_ID, value);
    }

    public String getDescription() {
      return this.description;
    }

    public storeEvent_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public long getTimeReference() {
      return this.timeReference;
    }

    public storeEvent_args setTimeReference(long timeReference) {
      this.timeReference = timeReference;
      setTimeReferenceIsSet(true);
      return this;
    }

    public void unsetTimeReference() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEREFERENCE_ISSET_ID);
    }

    /** Returns true if field timeReference is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeReference() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEREFERENCE_ISSET_ID);
    }

    public void setTimeReferenceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEREFERENCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Integer)value);
        }
        break;

      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((Integer)value);
        }
        break;

      case VEHICLE_ID:
        if (value == null) {
          unsetVehicleId();
        } else {
          setVehicleId((Integer)value);
        }
        break;

      case SUBTYPE:
        if (value == null) {
          unsetSubtype();
        } else {
          setSubtype((Integer)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      case TIME_REFERENCE:
        if (value == null) {
          unsetTimeReference();
        } else {
          setTimeReference((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Integer.valueOf(getRequestId());

      case MISSION_ID:
        return Integer.valueOf(getMissionId());

      case VEHICLE_ID:
        return Integer.valueOf(getVehicleId());

      case SUBTYPE:
        return Integer.valueOf(getSubtype());

      case DESCRIPTION:
        return getDescription();

      case TIME_REFERENCE:
        return Long.valueOf(getTimeReference());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case MISSION_ID:
        return isSetMissionId();
      case VEHICLE_ID:
        return isSetVehicleId();
      case SUBTYPE:
        return isSetSubtype();
      case DESCRIPTION:
        return isSetDescription();
      case TIME_REFERENCE:
        return isSetTimeReference();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeEvent_args)
        return this.equals((storeEvent_args)that);
      return false;
    }

    public boolean equals(storeEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_missionId = true;
      boolean that_present_missionId = true;
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (this.missionId != that.missionId)
          return false;
      }

      boolean this_present_vehicleId = true;
      boolean that_present_vehicleId = true;
      if (this_present_vehicleId || that_present_vehicleId) {
        if (!(this_present_vehicleId && that_present_vehicleId))
          return false;
        if (this.vehicleId != that.vehicleId)
          return false;
      }

      boolean this_present_subtype = true;
      boolean that_present_subtype = true;
      if (this_present_subtype || that_present_subtype) {
        if (!(this_present_subtype && that_present_subtype))
          return false;
        if (this.subtype != that.subtype)
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_timeReference = true;
      boolean that_present_timeReference = true;
      if (this_present_timeReference || that_present_timeReference) {
        if (!(this_present_timeReference && that_present_timeReference))
          return false;
        if (this.timeReference != that.timeReference)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestId = true;
      list.add(present_requestId);
      if (present_requestId)
        list.add(requestId);

      boolean present_missionId = true;
      list.add(present_missionId);
      if (present_missionId)
        list.add(missionId);

      boolean present_vehicleId = true;
      list.add(present_vehicleId);
      if (present_vehicleId)
        list.add(vehicleId);

      boolean present_subtype = true;
      list.add(present_subtype);
      if (present_subtype)
        list.add(subtype);

      boolean present_description = true && (isSetDescription());
      list.add(present_description);
      if (present_description)
        list.add(description);

      boolean present_timeReference = true;
      list.add(present_timeReference);
      if (present_timeReference)
        list.add(timeReference);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVehicleId()).compareTo(other.isSetVehicleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVehicleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleId, other.vehicleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubtype()).compareTo(other.isSetSubtype());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubtype()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subtype, other.subtype);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeReference()).compareTo(other.isSetTimeReference());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeReference()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeReference, other.timeReference);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeEvent_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("missionId:");
      sb.append(this.missionId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vehicleId:");
      sb.append(this.vehicleId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("subtype:");
      sb.append(this.subtype);
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeReference:");
      sb.append(this.timeReference);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storeEvent_argsStandardScheme getScheme() {
        return new storeEvent_argsStandardScheme();
      }
    }

    private static class storeEvent_argsStandardScheme extends StandardScheme<storeEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestId = iprot.readI32();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.missionId = iprot.readI32();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VEHICLE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vehicleId = iprot.readI32();
                struct.setVehicleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SUBTYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.subtype = iprot.readI32();
                struct.setSubtypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TIME_REFERENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timeReference = iprot.readI64();
                struct.setTimeReferenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
        oprot.writeI32(struct.missionId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VEHICLE_ID_FIELD_DESC);
        oprot.writeI32(struct.vehicleId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SUBTYPE_FIELD_DESC);
        oprot.writeI32(struct.subtype);
        oprot.writeFieldEnd();
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_REFERENCE_FIELD_DESC);
        oprot.writeI64(struct.timeReference);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storeEvent_argsTupleScheme getScheme() {
        return new storeEvent_argsTupleScheme();
      }
    }

    private static class storeEvent_argsTupleScheme extends TupleScheme<storeEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetMissionId()) {
          optionals.set(1);
        }
        if (struct.isSetVehicleId()) {
          optionals.set(2);
        }
        if (struct.isSetSubtype()) {
          optionals.set(3);
        }
        if (struct.isSetDescription()) {
          optionals.set(4);
        }
        if (struct.isSetTimeReference()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetRequestId()) {
          oprot.writeI32(struct.requestId);
        }
        if (struct.isSetMissionId()) {
          oprot.writeI32(struct.missionId);
        }
        if (struct.isSetVehicleId()) {
          oprot.writeI32(struct.vehicleId);
        }
        if (struct.isSetSubtype()) {
          oprot.writeI32(struct.subtype);
        }
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetTimeReference()) {
          oprot.writeI64(struct.timeReference);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI32();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.missionId = iprot.readI32();
          struct.setMissionIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.vehicleId = iprot.readI32();
          struct.setVehicleIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.subtype = iprot.readI32();
          struct.setSubtypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.timeReference = iprot.readI64();
          struct.setTimeReferenceIsSet(true);
        }
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
