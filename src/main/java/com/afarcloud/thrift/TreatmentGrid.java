/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.afarcloud.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2020-9-11")
public class TreatmentGrid implements org.apache.thrift.TBase<TreatmentGrid, TreatmentGrid._Fields>, java.io.Serializable, Cloneable, Comparable<TreatmentGrid> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TreatmentGrid");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARTFIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partfieldId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("numRows", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_COLS_FIELD_DESC = new org.apache.thrift.protocol.TField("numCols", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TREATMENT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("treatmentValue", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TreatmentGridStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TreatmentGridTupleSchemeFactory());
  }

  public int Id; // required
  public int partfieldId; // required
  public int taskId; // required
  public int numRows; // required
  public int numCols; // required
  public List<Double> treatmentValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "Id"),
    PARTFIELD_ID((short)2, "partfieldId"),
    TASK_ID((short)3, "taskId"),
    NUM_ROWS((short)4, "numRows"),
    NUM_COLS((short)5, "numCols"),
    TREATMENT_VALUE((short)6, "treatmentValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PARTFIELD_ID
          return PARTFIELD_ID;
        case 3: // TASK_ID
          return TASK_ID;
        case 4: // NUM_ROWS
          return NUM_ROWS;
        case 5: // NUM_COLS
          return NUM_COLS;
        case 6: // TREATMENT_VALUE
          return TREATMENT_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PARTFIELDID_ISSET_ID = 1;
  private static final int __TASKID_ISSET_ID = 2;
  private static final int __NUMROWS_ISSET_ID = 3;
  private static final int __NUMCOLS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTFIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("partfieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_ROWS, new org.apache.thrift.meta_data.FieldMetaData("numRows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_COLS, new org.apache.thrift.meta_data.FieldMetaData("numCols", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TREATMENT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("treatmentValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TreatmentGrid.class, metaDataMap);
  }

  public TreatmentGrid() {
  }

  public TreatmentGrid(
    int Id,
    int partfieldId,
    int taskId,
    int numRows,
    int numCols,
    List<Double> treatmentValue)
  {
    this();
    this.Id = Id;
    setIdIsSet(true);
    this.partfieldId = partfieldId;
    setPartfieldIdIsSet(true);
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.numRows = numRows;
    setNumRowsIsSet(true);
    this.numCols = numCols;
    setNumColsIsSet(true);
    this.treatmentValue = treatmentValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TreatmentGrid(TreatmentGrid other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Id = other.Id;
    this.partfieldId = other.partfieldId;
    this.taskId = other.taskId;
    this.numRows = other.numRows;
    this.numCols = other.numCols;
    if (other.isSetTreatmentValue()) {
      List<Double> __this__treatmentValue = new ArrayList<Double>(other.treatmentValue);
      this.treatmentValue = __this__treatmentValue;
    }
  }

  public TreatmentGrid deepCopy() {
    return new TreatmentGrid(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.Id = 0;
    setPartfieldIdIsSet(false);
    this.partfieldId = 0;
    setTaskIdIsSet(false);
    this.taskId = 0;
    setNumRowsIsSet(false);
    this.numRows = 0;
    setNumColsIsSet(false);
    this.numCols = 0;
    this.treatmentValue = null;
  }

  public int getId() {
    return this.Id;
  }

  public TreatmentGrid setId(int Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getPartfieldId() {
    return this.partfieldId;
  }

  public TreatmentGrid setPartfieldId(int partfieldId) {
    this.partfieldId = partfieldId;
    setPartfieldIdIsSet(true);
    return this;
  }

  public void unsetPartfieldId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
  }

  /** Returns true if field partfieldId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartfieldId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTFIELDID_ISSET_ID);
  }

  public void setPartfieldIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTFIELDID_ISSET_ID, value);
  }

  public int getTaskId() {
    return this.taskId;
  }

  public TreatmentGrid setTaskId(int taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public int getNumRows() {
    return this.numRows;
  }

  public TreatmentGrid setNumRows(int numRows) {
    this.numRows = numRows;
    setNumRowsIsSet(true);
    return this;
  }

  public void unsetNumRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMROWS_ISSET_ID);
  }

  /** Returns true if field numRows is set (has been assigned a value) and false otherwise */
  public boolean isSetNumRows() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMROWS_ISSET_ID);
  }

  public void setNumRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMROWS_ISSET_ID, value);
  }

  public int getNumCols() {
    return this.numCols;
  }

  public TreatmentGrid setNumCols(int numCols) {
    this.numCols = numCols;
    setNumColsIsSet(true);
    return this;
  }

  public void unsetNumCols() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMCOLS_ISSET_ID);
  }

  /** Returns true if field numCols is set (has been assigned a value) and false otherwise */
  public boolean isSetNumCols() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMCOLS_ISSET_ID);
  }

  public void setNumColsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMCOLS_ISSET_ID, value);
  }

  public int getTreatmentValueSize() {
    return (this.treatmentValue == null) ? 0 : this.treatmentValue.size();
  }

  public java.util.Iterator<Double> getTreatmentValueIterator() {
    return (this.treatmentValue == null) ? null : this.treatmentValue.iterator();
  }

  public void addToTreatmentValue(double elem) {
    if (this.treatmentValue == null) {
      this.treatmentValue = new ArrayList<Double>();
    }
    this.treatmentValue.add(elem);
  }

  public List<Double> getTreatmentValue() {
    return this.treatmentValue;
  }

  public TreatmentGrid setTreatmentValue(List<Double> treatmentValue) {
    this.treatmentValue = treatmentValue;
    return this;
  }

  public void unsetTreatmentValue() {
    this.treatmentValue = null;
  }

  /** Returns true if field treatmentValue is set (has been assigned a value) and false otherwise */
  public boolean isSetTreatmentValue() {
    return this.treatmentValue != null;
  }

  public void setTreatmentValueIsSet(boolean value) {
    if (!value) {
      this.treatmentValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PARTFIELD_ID:
      if (value == null) {
        unsetPartfieldId();
      } else {
        setPartfieldId((Integer)value);
      }
      break;

    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Integer)value);
      }
      break;

    case NUM_ROWS:
      if (value == null) {
        unsetNumRows();
      } else {
        setNumRows((Integer)value);
      }
      break;

    case NUM_COLS:
      if (value == null) {
        unsetNumCols();
      } else {
        setNumCols((Integer)value);
      }
      break;

    case TREATMENT_VALUE:
      if (value == null) {
        unsetTreatmentValue();
      } else {
        setTreatmentValue((List<Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case PARTFIELD_ID:
      return Integer.valueOf(getPartfieldId());

    case TASK_ID:
      return Integer.valueOf(getTaskId());

    case NUM_ROWS:
      return Integer.valueOf(getNumRows());

    case NUM_COLS:
      return Integer.valueOf(getNumCols());

    case TREATMENT_VALUE:
      return getTreatmentValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PARTFIELD_ID:
      return isSetPartfieldId();
    case TASK_ID:
      return isSetTaskId();
    case NUM_ROWS:
      return isSetNumRows();
    case NUM_COLS:
      return isSetNumCols();
    case TREATMENT_VALUE:
      return isSetTreatmentValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TreatmentGrid)
      return this.equals((TreatmentGrid)that);
    return false;
  }

  public boolean equals(TreatmentGrid that) {
    if (that == null)
      return false;

    boolean this_present_Id = true;
    boolean that_present_Id = true;
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    boolean this_present_partfieldId = true;
    boolean that_present_partfieldId = true;
    if (this_present_partfieldId || that_present_partfieldId) {
      if (!(this_present_partfieldId && that_present_partfieldId))
        return false;
      if (this.partfieldId != that.partfieldId)
        return false;
    }

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_numRows = true;
    boolean that_present_numRows = true;
    if (this_present_numRows || that_present_numRows) {
      if (!(this_present_numRows && that_present_numRows))
        return false;
      if (this.numRows != that.numRows)
        return false;
    }

    boolean this_present_numCols = true;
    boolean that_present_numCols = true;
    if (this_present_numCols || that_present_numCols) {
      if (!(this_present_numCols && that_present_numCols))
        return false;
      if (this.numCols != that.numCols)
        return false;
    }

    boolean this_present_treatmentValue = true && this.isSetTreatmentValue();
    boolean that_present_treatmentValue = true && that.isSetTreatmentValue();
    if (this_present_treatmentValue || that_present_treatmentValue) {
      if (!(this_present_treatmentValue && that_present_treatmentValue))
        return false;
      if (!this.treatmentValue.equals(that.treatmentValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Id = true;
    list.add(present_Id);
    if (present_Id)
      list.add(Id);

    boolean present_partfieldId = true;
    list.add(present_partfieldId);
    if (present_partfieldId)
      list.add(partfieldId);

    boolean present_taskId = true;
    list.add(present_taskId);
    if (present_taskId)
      list.add(taskId);

    boolean present_numRows = true;
    list.add(present_numRows);
    if (present_numRows)
      list.add(numRows);

    boolean present_numCols = true;
    list.add(present_numCols);
    if (present_numCols)
      list.add(numCols);

    boolean present_treatmentValue = true && (isSetTreatmentValue());
    list.add(present_treatmentValue);
    if (present_treatmentValue)
      list.add(treatmentValue);

    return list.hashCode();
  }

  @Override
  public int compareTo(TreatmentGrid other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartfieldId()).compareTo(other.isSetPartfieldId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartfieldId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partfieldId, other.partfieldId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumRows()).compareTo(other.isSetNumRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numRows, other.numRows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumCols()).compareTo(other.isSetNumCols());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumCols()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numCols, other.numCols);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreatmentValue()).compareTo(other.isSetTreatmentValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreatmentValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treatmentValue, other.treatmentValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TreatmentGrid(");
    boolean first = true;

    sb.append("Id:");
    sb.append(this.Id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partfieldId:");
    sb.append(this.partfieldId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numRows:");
    sb.append(this.numRows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numCols:");
    sb.append(this.numCols);
    first = false;
    if (!first) sb.append(", ");
    sb.append("treatmentValue:");
    if (this.treatmentValue == null) {
      sb.append("null");
    } else {
      sb.append(this.treatmentValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TreatmentGridStandardSchemeFactory implements SchemeFactory {
    public TreatmentGridStandardScheme getScheme() {
      return new TreatmentGridStandardScheme();
    }
  }

  private static class TreatmentGridStandardScheme extends StandardScheme<TreatmentGrid> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TreatmentGrid struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTFIELD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partfieldId = iprot.readI32();
              struct.setPartfieldIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskId = iprot.readI32();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numRows = iprot.readI32();
              struct.setNumRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_COLS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numCols = iprot.readI32();
              struct.setNumColsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TREATMENT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                struct.treatmentValue = new ArrayList<Double>(_list96.size);
                double _elem97;
                for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                {
                  _elem97 = iprot.readDouble();
                  struct.treatmentValue.add(_elem97);
                }
                iprot.readListEnd();
              }
              struct.setTreatmentValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TreatmentGrid struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.Id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTFIELD_ID_FIELD_DESC);
      oprot.writeI32(struct.partfieldId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI32(struct.taskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_ROWS_FIELD_DESC);
      oprot.writeI32(struct.numRows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_COLS_FIELD_DESC);
      oprot.writeI32(struct.numCols);
      oprot.writeFieldEnd();
      if (struct.treatmentValue != null) {
        oprot.writeFieldBegin(TREATMENT_VALUE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.treatmentValue.size()));
          for (double _iter99 : struct.treatmentValue)
          {
            oprot.writeDouble(_iter99);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TreatmentGridTupleSchemeFactory implements SchemeFactory {
    public TreatmentGridTupleScheme getScheme() {
      return new TreatmentGridTupleScheme();
    }
  }

  private static class TreatmentGridTupleScheme extends TupleScheme<TreatmentGrid> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TreatmentGrid struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPartfieldId()) {
        optionals.set(1);
      }
      if (struct.isSetTaskId()) {
        optionals.set(2);
      }
      if (struct.isSetNumRows()) {
        optionals.set(3);
      }
      if (struct.isSetNumCols()) {
        optionals.set(4);
      }
      if (struct.isSetTreatmentValue()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI32(struct.Id);
      }
      if (struct.isSetPartfieldId()) {
        oprot.writeI32(struct.partfieldId);
      }
      if (struct.isSetTaskId()) {
        oprot.writeI32(struct.taskId);
      }
      if (struct.isSetNumRows()) {
        oprot.writeI32(struct.numRows);
      }
      if (struct.isSetNumCols()) {
        oprot.writeI32(struct.numCols);
      }
      if (struct.isSetTreatmentValue()) {
        {
          oprot.writeI32(struct.treatmentValue.size());
          for (double _iter100 : struct.treatmentValue)
          {
            oprot.writeDouble(_iter100);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TreatmentGrid struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.Id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partfieldId = iprot.readI32();
        struct.setPartfieldIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.taskId = iprot.readI32();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.numRows = iprot.readI32();
        struct.setNumRowsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.numCols = iprot.readI32();
        struct.setNumColsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.treatmentValue = new ArrayList<Double>(_list101.size);
          double _elem102;
          for (int _i103 = 0; _i103 < _list101.size; ++_i103)
          {
            _elem102 = iprot.readDouble();
            struct.treatmentValue.add(_elem102);
          }
        }
        struct.setTreatmentValueIsSet(true);
      }
    }
  }

}

